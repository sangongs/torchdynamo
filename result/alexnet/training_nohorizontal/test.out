AlexNet(
  (features): Sequential(
    (0): Conv2d(3, 64, kernel_size=(11, 11), stride=(4, 4), padding=(2, 2))
    (1): ReLU(inplace=True)
    (2): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
    (3): Conv2d(64, 192, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
    (4): ReLU(inplace=True)
    (5): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
    (6): Conv2d(192, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (7): ReLU(inplace=True)
    (8): Conv2d(384, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (9): ReLU(inplace=True)
    (10): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (11): ReLU(inplace=True)
    (12): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(6, 6))
  (classifier): Sequential(
    (0): Dropout(p=0.5, inplace=False)
    (1): Linear(in_features=9216, out_features=4096, bias=True)
    (2): ReLU(inplace=True)
    (3): Dropout(p=0.5, inplace=False)
    (4): Linear(in_features=4096, out_features=4096, bias=True)
    (5): ReLU(inplace=True)
    (6): Linear(in_features=4096, out_features=1000, bias=True)
  )
)
cuda train alexnet                            torchdynamo.eval_frame: [INFO] [2022-10-11 17:22:23,942] Step 1: torchdynamo begin tracing
torchdynamo.eval_frame: [DEBUG] [2022-10-11 17:22:23,942] skipping __init__ /fsx/users/guoqiang/work/torchdynamo/env/lib/python3.8/contextlib.py
torchdynamo.eval_frame: [DEBUG] [2022-10-11 17:22:23,945] skipping __enter__ /fsx/users/guoqiang/work/torchdynamo/env/lib/python3.8/contextlib.py
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:23,997] TRACE starts_line benchmarks/torchbench.py:358
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:23,997] TRACE LOAD_GLOBAL clone_inputs []
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:23,998] TRACE LOAD_FAST inputs [SkipFilesVariable()]
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:23,998] TRACE CALL_FUNCTION 1 [SkipFilesVariable(), ListVariable()]
torchdynamo.symbolic_convert: [WARNING] [2022-10-11 17:22:24,000] Graph break: call_function in skip_files /fsx/users/guoqiang/work/torchdynamo/torchdynamo/utils.py from user code at   File "benchmarks/torchbench.py", line 358, in forward_and_backward_pass
    cloned_inputs = clone_inputs(inputs)

torchdynamo.convert_frame: [Level 15] [2022-10-11 17:22:24,008] ORIGINAL BYTECODE forward_and_backward_pass benchmarks/torchbench.py line 357 
358           0 LOAD_GLOBAL              0 (clone_inputs)
              2 LOAD_FAST                2 (inputs)
              4 CALL_FUNCTION            1
              6 STORE_FAST               4 (cloned_inputs)

359           8 LOAD_FAST                1 (mod)
             10 LOAD_METHOD              1 (zero_grad)
             12 LOAD_CONST               1 (True)
             14 CALL_METHOD              1
             16 POP_TOP

360          18 LOAD_FAST                0 (self)
             20 LOAD_METHOD              2 (autocast)
             22 CALL_METHOD              0
             24 SETUP_WITH              24 (to 50)
             26 POP_TOP

361          28 LOAD_FAST                1 (mod)
             30 LOAD_FAST                4 (cloned_inputs)
             32 CALL_FUNCTION_EX         0
             34 STORE_FAST               5 (pred)

362          36 LOAD_FAST                0 (self)
             38 LOAD_METHOD              3 (compute_loss)
             40 LOAD_FAST                5 (pred)
             42 CALL_METHOD              1
             44 STORE_FAST               6 (loss)
             46 POP_BLOCK
             48 BEGIN_FINALLY
        >>   50 WITH_CLEANUP_START
             52 WITH_CLEANUP_FINISH
             54 END_FINALLY

363          56 LOAD_FAST                0 (self)
             58 LOAD_ATTR                4 (grad_scaler)
             60 LOAD_METHOD              5 (scale)
             62 LOAD_FAST                6 (loss)
             64 CALL_METHOD              1
             66 LOAD_METHOD              6 (backward)
             68 CALL_METHOD              0
             70 POP_TOP

364          72 LOAD_FAST                3 (collect_outputs)
             74 POP_JUMP_IF_FALSE       90

365          76 LOAD_GLOBAL              7 (collect_results)
             78 LOAD_FAST                1 (mod)
             80 LOAD_FAST                5 (pred)
             82 LOAD_FAST                6 (loss)
             84 LOAD_FAST                4 (cloned_inputs)
             86 CALL_FUNCTION            4
             88 RETURN_VALUE

366     >>   90 LOAD_CONST               0 (None)
             92 RETURN_VALUE

 
torchdynamo.convert_frame: [Level 15] [2022-10-11 17:22:24,008] MODIFIED BYTECODE forward_and_backward_pass benchmarks/torchbench.py line 357 
357           0 LOAD_GLOBAL              0 (clone_inputs)
              2 LOAD_FAST                2 (inputs)
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              8 (__resume_at_6_0)
              8 ROT_TWO
             10 LOAD_FAST                0 (self)
             12 LOAD_FAST                1 (mod)
             14 LOAD_FAST                3 (collect_outputs)
             16 CALL_FUNCTION            4
             18 RETURN_VALUE

 
torchdynamo.convert_frame: [Level 15] [2022-10-11 17:22:24,270] GUARDS:
 - 
            local 'inputs' LIST_LENGTH
            {
                'guard_types': ['LIST_LENGTH'],
                'code': ['___check_type_id(inputs, 94588239254560)', 'len(inputs) == 1'],
                'obj_weakref': None
                'guarded_class': <weakref at 0x7f12d2215ae0; to 'type' at 0x56070a669420 (list)>
            }
            
 - 
            local 'inputs[0]' TENSOR_MATCH
            {
                'guard_types': ['TENSOR_MATCH'],
                'code': None,
                'obj_weakref': <weakref at 0x7f1240326ef0; to 'Tensor' at 0x7f124c7dc3b0>
                'guarded_class': <weakref at 0x7f1259ce11d0; to 'torch._C._TensorMeta' at 0x56070fb01420 (Tensor)>
            }
            
 - 
            global 'clone_inputs' FUNCTION_MATCH
            {
                'guard_types': None,
                'code': None,
                'obj_weakref': None
                'guarded_class': None
            }
            
torchdynamo.eval_frame: [DEBUG] [2022-10-11 17:22:24,270] skipping clone_inputs /fsx/users/guoqiang/work/torchdynamo/torchdynamo/utils.py
torchdynamo.eval_frame: [DEBUG] [2022-10-11 17:22:24,270] skipping clone_input /fsx/users/guoqiang/work/torchdynamo/torchdynamo/utils.py
torchdynamo.eval_frame: [DEBUG] [2022-10-11 17:22:24,273] skipping __init__ /fsx/users/guoqiang/work/torchdynamo/env/lib/python3.8/site-packages/torch/autograd/grad_mode.py
torchdynamo.eval_frame: [DEBUG] [2022-10-11 17:22:24,273] skipping is_scripting /fsx/users/guoqiang/work/torchdynamo/env/lib/python3.8/site-packages/torch/_jit_internal.py
torchdynamo.eval_frame: [DEBUG] [2022-10-11 17:22:24,275] skipping __enter__ /fsx/users/guoqiang/work/torchdynamo/env/lib/python3.8/site-packages/torch/autograd/grad_mode.py
torchdynamo.eval_frame: [DEBUG] [2022-10-11 17:22:24,276] skipping __init__ /fsx/users/guoqiang/work/torchdynamo/env/lib/python3.8/site-packages/torch/autograd/grad_mode.py
torchdynamo.eval_frame: [DEBUG] [2022-10-11 17:22:24,276] skipping <genexpr> /fsx/users/guoqiang/work/torchdynamo/torchdynamo/utils.py
torchdynamo.eval_frame: [DEBUG] [2022-10-11 17:22:24,278] skipping __exit__ /fsx/users/guoqiang/work/torchdynamo/env/lib/python3.8/site-packages/torch/autograd/grad_mode.py
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:24,288] TRACE starts_line benchmarks/torchbench.py:358
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:24,288] TRACE LOAD_FAST ___stack0 []
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:24,288] TRACE JUMP_ABSOLUTE 10 [ListVariable()]
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:24,288] TRACE STORE_FAST cloned_inputs [ListVariable()]
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:24,289] TRACE starts_line benchmarks/torchbench.py:359
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:24,289] TRACE LOAD_FAST mod []
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:24,289] TRACE LOAD_ATTR zero_grad [NNModuleVariable()]
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:24,297] TRACE LOAD_CONST True [UserMethodVariable(<function Module.zero_grad at 0x7f1256bd2d30>, NNModuleVariable())]
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:24,298] TRACE CALL_FUNCTION 1 [UserMethodVariable(<function Module.zero_grad at 0x7f1256bd2d30>, NNModuleVariable()), ConstantVariable(bool)]
torchdynamo.symbolic_convert: [WARNING] [2022-10-11 17:22:24,298] Graph break: call_method NNModuleVariable() zero_grad [ConstantVariable(bool)] {} from user code at   File "benchmarks/torchbench.py", line 359, in <graph break in forward_and_backward_pass>
    mod.zero_grad(True)

torchdynamo.convert_frame: [Level 15] [2022-10-11 17:22:24,305] ORIGINAL BYTECODE <graph break in forward_and_backward_pass> benchmarks/torchbench.py line 358 
358           0 LOAD_FAST                0 (___stack0)
              2 JUMP_ABSOLUTE           10
              4 LOAD_GLOBAL              0 (clone_inputs)
              6 LOAD_FAST                4 (inputs)
              8 CALL_FUNCTION            1
        >>   10 STORE_FAST               5 (cloned_inputs)

359          12 LOAD_FAST                2 (mod)
             14 LOAD_ATTR                1 (zero_grad)
             16 LOAD_CONST               1 (True)
             18 CALL_FUNCTION            1
             20 POP_TOP

360          22 LOAD_FAST                1 (self)
             24 LOAD_ATTR                2 (autocast)
             26 CALL_FUNCTION            0
             28 SETUP_WITH              24 (to 54)
             30 POP_TOP

361          32 LOAD_FAST                2 (mod)
             34 LOAD_FAST                5 (cloned_inputs)
             36 CALL_FUNCTION_EX         0
             38 STORE_FAST               6 (pred)

362          40 LOAD_FAST                1 (self)
             42 LOAD_ATTR                3 (compute_loss)
             44 LOAD_FAST                6 (pred)
             46 CALL_FUNCTION            1
             48 STORE_FAST               7 (loss)
             50 POP_BLOCK
             52 BEGIN_FINALLY
        >>   54 WITH_CLEANUP_START
             56 WITH_CLEANUP_FINISH
             58 END_FINALLY

363          60 LOAD_FAST                1 (self)
             62 LOAD_ATTR                4 (grad_scaler)
             64 LOAD_ATTR                5 (scale)
             66 LOAD_FAST                7 (loss)
             68 CALL_FUNCTION            1
             70 LOAD_ATTR                6 (backward)
             72 CALL_FUNCTION            0
             74 POP_TOP

364          76 LOAD_FAST                3 (collect_outputs)
             78 POP_JUMP_IF_FALSE       94

365          80 LOAD_GLOBAL              7 (collect_results)
             82 LOAD_FAST                2 (mod)
             84 LOAD_FAST                6 (pred)
             86 LOAD_FAST                7 (loss)
             88 LOAD_FAST                5 (cloned_inputs)
             90 CALL_FUNCTION            4
             92 RETURN_VALUE

366     >>   94 LOAD_CONST               0 (None)
             96 RETURN_VALUE

 
torchdynamo.convert_frame: [Level 15] [2022-10-11 17:22:24,306] MODIFIED BYTECODE <graph break in forward_and_backward_pass> benchmarks/torchbench.py line 358 
358           0 LOAD_FAST                2 (mod)
              2 LOAD_ATTR                1 (zero_grad)
              4 LOAD_CONST               1 (True)
              6 LOAD_FAST                0 (___stack0)
              8 STORE_FAST               5 (cloned_inputs)
             10 CALL_FUNCTION            1
             12 LOAD_GLOBAL              8 (__resume_at_20_1)
             14 ROT_TWO
             16 LOAD_FAST                1 (self)
             18 LOAD_FAST                2 (mod)
             20 LOAD_FAST                3 (collect_outputs)
             22 LOAD_FAST                5 (cloned_inputs)
             24 CALL_FUNCTION            5
             26 RETURN_VALUE

 
torchdynamo.convert_frame: [Level 15] [2022-10-11 17:22:24,309] GUARDS:
 - 
            local 'mod' NN_MODULE
            {
                'guard_types': ['ID_MATCH'],
                'code': ['___check_obj_id(mod, 139716366585328)'],
                'obj_weakref': <weakref at 0x7f1240238ef0; to 'AlexNet' at 0x7f1240664df0>
                'guarded_class': <weakref at 0x7f1240d15b30; to 'type' at 0x5607113849c0 (AlexNet)>
            }
            
 - 
            local '___stack0' LIST_LENGTH
            {
                'guard_types': ['LIST_LENGTH'],
                'code': ['___check_type_id(___stack0, 94588239254560)', 'len(___stack0) == 1'],
                'obj_weakref': None
                'guarded_class': <weakref at 0x7f12d2215ae0; to 'type' at 0x56070a669420 (list)>
            }
            
 - 
            local '___stack0[0]' TENSOR_MATCH
            {
                'guard_types': ['TENSOR_MATCH'],
                'code': None,
                'obj_weakref': <weakref at 0x7f124023d180; to 'Tensor' at 0x7f124cb33a40>
                'guarded_class': <weakref at 0x7f1259ce11d0; to 'torch._C._TensorMeta' at 0x56070fb01420 (Tensor)>
            }
            
torchdynamo.eval_frame: [DEBUG] [2022-10-11 17:22:24,310] skipping zero_grad /fsx/users/guoqiang/work/torchdynamo/env/lib/python3.8/site-packages/torch/nn/modules/module.py
torchdynamo.eval_frame: [DEBUG] [2022-10-11 17:22:24,311] skipping __getattr__ /fsx/users/guoqiang/work/torchdynamo/env/lib/python3.8/site-packages/torch/nn/modules/module.py
torchdynamo.eval_frame: [DEBUG] [2022-10-11 17:22:24,311] skipping parameters /fsx/users/guoqiang/work/torchdynamo/env/lib/python3.8/site-packages/torch/nn/modules/module.py
torchdynamo.eval_frame: [DEBUG] [2022-10-11 17:22:24,311] skipping named_parameters /fsx/users/guoqiang/work/torchdynamo/env/lib/python3.8/site-packages/torch/nn/modules/module.py
torchdynamo.eval_frame: [DEBUG] [2022-10-11 17:22:24,312] skipping _named_members /fsx/users/guoqiang/work/torchdynamo/env/lib/python3.8/site-packages/torch/nn/modules/module.py
torchdynamo.eval_frame: [DEBUG] [2022-10-11 17:22:24,312] skipping named_modules /fsx/users/guoqiang/work/torchdynamo/env/lib/python3.8/site-packages/torch/nn/modules/module.py
torchdynamo.eval_frame: [DEBUG] [2022-10-11 17:22:24,312] skipping <lambda> /fsx/users/guoqiang/work/torchdynamo/env/lib/python3.8/site-packages/torch/nn/modules/module.py
torchdynamo.eval_frame: [DEBUG] [2022-10-11 17:22:24,312] skipping __hash__ /fsx/users/guoqiang/work/torchdynamo/env/lib/python3.8/site-packages/torch/_tensor.py
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:24,314] TRACE starts_line benchmarks/torchbench.py:359
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:24,317] TRACE LOAD_FAST ___stack0 []
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:24,317] TRACE JUMP_ABSOLUTE 20 [ConstantVariable(NoneType)]
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:24,317] TRACE POP_TOP None [ConstantVariable(NoneType)]
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:24,318] TRACE starts_line benchmarks/torchbench.py:360
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:24,318] TRACE LOAD_FAST self []
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:24,318] TRACE LOAD_ATTR autocast [UserDefinedObjectVariable(TorchBenchmarkRunner)]
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:24,319] TRACE CALL_FUNCTION 0 [UserDefinedClassVariable()]
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:24,319] TRACE SETUP_WITH 54 [UserDefinedObjectVariable(NullContext)]
torchdynamo.convert_frame: [Level 15] [2022-10-11 17:22:24,320] ORIGINAL BYTECODE <graph break in forward_and_backward_pass> benchmarks/torchbench.py line 359 
359           0 LOAD_FAST                0 (___stack0)
              2 JUMP_ABSOLUTE           20
              4 LOAD_GLOBAL              0 (clone_inputs)
              6 LOAD_FAST                5 (inputs)
              8 CALL_FUNCTION            1
             10 STORE_FAST               4 (cloned_inputs)
             12 LOAD_FAST                2 (mod)
             14 LOAD_ATTR                1 (zero_grad)
             16 LOAD_CONST               1 (True)
             18 CALL_FUNCTION            1
        >>   20 POP_TOP

360          22 LOAD_FAST                1 (self)
             24 LOAD_ATTR                2 (autocast)
             26 CALL_FUNCTION            0
             28 SETUP_WITH              24 (to 54)
             30 POP_TOP

361          32 LOAD_FAST                2 (mod)
             34 LOAD_FAST                4 (cloned_inputs)
             36 CALL_FUNCTION_EX         0
             38 STORE_FAST               6 (pred)

362          40 LOAD_FAST                1 (self)
             42 LOAD_ATTR                3 (compute_loss)
             44 LOAD_FAST                6 (pred)
             46 CALL_FUNCTION            1
             48 STORE_FAST               7 (loss)
             50 POP_BLOCK
             52 BEGIN_FINALLY
        >>   54 WITH_CLEANUP_START
             56 WITH_CLEANUP_FINISH
             58 END_FINALLY

363          60 LOAD_FAST                1 (self)
             62 LOAD_ATTR                4 (grad_scaler)
             64 LOAD_ATTR                5 (scale)
             66 LOAD_FAST                7 (loss)
             68 CALL_FUNCTION            1
             70 LOAD_ATTR                6 (backward)
             72 CALL_FUNCTION            0
             74 POP_TOP

364          76 LOAD_FAST                3 (collect_outputs)
             78 POP_JUMP_IF_FALSE       94

365          80 LOAD_GLOBAL              7 (collect_results)
             82 LOAD_FAST                2 (mod)
             84 LOAD_FAST                6 (pred)
             86 LOAD_FAST                7 (loss)
             88 LOAD_FAST                4 (cloned_inputs)
             90 CALL_FUNCTION            4
             92 RETURN_VALUE

366     >>   94 LOAD_CONST               0 (None)
             96 RETURN_VALUE

 
torchdynamo.convert_frame: [Level 15] [2022-10-11 17:22:24,323] MODIFIED BYTECODE <graph break in forward_and_backward_pass> benchmarks/torchbench.py line 359 
360           0 LOAD_FAST                1 (self)
              2 LOAD_ATTR                2 (autocast)
              4 CALL_FUNCTION            0
              6 SETUP_WITH              24 (to 32)
              8 POP_TOP

361          10 LOAD_FAST                2 (mod)
             12 LOAD_FAST                4 (cloned_inputs)
             14 CALL_FUNCTION_EX         0
             16 STORE_FAST               6 (pred)

362          18 LOAD_FAST                1 (self)
             20 LOAD_ATTR                3 (compute_loss)
             22 LOAD_FAST                6 (pred)
             24 CALL_FUNCTION            1
             26 STORE_FAST               7 (loss)
             28 POP_BLOCK
             30 BEGIN_FINALLY
        >>   32 WITH_CLEANUP_START
             34 WITH_CLEANUP_FINISH
             36 END_FINALLY

363          38 LOAD_FAST                1 (self)
             40 LOAD_ATTR                4 (grad_scaler)
             42 LOAD_ATTR                5 (scale)
             44 LOAD_FAST                7 (loss)
             46 CALL_FUNCTION            1
             48 LOAD_ATTR                6 (backward)
             50 CALL_FUNCTION            0
             52 POP_TOP

364          54 LOAD_FAST                3 (collect_outputs)
             56 POP_JUMP_IF_FALSE       72

365          58 LOAD_GLOBAL              7 (collect_results)
             60 LOAD_FAST                2 (mod)
             62 LOAD_FAST                6 (pred)
             64 LOAD_FAST                7 (loss)
             66 LOAD_FAST                4 (cloned_inputs)
             68 CALL_FUNCTION            4
             70 RETURN_VALUE

366     >>   72 LOAD_CONST               0 (None)
             74 RETURN_VALUE

 
torchdynamo.convert_frame: [Level 15] [2022-10-11 17:22:24,323] GUARDS:
 - 
            local 'cloned_inputs' LIST_LENGTH
            {
                'guard_types': ['LIST_LENGTH'],
                'code': ['___check_type_id(cloned_inputs, 94588239254560)', 'len(cloned_inputs) == 1'],
                'obj_weakref': None
                'guarded_class': <weakref at 0x7f12d2215ae0; to 'type' at 0x56070a669420 (list)>
            }
            
 - 
            local 'cloned_inputs[0]' TENSOR_MATCH
            {
                'guard_types': ['TENSOR_MATCH'],
                'code': None,
                'obj_weakref': <weakref at 0x7f124023d180; to 'Tensor' at 0x7f124cb33a40>
                'guarded_class': <weakref at 0x7f1259ce11d0; to 'torch._C._TensorMeta' at 0x56070fb01420 (Tensor)>
            }
            
torchdynamo.convert_frame: [DEBUG] [2022-10-11 17:22:24,325] skipping because no torch.* __enter__             /fsx/users/guoqiang/work/torchdynamo/benchmarks/common.py 191
torchdynamo.eval_frame: [DEBUG] [2022-10-11 17:22:24,325] skipping _call_impl /fsx/users/guoqiang/work/torchdynamo/env/lib/python3.8/site-packages/torch/nn/modules/module.py
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:24,328] TRACE starts_line /fsx/users/guoqiang/work/torchdynamo/env/lib/python3.8/site-packages/torchvision/models/alexnet.py:48
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:24,328] TRACE LOAD_FAST self []
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:24,329] TRACE LOAD_ATTR features [NNModuleVariable()]
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:24,329] TRACE LOAD_FAST x [NNModuleVariable()]
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:24,330] TRACE CALL_FUNCTION 1 [NNModuleVariable(), TensorVariable()]
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:24,352] TRACE STORE_FAST x [TensorVariable()]
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:24,352] TRACE starts_line /fsx/users/guoqiang/work/torchdynamo/env/lib/python3.8/site-packages/torchvision/models/alexnet.py:49
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:24,353] TRACE LOAD_FAST self []
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:24,353] TRACE LOAD_ATTR avgpool [NNModuleVariable()]
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:24,353] TRACE LOAD_FAST x [NNModuleVariable()]
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:24,355] TRACE CALL_FUNCTION 1 [NNModuleVariable(), TensorVariable()]
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:24,360] TRACE STORE_FAST x [TensorVariable()]
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:24,360] TRACE starts_line /fsx/users/guoqiang/work/torchdynamo/env/lib/python3.8/site-packages/torchvision/models/alexnet.py:50
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:24,360] TRACE LOAD_GLOBAL torch []
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:24,365] TRACE LOAD_ATTR flatten [TorchVariable(<module 'torch' from '/fsx/users/guoqiang/work/torchdynamo/env/lib/python3.8/site-packages/torch/__init__.py'>)]
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:24,365] TRACE LOAD_FAST x [TorchVariable(<built-in method flatten of type object at 0x7f12b057fb20>)]
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:24,365] TRACE LOAD_CONST 1 [TorchVariable(<built-in method flatten of type object at 0x7f12b057fb20>), TensorVariable()]
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:24,371] TRACE CALL_FUNCTION 2 [TorchVariable(<built-in method flatten of type object at 0x7f12b057fb20>), TensorVariable(), ConstantVariable(int)]
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:24,377] TRACE STORE_FAST x [TensorVariable()]
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:24,377] TRACE starts_line /fsx/users/guoqiang/work/torchdynamo/env/lib/python3.8/site-packages/torchvision/models/alexnet.py:51
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:24,377] TRACE LOAD_FAST self []
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:24,377] TRACE LOAD_ATTR classifier [NNModuleVariable()]
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:24,383] TRACE LOAD_FAST x [NNModuleVariable()]
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:24,383] TRACE CALL_FUNCTION 1 [NNModuleVariable(), TensorVariable()]
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:24,399] TRACE STORE_FAST x [TensorVariable()]
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:24,399] TRACE starts_line /fsx/users/guoqiang/work/torchdynamo/env/lib/python3.8/site-packages/torchvision/models/alexnet.py:52
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:24,399] TRACE LOAD_FAST x []
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:24,401] TRACE RETURN_VALUE None [TensorVariable()]
torchdynamo.output_graph: [INFO] [2022-10-11 17:22:24,408] Step 2: calling compiler function
torchdynamo.output_graph: [INFO] [2022-10-11 17:22:24,439] Step 2: done compiler function
torchdynamo.output_graph: [Level 15] [2022-10-11 17:22:24,445] TRACED GRAPH
 __compiled_fn_2 <eval_with_key>.4 opcode         name               target                                                      args                     kwargs
-------------  -----------------  ----------------------------------------------------------  -----------------------  --------
placeholder    x                  x                                                           ()                       {}
call_module    self_features_0    self_features_0                                             (x,)                     {}
call_module    self_features_1    self_features_1                                             (self_features_0,)       {}
call_module    self_features_2    self_features_2                                             (self_features_1,)       {}
call_module    self_features_3    self_features_3                                             (self_features_2,)       {}
call_module    self_features_4    self_features_4                                             (self_features_3,)       {}
call_module    self_features_5    self_features_5                                             (self_features_4,)       {}
call_module    self_features_6    self_features_6                                             (self_features_5,)       {}
call_module    self_features_7    self_features_7                                             (self_features_6,)       {}
call_module    self_features_8    self_features_8                                             (self_features_7,)       {}
call_module    self_features_9    self_features_9                                             (self_features_8,)       {}
call_module    self_features_10   self_features_10                                            (self_features_9,)       {}
call_module    self_features_11   self_features_11                                            (self_features_10,)      {}
call_module    self_features_12   self_features_12                                            (self_features_11,)      {}
call_module    self_avgpool       self_avgpool                                                (self_features_12,)      {}
call_function  flatten            <built-in method flatten of type object at 0x7f12b057fb20>  (self_avgpool, 1)        {}
call_module    self_classifier_0  self_classifier_0                                           (flatten,)               {}
call_module    self_classifier_1  self_classifier_1                                           (self_classifier_0,)     {}
call_module    self_classifier_2  self_classifier_2                                           (self_classifier_1,)     {}
call_module    self_classifier_3  self_classifier_3                                           (self_classifier_2,)     {}
call_module    self_classifier_4  self_classifier_4                                           (self_classifier_3,)     {}
call_module    self_classifier_5  self_classifier_5                                           (self_classifier_4,)     {}
call_module    self_classifier_6  self_classifier_6                                           (self_classifier_5,)     {}
output         output             output                                                      ((self_classifier_6,),)  {}

torchdynamo.convert_frame: [Level 15] [2022-10-11 17:22:24,446] ORIGINAL BYTECODE forward /fsx/users/guoqiang/work/torchdynamo/env/lib/python3.8/site-packages/torchvision/models/alexnet.py line 47 
 48           0 LOAD_FAST                0 (self)
              2 LOAD_METHOD              0 (features)
              4 LOAD_FAST                1 (x)
              6 CALL_METHOD              1
              8 STORE_FAST               1 (x)

 49          10 LOAD_FAST                0 (self)
             12 LOAD_METHOD              1 (avgpool)
             14 LOAD_FAST                1 (x)
             16 CALL_METHOD              1
             18 STORE_FAST               1 (x)

 50          20 LOAD_GLOBAL              2 (torch)
             22 LOAD_METHOD              3 (flatten)
             24 LOAD_FAST                1 (x)
             26 LOAD_CONST               1 (1)
             28 CALL_METHOD              2
             30 STORE_FAST               1 (x)

 51          32 LOAD_FAST                0 (self)
             34 LOAD_METHOD              4 (classifier)
             36 LOAD_FAST                1 (x)
             38 CALL_METHOD              1
             40 STORE_FAST               1 (x)

 52          42 LOAD_FAST                1 (x)
             44 RETURN_VALUE

 
torchdynamo.convert_frame: [Level 15] [2022-10-11 17:22:24,448] MODIFIED BYTECODE forward /fsx/users/guoqiang/work/torchdynamo/env/lib/python3.8/site-packages/torchvision/models/alexnet.py line 47 
 47           0 LOAD_GLOBAL              5 (__compiled_fn_2)
              2 LOAD_FAST                1 (x)
              4 CALL_FUNCTION            1
              6 UNPACK_SEQUENCE          1
              8 RETURN_VALUE

 
torchdynamo.convert_frame: [Level 15] [2022-10-11 17:22:24,449] GUARDS:
 - 
            local 'x' TENSOR_MATCH
            {
                'guard_types': ['TENSOR_MATCH'],
                'code': None,
                'obj_weakref': <weakref at 0x7f124023d180; to 'Tensor' at 0x7f124cb33a40>
                'guarded_class': <weakref at 0x7f1259ce11d0; to 'torch._C._TensorMeta' at 0x56070fb01420 (Tensor)>
            }
            
 - 
            local 'self' NN_MODULE
            {
                'guard_types': ['ID_MATCH'],
                'code': ['___check_obj_id(self, 139716366585328)'],
                'obj_weakref': <weakref at 0x7f1240238ef0; to 'AlexNet' at 0x7f1240664df0>
                'guarded_class': <weakref at 0x7f1240d15b30; to 'type' at 0x5607113849c0 (AlexNet)>
            }
            
 - 
            global 'torch' FUNCTION_MATCH
            {
                'guard_types': None,
                'code': None,
                'obj_weakref': None
                'guarded_class': None
            }
            
 - 
            local_nn_module 'self.avgpool' NN_MODULE
            {
                'guard_types': None,
                'code': None,
                'obj_weakref': None
                'guarded_class': None
            }
            
 - 
            local_nn_module 'self.features' NN_MODULE
            {
                'guard_types': None,
                'code': None,
                'obj_weakref': None
                'guarded_class': None
            }
            
 - 
            local_nn_module 'self.classifier' NN_MODULE
            {
                'guard_types': None,
                'code': None,
                'obj_weakref': None
                'guarded_class': None
            }
            
 - 
            local_nn_module 'self.features[0]' NN_MODULE
            {
                'guard_types': None,
                'code': None,
                'obj_weakref': None
                'guarded_class': None
            }
            
 - 
            local_nn_module 'self.features[1]' NN_MODULE
            {
                'guard_types': None,
                'code': None,
                'obj_weakref': None
                'guarded_class': None
            }
            
 - 
            local_nn_module 'self.features[2]' NN_MODULE
            {
                'guard_types': None,
                'code': None,
                'obj_weakref': None
                'guarded_class': None
            }
            
 - 
            local_nn_module 'self.features[3]' NN_MODULE
            {
                'guard_types': None,
                'code': None,
                'obj_weakref': None
                'guarded_class': None
            }
            
 - 
            local_nn_module 'self.features[4]' NN_MODULE
            {
                'guard_types': None,
                'code': None,
                'obj_weakref': None
                'guarded_class': None
            }
            
 - 
            local_nn_module 'self.features[5]' NN_MODULE
            {
                'guard_types': None,
                'code': None,
                'obj_weakref': None
                'guarded_class': None
            }
            
 - 
            local_nn_module 'self.features[6]' NN_MODULE
            {
                'guard_types': None,
                'code': None,
                'obj_weakref': None
                'guarded_class': None
            }
            
 - 
            local_nn_module 'self.features[7]' NN_MODULE
            {
                'guard_types': None,
                'code': None,
                'obj_weakref': None
                'guarded_class': None
            }
            
 - 
            local_nn_module 'self.features[8]' NN_MODULE
            {
                'guard_types': None,
                'code': None,
                'obj_weakref': None
                'guarded_class': None
            }
            
 - 
            local_nn_module 'self.features[9]' NN_MODULE
            {
                'guard_types': None,
                'code': None,
                'obj_weakref': None
                'guarded_class': None
            }
            
 - 
            local_nn_module 'self.features[10]' NN_MODULE
            {
                'guard_types': None,
                'code': None,
                'obj_weakref': None
                'guarded_class': None
            }
            
 - 
            local_nn_module 'self.features[11]' NN_MODULE
            {
                'guard_types': None,
                'code': None,
                'obj_weakref': None
                'guarded_class': None
            }
            
 - 
            local_nn_module 'self.features[12]' NN_MODULE
            {
                'guard_types': None,
                'code': None,
                'obj_weakref': None
                'guarded_class': None
            }
            
 - 
            local_nn_module 'self.classifier[0]' NN_MODULE
            {
                'guard_types': None,
                'code': None,
                'obj_weakref': None
                'guarded_class': None
            }
            
 - 
            local_nn_module 'self.classifier[1]' NN_MODULE
            {
                'guard_types': None,
                'code': None,
                'obj_weakref': None
                'guarded_class': None
            }
            
 - 
            local_nn_module 'self.classifier[2]' NN_MODULE
            {
                'guard_types': None,
                'code': None,
                'obj_weakref': None
                'guarded_class': None
            }
            
 - 
            local_nn_module 'self.classifier[3]' NN_MODULE
            {
                'guard_types': None,
                'code': None,
                'obj_weakref': None
                'guarded_class': None
            }
            
 - 
            local_nn_module 'self.classifier[4]' NN_MODULE
            {
                'guard_types': None,
                'code': None,
                'obj_weakref': None
                'guarded_class': None
            }
            
 - 
            local_nn_module 'self.classifier[5]' NN_MODULE
            {
                'guard_types': None,
                'code': None,
                'obj_weakref': None
                'guarded_class': None
            }
            
 - 
            local_nn_module 'self.classifier[6]' NN_MODULE
            {
                'guard_types': None,
                'code': None,
                'obj_weakref': None
                'guarded_class': None
            }
            
torchdynamo.eval_frame: [DEBUG] [2022-10-11 17:22:24,451] skipping _fn /fsx/users/guoqiang/work/torchdynamo/torchdynamo/eval_frame.py
torchdynamo.eval_frame: [DEBUG] [2022-10-11 17:22:24,451] skipping nothing /fsx/users/guoqiang/work/torchdynamo/torchdynamo/eval_frame.py
torchinductor.compile_fx: [INFO] [2022-10-11 17:22:25,037] Step 3: torchinductor compiling FORWARDS graph 0
torchinductor.lowering: [WARNING] [2022-10-11 17:22:25,109] using triton random, expect difference from eager
torchinductor.scheduler: [INFO] [2022-10-11 17:22:25,732] Scheduler.codegen():
torchinductor.scheduler: [INFO] [2022-10-11 17:22:25,733] ExternKernelSchedulerNode(name='buf0'): unmet_dependencies = set(), writes = {StarDep(name='buf0')}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:25,733] SchedulerNode(name='buf1'): unmet_dependencies = {MemoryDep(name='buf0', index=c0, size=(24780800,))}, writes = {MemoryDep(name='buf1', index=c0, size=(24780800,))}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:25,734] SchedulerNode(name='buf2'): unmet_dependencies = {MemoryDep(name='buf1', index=3025*c0 + 110*c1 + 2*c2, size=(8192, 27, 27)), MemoryDep(name='buf1', index=3025*c0 + 110*c1 + 2*c2 + 110, size=(8192, 27, 27)), MemoryDep(name='buf1', index=3025*c0 + 110*c1 + 2*c2 + 112, size=(8192, 27, 27)), MemoryDep(name='buf1', index=3025*c0 + 110*c1 + 2*c2 + 55, size=(8192, 27, 27)), MemoryDep(name='buf1', index=3025*c0 + 110*c1 + 2*c2 + 1, size=(8192, 27, 27)), MemoryDep(name='buf1', index=3025*c0 + 110*c1 + 2*c2 + 57, size=(8192, 27, 27)), MemoryDep(name='buf1', index=3025*c0 + 110*c1 + 2*c2 + 111, size=(8192, 27, 27)), MemoryDep(name='buf1', index=3025*c0 + 110*c1 + 2*c2 + 2, size=(8192, 27, 27)), MemoryDep(name='buf1', index=3025*c0 + 110*c1 + 2*c2 + 56, size=(8192, 27, 27))}, writes = {MemoryDep(name='buf2', index=c0, size=(5971968,))}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:25,742] ExternKernelSchedulerNode(name='buf3'): unmet_dependencies = {StarDep(name='buf2')}, writes = {StarDep(name='buf3')}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:25,742] SchedulerNode(name='buf4'): unmet_dependencies = {MemoryDep(name='buf3', index=c0, size=(17915904,))}, writes = {MemoryDep(name='buf4', index=c0, size=(17915904,))}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:25,742] SchedulerNode(name='buf5'): unmet_dependencies = {MemoryDep(name='buf4', index=729*c0 + 54*c1 + 2*c2 + 29, size=(24576, 13, 13)), MemoryDep(name='buf4', index=729*c0 + 54*c1 + 2*c2 + 27, size=(24576, 13, 13)), MemoryDep(name='buf4', index=729*c0 + 54*c1 + 2*c2 + 1, size=(24576, 13, 13)), MemoryDep(name='buf4', index=729*c0 + 54*c1 + 2*c2 + 2, size=(24576, 13, 13)), MemoryDep(name='buf4', index=729*c0 + 54*c1 + 2*c2 + 28, size=(24576, 13, 13)), MemoryDep(name='buf4', index=729*c0 + 54*c1 + 2*c2 + 55, size=(24576, 13, 13)), MemoryDep(name='buf4', index=729*c0 + 54*c1 + 2*c2, size=(24576, 13, 13)), MemoryDep(name='buf4', index=729*c0 + 54*c1 + 2*c2 + 56, size=(24576, 13, 13)), MemoryDep(name='buf4', index=729*c0 + 54*c1 + 2*c2 + 54, size=(24576, 13, 13))}, writes = {MemoryDep(name='buf5', index=c0, size=(4153344,))}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:25,749] ExternKernelSchedulerNode(name='buf6'): unmet_dependencies = {StarDep(name='buf5')}, writes = {StarDep(name='buf6')}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:25,749] SchedulerNode(name='buf7'): unmet_dependencies = {MemoryDep(name='buf6', index=c0, size=(8306688,))}, writes = {MemoryDep(name='buf7', index=c0, size=(8306688,))}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:25,749] ExternKernelSchedulerNode(name='buf8'): unmet_dependencies = {StarDep(name='buf7')}, writes = {StarDep(name='buf8')}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:25,750] SchedulerNode(name='buf9'): unmet_dependencies = {MemoryDep(name='buf8', index=c0, size=(5537792,))}, writes = {MemoryDep(name='buf9', index=c0, size=(5537792,))}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:25,752] ExternKernelSchedulerNode(name='buf10'): unmet_dependencies = {StarDep(name='buf9')}, writes = {StarDep(name='buf10')}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:25,752] SchedulerNode(name='buf11'): unmet_dependencies = {MemoryDep(name='buf10', index=c0, size=(5537792,))}, writes = {MemoryDep(name='buf11', index=c0, size=(5537792,))}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:25,752] FusedSchedulerNode(nodes=buf12_buf13): unmet_dependencies = {MemoryDep(name='buf11', index=169*c0 + 26*c1 + 2*c2 + 14, size=(32768, 6, 6)), MemoryDep(name='buf11', index=169*c0 + 26*c1 + 2*c2, size=(32768, 6, 6)), MemoryDep(name='buf11', index=169*c0 + 26*c1 + 2*c2 + 2, size=(32768, 6, 6)), MemoryDep(name='buf11', index=169*c0 + 26*c1 + 2*c2 + 13, size=(32768, 6, 6)), MemoryDep(name='buf11', index=169*c0 + 26*c1 + 2*c2 + 15, size=(32768, 6, 6)), MemoryDep(name='buf11', index=169*c0 + 26*c1 + 2*c2 + 27, size=(32768, 6, 6)), MemoryDep(name='buf11', index=169*c0 + 26*c1 + 2*c2 + 26, size=(32768, 6, 6)), MemoryDep(name='buf11', index=169*c0 + 26*c1 + 2*c2 + 28, size=(32768, 6, 6)), MemoryDep(name='buf11', index=169*c0 + 26*c1 + 2*c2 + 1, size=(32768, 6, 6))}, writes = {MemoryDep(name='buf12', index=c0, size=(1179648,)), MemoryDep(name='buf13', index=c0, size=(1179648,))}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:25,759] ExternKernelSchedulerNode(name='buf14'): unmet_dependencies = {StarDep(name='buf13')}, writes = {StarDep(name='buf14')}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:25,760] SchedulerNode(name='buf15'): unmet_dependencies = {MemoryDep(name='buf14', index=c0, size=(524288,))}, writes = {MemoryDep(name='buf15', index=c0, size=(524288,))}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:25,760] ExternKernelSchedulerNode(name='buf16'): unmet_dependencies = {StarDep(name='buf15')}, writes = {StarDep(name='buf16')}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:25,760] SchedulerNode(name='buf17'): unmet_dependencies = {MemoryDep(name='buf16', index=c0, size=(524288,))}, writes = {MemoryDep(name='buf17', index=c0, size=(524288,))}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:25,762] ExternKernelSchedulerNode(name='buf18'): unmet_dependencies = {StarDep(name='buf17')}, writes = {StarDep(name='buf18')}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:25,762] SchedulerNode(name='buf19'): unmet_dependencies = {MemoryDep(name='buf1', index=3025*c0 + 110*c1 + 2*c2, size=(8192, 27, 27)), MemoryDep(name='buf1', index=3025*c0 + 110*c1 + 2*c2 + 110, size=(8192, 27, 27)), MemoryDep(name='buf1', index=3025*c0 + 110*c1 + 2*c2 + 112, size=(8192, 27, 27)), MemoryDep(name='buf1', index=3025*c0 + 110*c1 + 2*c2 + 55, size=(8192, 27, 27)), MemoryDep(name='buf1', index=3025*c0 + 110*c1 + 2*c2 + 1, size=(8192, 27, 27)), MemoryDep(name='buf1', index=3025*c0 + 110*c1 + 2*c2 + 57, size=(8192, 27, 27)), MemoryDep(name='buf1', index=3025*c0 + 110*c1 + 2*c2 + 111, size=(8192, 27, 27)), MemoryDep(name='buf1', index=3025*c0 + 110*c1 + 2*c2 + 2, size=(8192, 27, 27)), MemoryDep(name='buf1', index=3025*c0 + 110*c1 + 2*c2 + 56, size=(8192, 27, 27))}, writes = {MemoryDep(name='buf19', index=c0, size=(5971968,))}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:25,769] SchedulerNode(name='buf20'): unmet_dependencies = {MemoryDep(name='buf4', index=729*c0 + 54*c1 + 2*c2 + 29, size=(24576, 13, 13)), MemoryDep(name='buf4', index=729*c0 + 54*c1 + 2*c2 + 27, size=(24576, 13, 13)), MemoryDep(name='buf4', index=729*c0 + 54*c1 + 2*c2 + 1, size=(24576, 13, 13)), MemoryDep(name='buf4', index=729*c0 + 54*c1 + 2*c2 + 2, size=(24576, 13, 13)), MemoryDep(name='buf4', index=729*c0 + 54*c1 + 2*c2 + 28, size=(24576, 13, 13)), MemoryDep(name='buf4', index=729*c0 + 54*c1 + 2*c2 + 55, size=(24576, 13, 13)), MemoryDep(name='buf4', index=729*c0 + 54*c1 + 2*c2, size=(24576, 13, 13)), MemoryDep(name='buf4', index=729*c0 + 54*c1 + 2*c2 + 56, size=(24576, 13, 13)), MemoryDep(name='buf4', index=729*c0 + 54*c1 + 2*c2 + 54, size=(24576, 13, 13))}, writes = {MemoryDep(name='buf20', index=c0, size=(4153344,))}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:25,776] SchedulerNode(name='buf21'): unmet_dependencies = {MemoryDep(name='buf11', index=169*c0 + 26*c1 + 2*c2 + 14, size=(32768, 6, 6)), MemoryDep(name='buf11', index=169*c0 + 26*c1 + 2*c2, size=(32768, 6, 6)), MemoryDep(name='buf11', index=169*c0 + 26*c1 + 2*c2 + 2, size=(32768, 6, 6)), MemoryDep(name='buf11', index=169*c0 + 26*c1 + 2*c2 + 13, size=(32768, 6, 6)), MemoryDep(name='buf11', index=169*c0 + 26*c1 + 2*c2 + 15, size=(32768, 6, 6)), MemoryDep(name='buf11', index=169*c0 + 26*c1 + 2*c2 + 27, size=(32768, 6, 6)), MemoryDep(name='buf11', index=169*c0 + 26*c1 + 2*c2 + 26, size=(32768, 6, 6)), MemoryDep(name='buf11', index=169*c0 + 26*c1 + 2*c2 + 28, size=(32768, 6, 6)), MemoryDep(name='buf11', index=169*c0 + 26*c1 + 2*c2 + 1, size=(32768, 6, 6))}, writes = {MemoryDep(name='buf21', index=c0, size=(1179648,))}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:25,783] SchedulerNode(name='buf22'): unmet_dependencies = set(), writes = {MemoryDep(name='buf22', index=c0, size=(1179648,))}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:25,783] SchedulerNode(name='buf23'): unmet_dependencies = set(), writes = {MemoryDep(name='buf23', index=c0, size=(524288,))}
torchinductor.codegen.triton: [Level 15] [2022-10-11 17:22:25,786] schedule: [SchedulerNode(name='buf1')]
torchinductor.codegen.triton: [Level 15] [2022-10-11 17:22:25,795] schedule: [SchedulerNode(name='buf2')]
torchinductor.codegen.triton: [Level 15] [2022-10-11 17:22:25,820] schedule: [SchedulerNode(name='buf4')]
torchinductor.codegen.triton: [Level 15] [2022-10-11 17:22:25,828] schedule: [SchedulerNode(name='buf5')]
torchinductor.codegen.triton: [Level 15] [2022-10-11 17:22:25,854] schedule: [SchedulerNode(name='buf7')]
torchinductor.codegen.triton: [Level 15] [2022-10-11 17:22:25,862] schedule: [SchedulerNode(name='buf9')]
torchinductor.codegen.triton: [Level 15] [2022-10-11 17:22:25,870] schedule: [SchedulerNode(name='buf11')]
torchinductor.codegen.triton: [Level 15] [2022-10-11 17:22:25,876] schedule: [SchedulerNode(name='buf12'), SchedulerNode(name='buf13')]
torchinductor.codegen.triton: [Level 15] [2022-10-11 17:22:25,898] schedule: [SchedulerNode(name='buf15')]
torchinductor.codegen.triton: [Level 15] [2022-10-11 17:22:25,904] schedule: [SchedulerNode(name='buf17')]
torchinductor.codegen.triton: [Level 15] [2022-10-11 17:22:25,909] schedule: [SchedulerNode(name='buf19')]
torchinductor.codegen.triton: [Level 15] [2022-10-11 17:22:25,924] schedule: [SchedulerNode(name='buf20')]
torchinductor.codegen.triton: [Level 15] [2022-10-11 17:22:25,938] schedule: [SchedulerNode(name='buf21')]
torchinductor.codegen.triton: [Level 15] [2022-10-11 17:22:25,952] schedule: [SchedulerNode(name='buf22')]
torchinductor.codegen.triton: [Level 15] [2022-10-11 17:22:25,956] schedule: [SchedulerNode(name='buf23')]
torchinductor.graph: [Level 15] [2022-10-11 17:22:26,049] Output code: /tmp/torchinductor_guoqiang/pf/cpftp67z4ey4aypic7qngc6or3knhhooyv7ysgkflqjadfvh4zn7.py
torchinductor.compile_fx: [INFO] [2022-10-11 17:22:26,050] Step 3: torchinductor done compiling FORWARDS graph 0
torchdynamo.eval_frame: [DEBUG] [2022-10-11 17:22:26,175] skipping __exit__ /fsx/users/guoqiang/work/torchdynamo/env/lib/python3.8/contextlib.py
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:26,181] TRACE starts_line benchmarks/torchbench.py:352
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:26,181] TRACE LOAD_GLOBAL reduce_to_scalar_loss []
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:26,182] TRACE LOAD_FAST pred [SkipFilesVariable()]
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:26,182] TRACE CALL_FUNCTION 1 [SkipFilesVariable(), TensorVariable()]
torchdynamo.symbolic_convert: [WARNING] [2022-10-11 17:22:26,184] Graph break: call_function in skip_files /fsx/users/guoqiang/work/torchdynamo/torchdynamo/testing.py from user code at   File "benchmarks/torchbench.py", line 352, in compute_loss
    return reduce_to_scalar_loss(pred)

torchdynamo.convert_frame: [Level 15] [2022-10-11 17:22:26,187] ORIGINAL BYTECODE compute_loss benchmarks/torchbench.py line 351 
352           0 LOAD_GLOBAL              0 (reduce_to_scalar_loss)
              2 LOAD_FAST                1 (pred)
              4 CALL_FUNCTION            1
              6 RETURN_VALUE

 
torchdynamo.convert_frame: [Level 15] [2022-10-11 17:22:26,188] MODIFIED BYTECODE compute_loss benchmarks/torchbench.py line 351 
351           0 LOAD_GLOBAL              0 (reduce_to_scalar_loss)
              2 LOAD_FAST                1 (pred)
              4 CALL_FUNCTION            1
              6 RETURN_VALUE

 
torchdynamo.convert_frame: [Level 15] [2022-10-11 17:22:26,190] GUARDS:
 - 
            local 'pred' TENSOR_MATCH
            {
                'guard_types': ['TENSOR_MATCH'],
                'code': None,
                'obj_weakref': <weakref at 0x7f122e6cb3b0; to 'Tensor' at 0x7f122e7b3f40>
                'guarded_class': <weakref at 0x7f1259ce11d0; to 'torch._C._TensorMeta' at 0x56070fb01420 (Tensor)>
            }
            
 - 
            global 'reduce_to_scalar_loss' FUNCTION_MATCH
            {
                'guard_types': None,
                'code': None,
                'obj_weakref': None
                'guarded_class': None
            }
            
torchdynamo.eval_frame: [DEBUG] [2022-10-11 17:22:26,190] skipping reduce_to_scalar_loss /fsx/users/guoqiang/work/torchdynamo/torchdynamo/testing.py
torchdynamo.convert_frame: [DEBUG] [2022-10-11 17:22:26,192] skipping because no torch.* __exit__             /fsx/users/guoqiang/work/torchdynamo/benchmarks/common.py 194
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:26,200] TRACE starts_line /fsx/users/guoqiang/work/torchdynamo/benchmarks/common.py:904
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:26,200] TRACE LOAD_FAST loss []
torchdynamo.symbolic_convert: [DEBUG] [2022-10-11 17:22:26,200] TRACE RETURN_VALUE None [TensorVariable()]
torchdynamo.convert_frame: [DEBUG] [2022-10-11 17:22:26,203] Skipping frame scale                     /fsx/users/guoqiang/work/torchdynamo/benchmarks/common.py 903
torchdynamo.eval_frame: [DEBUG] [2022-10-11 17:22:26,206] skipping backward /fsx/users/guoqiang/work/torchdynamo/env/lib/python3.8/site-packages/torch/_tensor.py
torchdynamo.eval_frame: [DEBUG] [2022-10-11 17:22:26,208] skipping backward /fsx/users/guoqiang/work/torchdynamo/env/lib/python3.8/site-packages/torch/autograd/__init__.py
torchdynamo.eval_frame: [DEBUG] [2022-10-11 17:22:26,211] skipping _tensor_or_tensors_to_tuple /fsx/users/guoqiang/work/torchdynamo/env/lib/python3.8/site-packages/torch/autograd/__init__.py
torchdynamo.eval_frame: [DEBUG] [2022-10-11 17:22:26,214] skipping _make_grads /fsx/users/guoqiang/work/torchdynamo/env/lib/python3.8/site-packages/torch/autograd/__init__.py
torchinductor.compile_fx: [INFO] [2022-10-11 17:22:26,219] Step 3: torchinductor compiling BACKWARDS graph 0
torchinductor.ir: [WARNING] [2022-10-11 17:22:26,248] Using FallbackKernel: aten._adaptive_avg_pool2d_backward
torchinductor.scheduler: [INFO] [2022-10-11 17:22:26,444] Scheduler.codegen():
torchinductor.scheduler: [INFO] [2022-10-11 17:22:26,444] ExternKernelSchedulerNode(name='buf0'): unmet_dependencies = set(), writes = {StarDep(name='buf0')}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:26,445] ExternKernelSchedulerNode(name='buf1'): unmet_dependencies = set(), writes = {StarDep(name='buf1')}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:26,445] SchedulerNode(name='buf2'): unmet_dependencies = set(), writes = {MemoryDep(name='buf2', index=c0, size=(1000,)), MemoryDep(name='buf2', index=c0, size=(1000, 128))}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:26,445] SchedulerNode(name='buf3'): unmet_dependencies = {MemoryDep(name='buf0', index=c0, size=(524288,))}, writes = {MemoryDep(name='buf3', index=c0, size=(524288,))}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:26,445] ExternKernelSchedulerNode(name='buf4'): unmet_dependencies = {StarDep(name='buf3')}, writes = {StarDep(name='buf4')}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:26,447] SchedulerNode(name='buf5'): unmet_dependencies = set(), writes = {MemoryDep(name='buf5', index=c0, size=(524288,))}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:26,447] ExternKernelSchedulerNode(name='buf6'): unmet_dependencies = {StarDep(name='buf3'), StarDep(name='buf5')}, writes = {StarDep(name='buf6')}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:26,447] SchedulerNode(name='buf7'): unmet_dependencies = {MemoryDep(name='buf3', index=c0 + 4096*c1, size=(4096, 128))}, writes = {MemoryDep(name='buf7', index=c0, size=(4096,)), MemoryDep(name='buf7', index=c0, size=(4096, 128))}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:26,450] SchedulerNode(name='buf8'): unmet_dependencies = {MemoryDep(name='buf4', index=c0, size=(524288,))}, writes = {MemoryDep(name='buf8', index=c0, size=(524288,))}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:26,450] ExternKernelSchedulerNode(name='buf9'): unmet_dependencies = {StarDep(name='buf8')}, writes = {StarDep(name='buf9')}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:26,452] ExternKernelSchedulerNode(name='buf10'): unmet_dependencies = {StarDep(name='buf8')}, writes = {StarDep(name='buf10')}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:26,452] SchedulerNode(name='buf11'): unmet_dependencies = {MemoryDep(name='buf8', index=c0 + 4096*c1, size=(4096, 128))}, writes = {MemoryDep(name='buf11', index=c0, size=(4096,)), MemoryDep(name='buf11', index=c0, size=(4096, 128))}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:26,453] SchedulerNode(name='buf12'): unmet_dependencies = {MemoryDep(name='buf9', index=c0, size=(1179648,))}, writes = {MemoryDep(name='buf12', index=c0, size=(1179648,))}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:26,455] ExternKernelSchedulerNode(name='buf13'): unmet_dependencies = {StarDep(name='buf12')}, writes = {StarDep(name='buf13')}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:26,455] SchedulerNode(name='buf14'): unmet_dependencies = {MemoryDep(name='buf13', index=36*c0 + 6*minimum(maximum(index_expr(IndexingDiv(-1 + d1, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(d1, 2), torch.int32), constant(6, torch.int32)) - constant(1, torch.int32)) + minimum(maximum(index_expr(IndexingDiv(-1 + d2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(d2, 2), torch.int32), constant(6, torch.int32)) - constant(1, torch.int32)), size=(32768, 169)), MemoryDep(name='buf13', index=36*c0 + 6*minimum(maximum(index_expr(IndexingDiv(-1 + d1, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(d1, 2), torch.int32), constant(6, torch.int32)) - constant(1, torch.int32)) + minimum(maximum(index_expr(IndexingDiv(-1 + d2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(d2, 2), torch.int32), constant(6, torch.int32)) - constant(1, torch.int32)), size=(32768, 169)), MemoryDep(name='buf13', index=36*c0 + 6*minimum(maximum(index_expr(IndexingDiv(-1 + d1, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(d1, 2), torch.int32), constant(6, torch.int32)) - constant(1, torch.int32)) + minimum(maximum(index_expr(IndexingDiv(-1 + d2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(d2, 2), torch.int32), constant(6, torch.int32)) - constant(1, torch.int32)), size=(32768, 169)), MemoryDep(name='buf13', index=36*c0 + 6*minimum(maximum(index_expr(IndexingDiv(-1 + d1, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(d1, 2), torch.int32), constant(6, torch.int32)) - constant(1, torch.int32)) + minimum(maximum(index_expr(IndexingDiv(-1 + d2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(d2, 2), torch.int32), constant(6, torch.int32)) - constant(1, torch.int32)), size=(32768, 169))}, writes = {MemoryDep(name='buf14', index=c0, size=(5537792,))}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:26,460] ExternKernelSchedulerNode(name='buf15'): unmet_dependencies = {StarDep(name='buf14')}, writes = {StarDep(name='buf15')}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:26,460] ExternKernelSchedulerNode(name='buf16'): unmet_dependencies = {StarDep(name='buf15')}, writes = {StarDep(name='buf16')}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:26,460] ExternKernelSchedulerNode(name='buf17'): unmet_dependencies = {StarDep(name='buf15')}, writes = {StarDep(name='buf17')}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:26,460] ExternKernelSchedulerNode(name='buf18'): unmet_dependencies = {StarDep(name='buf15')}, writes = {StarDep(name='buf18')}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:26,461] SchedulerNode(name='buf19'): unmet_dependencies = {MemoryDep(name='buf16', index=c0, size=(5537792,))}, writes = {MemoryDep(name='buf19', index=c0, size=(5537792,))}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:26,463] ExternKernelSchedulerNode(name='buf20'): unmet_dependencies = {StarDep(name='buf19')}, writes = {StarDep(name='buf20')}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:26,470] ExternKernelSchedulerNode(name='buf21'): unmet_dependencies = {StarDep(name='buf20')}, writes = {StarDep(name='buf21')}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:26,471] ExternKernelSchedulerNode(name='buf22'): unmet_dependencies = {StarDep(name='buf20')}, writes = {StarDep(name='buf22')}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:26,471] ExternKernelSchedulerNode(name='buf23'): unmet_dependencies = {StarDep(name='buf20')}, writes = {StarDep(name='buf23')}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:26,471] SchedulerNode(name='buf24'): unmet_dependencies = {MemoryDep(name='buf21', index=c0, size=(8306688,))}, writes = {MemoryDep(name='buf24', index=c0, size=(8306688,))}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:26,474] ExternKernelSchedulerNode(name='buf25'): unmet_dependencies = {StarDep(name='buf24')}, writes = {StarDep(name='buf25')}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:26,477] ExternKernelSchedulerNode(name='buf26'): unmet_dependencies = {StarDep(name='buf25')}, writes = {StarDep(name='buf26')}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:26,477] ExternKernelSchedulerNode(name='buf27'): unmet_dependencies = {StarDep(name='buf25')}, writes = {StarDep(name='buf27')}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:26,479] ExternKernelSchedulerNode(name='buf28'): unmet_dependencies = {StarDep(name='buf25')}, writes = {StarDep(name='buf28')}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:26,479] SchedulerNode(name='buf29'): unmet_dependencies = {MemoryDep(name='buf26', index=169*c0 + 13*minimum(maximum(index_expr(IndexingDiv(-1 + d1, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(d1, 2), torch.int32), constant(13, torch.int32)) - constant(1, torch.int32)) + minimum(maximum(index_expr(IndexingDiv(-1 + d2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(d2, 2), torch.int32), constant(13, torch.int32)) - constant(1, torch.int32)), size=(24576, 729)), MemoryDep(name='buf26', index=169*c0 + 13*minimum(maximum(index_expr(IndexingDiv(-1 + d1, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(d1, 2), torch.int32), constant(13, torch.int32)) - constant(1, torch.int32)) + minimum(maximum(index_expr(IndexingDiv(-1 + d2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(d2, 2), torch.int32), constant(13, torch.int32)) - constant(1, torch.int32)), size=(24576, 729)), MemoryDep(name='buf26', index=169*c0 + 13*minimum(maximum(index_expr(IndexingDiv(-1 + d1, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(d1, 2), torch.int32), constant(13, torch.int32)) - constant(1, torch.int32)) + minimum(maximum(index_expr(IndexingDiv(-1 + d2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(d2, 2), torch.int32), constant(13, torch.int32)) - constant(1, torch.int32)), size=(24576, 729)), MemoryDep(name='buf26', index=169*c0 + 13*minimum(maximum(index_expr(IndexingDiv(-1 + d1, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(d1, 2), torch.int32), constant(13, torch.int32)) - constant(1, torch.int32)) + minimum(maximum(index_expr(IndexingDiv(-1 + d2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(d2, 2), torch.int32), constant(13, torch.int32)) - constant(1, torch.int32)), size=(24576, 729))}, writes = {MemoryDep(name='buf29', index=c0, size=(17915904,))}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:26,484] ExternKernelSchedulerNode(name='buf30'): unmet_dependencies = {StarDep(name='buf29')}, writes = {StarDep(name='buf30')}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:26,484] ExternKernelSchedulerNode(name='buf31'): unmet_dependencies = {StarDep(name='buf30')}, writes = {StarDep(name='buf31')}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:26,484] ExternKernelSchedulerNode(name='buf32'): unmet_dependencies = {StarDep(name='buf30')}, writes = {StarDep(name='buf32')}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:26,484] ExternKernelSchedulerNode(name='buf33'): unmet_dependencies = {StarDep(name='buf30')}, writes = {StarDep(name='buf33')}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:26,484] SchedulerNode(name='buf34'): unmet_dependencies = {MemoryDep(name='buf31', index=729*c0 + 27*minimum(maximum(index_expr(IndexingDiv(-1 + d1, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(d1, 2), torch.int32), constant(27, torch.int32)) - constant(1, torch.int32)) + minimum(maximum(index_expr(IndexingDiv(-1 + d2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(d2, 2), torch.int32), constant(27, torch.int32)) - constant(1, torch.int32)), size=(8192, 3025)), MemoryDep(name='buf31', index=729*c0 + 27*minimum(maximum(index_expr(IndexingDiv(-1 + d1, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(d1, 2), torch.int32), constant(27, torch.int32)) - constant(1, torch.int32)) + minimum(maximum(index_expr(IndexingDiv(-1 + d2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(d2, 2), torch.int32), constant(27, torch.int32)) - constant(1, torch.int32)), size=(8192, 3025)), MemoryDep(name='buf31', index=729*c0 + 27*minimum(maximum(index_expr(IndexingDiv(-1 + d1, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(d1, 2), torch.int32), constant(27, torch.int32)) - constant(1, torch.int32)) + minimum(maximum(index_expr(IndexingDiv(-1 + d2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(d2, 2), torch.int32), constant(27, torch.int32)) - constant(1, torch.int32)), size=(8192, 3025)), MemoryDep(name='buf31', index=729*c0 + 27*minimum(maximum(index_expr(IndexingDiv(-1 + d1, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(d1, 2), torch.int32), constant(27, torch.int32)) - constant(1, torch.int32)) + minimum(maximum(index_expr(IndexingDiv(-1 + d2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(d2, 2), torch.int32), constant(27, torch.int32)) - constant(1, torch.int32)), size=(8192, 3025))}, writes = {MemoryDep(name='buf34', index=c0, size=(24780800,))}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:26,488] ExternKernelSchedulerNode(name='buf35'): unmet_dependencies = {StarDep(name='buf34')}, writes = {StarDep(name='buf35')}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:26,488] ExternKernelSchedulerNode(name='buf36'): unmet_dependencies = {StarDep(name='buf35')}, writes = {StarDep(name='buf36')}
torchinductor.scheduler: [INFO] [2022-10-11 17:22:26,488] ExternKernelSchedulerNode(name='buf37'): unmet_dependencies = {StarDep(name='buf35')}, writes = {StarDep(name='buf37')}
torchinductor.codegen.triton: [Level 15] [2022-10-11 17:22:26,489] schedule: [SchedulerNode(name='buf2')]
torchinductor.codegen.triton: [Level 15] [2022-10-11 17:22:26,492] schedule: [SchedulerNode(name='buf3')]
torchinductor.codegen.triton: [Level 15] [2022-10-11 17:22:26,497] schedule: [SchedulerNode(name='buf5')]
torchinductor.codegen.triton: [Level 15] [2022-10-11 17:22:26,502] schedule: [SchedulerNode(name='buf7')]
torchinductor.codegen.triton: [Level 15] [2022-10-11 17:22:26,505] schedule: [SchedulerNode(name='buf8')]
torchinductor.codegen.triton: [Level 15] [2022-10-11 17:22:26,510] schedule: [SchedulerNode(name='buf11')]
torchinductor.codegen.triton: [Level 15] [2022-10-11 17:22:26,515] schedule: [SchedulerNode(name='buf12')]
torchinductor.codegen.triton: [Level 15] [2022-10-11 17:22:26,519] schedule: [SchedulerNode(name='buf14')]
torchinductor.codegen.triton: [Level 15] [2022-10-11 17:22:26,551] schedule: [SchedulerNode(name='buf19')]
torchinductor.codegen.triton: [Level 15] [2022-10-11 17:22:26,557] schedule: [SchedulerNode(name='buf24')]
torchinductor.codegen.triton: [Level 15] [2022-10-11 17:22:26,563] schedule: [SchedulerNode(name='buf29')]
torchinductor.codegen.triton: [Level 15] [2022-10-11 17:22:26,590] schedule: [SchedulerNode(name='buf34')]
torchinductor.graph: [Level 15] [2022-10-11 17:22:26,667] Output code: /tmp/torchinductor_guoqiang/nh/cnhs5h2ddd43qyr3tsohtak5z2gfzgh6qfxpvktk5aruv3ootqan.py
torchinductor.compile_fx: [INFO] [2022-10-11 17:22:26,788] Step 3: torchinductor done compiling BACKWARDS graph 0
torchdynamo.eval_frame: [DEBUG] [2022-10-11 17:22:26,795] skipping collect_results /fsx/users/guoqiang/work/torchdynamo/torchdynamo/testing.py
torchdynamo.eval_frame: [DEBUG] [2022-10-11 17:22:26,797] skipping __call__ /fsx/users/guoqiang/work/torchdynamo/env/lib/python3.8/weakref.py
torchdynamo.eval_frame: [DEBUG] [2022-10-11 17:22:26,797] skipping del_ten /fsx/users/guoqiang/work/torchdynamo/env/lib/python3.8/site-packages/torch/_subclasses/fake_tensor.py
torchdynamo.eval_frame: [DEBUG] [2022-10-11 17:22:26,797] skipping pop /fsx/users/guoqiang/work/torchdynamo/env/lib/python3.8/weakref.py
torchdynamo.eval_frame: [DEBUG] [2022-10-11 17:22:26,797] skipping __hash__ /fsx/users/guoqiang/work/torchdynamo/env/lib/python3.8/site-packages/torch/_subclasses/meta_utils.py
torchdynamo.eval_frame: [DEBUG] [2022-10-11 17:22:26,797] skipping del_ten /fsx/users/guoqiang/work/torchdynamo/env/lib/python3.8/site-packages/torch/_subclasses/meta_utils.py
torchdynamo.eval_frame: [DEBUG] [2022-10-11 17:22:26,797] skipping expired /fsx/users/guoqiang/work/torchdynamo/env/lib/python3.8/site-packages/torch/multiprocessing/reductions.py
torchdynamo.eval_frame: [DEBUG] [2022-10-11 17:22:26,797] skipping _expired /fsx/users/guoqiang/work/torchdynamo/env/lib/python3.8/site-packages/torch/storage.py
torchdynamo.eval_frame: [DEBUG] [2022-10-11 17:22:26,797] skipping __del__ /fsx/users/guoqiang/work/torchdynamo/env/lib/python3.8/site-packages/torch/multiprocessing/reductions.py
torchdynamo.eval_frame: [DEBUG] [2022-10-11 17:22:26,797] skipping _free_weak_ref /fsx/users/guoqiang/work/torchdynamo/env/lib/python3.8/site-packages/torch/storage.py
torchdynamo.eval_frame: [INFO] [2022-10-11 17:22:26,798] Step 1: torchdynamo done tracing
torchdynamo.eval_frame: [INFO] [2022-10-11 17:22:26,798] Step 1: torchdynamo begin tracing
torchdynamo.eval_frame: [INFO] [2022-10-11 17:22:26,813] Step 1: torchdynamo done tracing
torchdynamo.eval_frame: [INFO] [2022-10-11 17:22:26,814] Step 1: torchdynamo begin tracing
torchdynamo.eval_frame: [INFO] [2022-10-11 17:22:26,829] Step 1: torchdynamo done tracing
torchdynamo.eval_frame: [INFO] [2022-10-11 17:22:26,829] Step 1: torchdynamo begin tracing
torchdynamo.eval_frame: [INFO] [2022-10-11 17:22:26,842] Step 1: torchdynamo done tracing
torchdynamo.eval_frame: [INFO] [2022-10-11 17:22:26,842] Step 1: torchdynamo begin tracing
torchdynamo.eval_frame: [INFO] [2022-10-11 17:22:26,855] Step 1: torchdynamo done tracing
opcode         name                       target                                args                                                                                                                                                                                                                                                     kwargs
-------------  -------------------------  ------------------------------------  -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  --------------------------------------------------------------------------------------------------------------
placeholder    primals_1                  primals_1                             ()                                                                                                                                                                                                                                                       {}
placeholder    primals_2                  primals_2                             ()                                                                                                                                                                                                                                                       {}
placeholder    primals_3                  primals_3                             ()                                                                                                                                                                                                                                                       {}
placeholder    primals_4                  primals_4                             ()                                                                                                                                                                                                                                                       {}
placeholder    primals_5                  primals_5                             ()                                                                                                                                                                                                                                                       {}
placeholder    primals_6                  primals_6                             ()                                                                                                                                                                                                                                                       {}
placeholder    primals_7                  primals_7                             ()                                                                                                                                                                                                                                                       {}
placeholder    primals_8                  primals_8                             ()                                                                                                                                                                                                                                                       {}
placeholder    primals_9                  primals_9                             ()                                                                                                                                                                                                                                                       {}
placeholder    primals_10                 primals_10                            ()                                                                                                                                                                                                                                                       {}
placeholder    primals_11                 primals_11                            ()                                                                                                                                                                                                                                                       {}
placeholder    primals_12                 primals_12                            ()                                                                                                                                                                                                                                                       {}
placeholder    primals_13                 primals_13                            ()                                                                                                                                                                                                                                                       {}
placeholder    primals_14                 primals_14                            ()                                                                                                                                                                                                                                                       {}
placeholder    primals_15                 primals_15                            ()                                                                                                                                                                                                                                                       {}
placeholder    primals_16                 primals_16                            ()                                                                                                                                                                                                                                                       {}
placeholder    primals_17                 primals_17                            ()                                                                                                                                                                                                                                                       {}
call_function  convolution                aten.convolution.default              (primals_17, primals_1, primals_2, [4, 4], [2, 2], [1, 1], False, [0, 0], 1)                                                                                                                                                                             {}
call_function  relu                       aten.relu.default                     (convolution,)                                                                                                                                                                                                                                           {}
call_function  max_pool2d_with_indices    aten.max_pool2d_with_indices.default  (relu, [3, 3], [2, 2])                                                                                                                                                                                                                                   {}
call_function  getitem                    <built-in function getitem>           (max_pool2d_with_indices, 0)                                                                                                                                                                                                                             {}
call_function  getitem_1                  <built-in function getitem>           (max_pool2d_with_indices, 1)                                                                                                                                                                                                                             {}
call_function  convolution_1              aten.convolution.default              (getitem, primals_3, primals_4, [1, 1], [2, 2], [1, 1], False, [0, 0], 1)                                                                                                                                                                                {}
call_function  relu_1                     aten.relu.default                     (convolution_1,)                                                                                                                                                                                                                                         {}
call_function  max_pool2d_with_indices_1  aten.max_pool2d_with_indices.default  (relu_1, [3, 3], [2, 2])                                                                                                                                                                                                                                 {}
call_function  getitem_2                  <built-in function getitem>           (max_pool2d_with_indices_1, 0)                                                                                                                                                                                                                           {}
call_function  getitem_3                  <built-in function getitem>           (max_pool2d_with_indices_1, 1)                                                                                                                                                                                                                           {}
call_function  convolution_2              aten.convolution.default              (getitem_2, primals_5, primals_6, [1, 1], [1, 1], [1, 1], False, [0, 0], 1)                                                                                                                                                                              {}
call_function  relu_2                     aten.relu.default                     (convolution_2,)                                                                                                                                                                                                                                         {}
call_function  convolution_3              aten.convolution.default              (relu_2, primals_7, primals_8, [1, 1], [1, 1], [1, 1], False, [0, 0], 1)                                                                                                                                                                                 {}
call_function  relu_3                     aten.relu.default                     (convolution_3,)                                                                                                                                                                                                                                         {}
call_function  convolution_4              aten.convolution.default              (relu_3, primals_9, primals_10, [1, 1], [1, 1], [1, 1], False, [0, 0], 1)                                                                                                                                                                                {}
call_function  relu_4                     aten.relu.default                     (convolution_4,)                                                                                                                                                                                                                                         {}
call_function  max_pool2d_with_indices_2  aten.max_pool2d_with_indices.default  (relu_4, [3, 3], [2, 2])                                                                                                                                                                                                                                 {}
call_function  getitem_4                  <built-in function getitem>           (max_pool2d_with_indices_2, 0)                                                                                                                                                                                                                           {}
call_function  getitem_5                  <built-in function getitem>           (max_pool2d_with_indices_2, 1)                                                                                                                                                                                                                           {}
call_function  _adaptive_avg_pool2d       aten._adaptive_avg_pool2d.default     (getitem_4, [6, 6])                                                                                                                                                                                                                                      {}
call_function  view                       aten.view.default                     (_adaptive_avg_pool2d, [128, 9216])                                                                                                                                                                                                                      {}
call_function  rand_like                  aten.rand_like.default                (view,)                                                                                                                                                                                                                                                  {'dtype': torch.float32, 'layout': torch.strided, 'device': device(type='cuda', index=0), 'pin_memory': False}
call_function  alias_15                   aten.alias.default                    (rand_like,)                                                                                                                                                                                                                                             {}
call_function  gt                         aten.gt.Scalar                        (alias_15, 0.5)                                                                                                                                                                                                                                          {}
call_function  mul                        aten.mul.Tensor                       (gt, view)                                                                                                                                                                                                                                               {}
call_function  mul_1                      aten.mul.Tensor                       (mul, 2.0)                                                                                                                                                                                                                                               {}
call_function  permute                    aten.permute.default                  (primals_11, [1, 0])                                                                                                                                                                                                                                     {}
call_function  addmm                      aten.addmm.default                    (primals_12, mul_1, permute)                                                                                                                                                                                                                             {}
call_function  relu_5                     aten.relu.default                     (addmm,)                                                                                                                                                                                                                                                 {}
call_function  rand_like_1                aten.rand_like.default                (relu_5,)                                                                                                                                                                                                                                                {'dtype': torch.float32, 'layout': torch.strided, 'device': device(type='cuda', index=0), 'pin_memory': False}
call_function  alias_19                   aten.alias.default                    (rand_like_1,)                                                                                                                                                                                                                                           {}
call_function  gt_1                       aten.gt.Scalar                        (alias_19, 0.5)                                                                                                                                                                                                                                          {}
call_function  mul_2                      aten.mul.Tensor                       (gt_1, relu_5)                                                                                                                                                                                                                                           {}
call_function  mul_3                      aten.mul.Tensor                       (mul_2, 2.0)                                                                                                                                                                                                                                             {}
call_function  permute_1                  aten.permute.default                  (primals_13, [1, 0])                                                                                                                                                                                                                                     {}
call_function  addmm_1                    aten.addmm.default                    (primals_14, mul_3, permute_1)                                                                                                                                                                                                                           {}
call_function  relu_6                     aten.relu.default                     (addmm_1,)                                                                                                                                                                                                                                               {}
call_function  permute_2                  aten.permute.default                  (primals_15, [1, 0])                                                                                                                                                                                                                                     {}
call_function  addmm_2                    aten.addmm.default                    (primals_16, relu_6, permute_2)                                                                                                                                                                                                                          {}
call_function  permute_3                  aten.permute.default                  (permute_2, [1, 0])                                                                                                                                                                                                                                      {}
call_function  permute_7                  aten.permute.default                  (permute_1, [1, 0])                                                                                                                                                                                                                                      {}
call_function  permute_11                 aten.permute.default                  (permute, [1, 0])                                                                                                                                                                                                                                        {}
output         output                     output                                ([addmm_2, primals_1, primals_3, primals_5, primals_7, primals_9, primals_17, relu, getitem, getitem_1, relu_1, getitem_2, getitem_3, relu_2, relu_3, relu_4, getitem_4, getitem_5, gt, mul_1, addmm, gt_1, relu_6, permute_3, permute_7, permute_11],)  {}
==========IR inputs===========
{'primals_1': TensorBox(StorageBox(
  InputBuffer(name='primals_1', layout=FixedLayout('cuda', torch.float32, size=[64, 3, 11, 11], stride=[363, 121, 11, 1]))
)), 'primals_2': TensorBox(StorageBox(
  InputBuffer(name='primals_2', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
)), 'primals_3': TensorBox(StorageBox(
  InputBuffer(name='primals_3', layout=FixedLayout('cuda', torch.float32, size=[192, 64, 5, 5], stride=[1600, 25, 5, 1]))
)), 'primals_4': TensorBox(StorageBox(
  InputBuffer(name='primals_4', layout=FixedLayout('cuda', torch.float32, size=[192], stride=[1]))
)), 'primals_5': TensorBox(StorageBox(
  InputBuffer(name='primals_5', layout=FixedLayout('cuda', torch.float32, size=[384, 192, 3, 3], stride=[1728, 9, 3, 1]))
)), 'primals_6': TensorBox(StorageBox(
  InputBuffer(name='primals_6', layout=FixedLayout('cuda', torch.float32, size=[384], stride=[1]))
)), 'primals_7': TensorBox(StorageBox(
  InputBuffer(name='primals_7', layout=FixedLayout('cuda', torch.float32, size=[256, 384, 3, 3], stride=[3456, 9, 3, 1]))
)), 'primals_8': TensorBox(StorageBox(
  InputBuffer(name='primals_8', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
)), 'primals_9': TensorBox(StorageBox(
  InputBuffer(name='primals_9', layout=FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1]))
)), 'primals_10': TensorBox(StorageBox(
  InputBuffer(name='primals_10', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
)), 'primals_11': TensorBox(StorageBox(
  InputBuffer(name='primals_11', layout=FixedLayout('cuda', torch.float32, size=[4096, 9216], stride=[9216, 1]))
)), 'primals_12': TensorBox(StorageBox(
  InputBuffer(name='primals_12', layout=FixedLayout('cuda', torch.float32, size=[4096], stride=[1]))
)), 'primals_13': TensorBox(StorageBox(
  InputBuffer(name='primals_13', layout=FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1]))
)), 'primals_14': TensorBox(StorageBox(
  InputBuffer(name='primals_14', layout=FixedLayout('cuda', torch.float32, size=[4096], stride=[1]))
)), 'primals_15': TensorBox(StorageBox(
  InputBuffer(name='primals_15', layout=FixedLayout('cuda', torch.float32, size=[1000, 4096], stride=[4096, 1]))
)), 'primals_16': TensorBox(StorageBox(
  InputBuffer(name='primals_16', layout=FixedLayout('cuda', torch.float32, size=[1000], stride=[1]))
)), 'primals_17': TensorBox(StorageBox(
  InputBuffer(name='primals_17', layout=FixedLayout('cuda', torch.float32, size=[128, 3, 224, 224], stride=[150528, 50176, 224, 1]))
))}
==========IR buffers==========
[Convolution(name='buf0', layout=FixedLayout('cuda', torch.float32, size=[128, 64, 55, 55], stride=[193600, 3025, 55, 1]), inputs=[InputBuffer(name='primals_17', layout=FixedLayout('cuda', torch.float32, size=[128, 3, 224, 224], stride=[150528, 50176, 224, 1])), InputBuffer(name='primals_1', layout=FixedLayout('cuda', torch.float32, size=[64, 3, 11, 11], stride=[363, 121, 11, 1]))], constant_args=(None, (4, 4), (2, 2), (1, 1), False, (0, 0), 1), kwargs={}, output_view=None), ComputedBuffer(name='buf1', layout=FixedLayout('cuda', torch.float32, size=[128, 64, 55, 55], stride=[193600, 3025, 55, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  relu(load(buf0, i3 + 55 * i2 + 3025 * i1 + 193600 * i0) + load(primals_2, i1)),
  ranges=[128, 64, 55, 55],
  origins={relu}
)), ComputedBuffer(name='buf2', layout=FixedLayout('cuda', torch.float32, size=[128, 64, 27, 27], stride=[46656, 729, 27, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  maximum(load(buf1, 112 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 111 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 110 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 57 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 56 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 55 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 2 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 1 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), load(buf1, 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0))))))))),
  ranges=[128, 64, 27, 27],
  origins={max_pool2d_with_indices}
)), Convolution(name='buf3', layout=FixedLayout('cuda', torch.float32, size=[128, 192, 27, 27], stride=[139968, 729, 27, 1]), inputs=[ComputedBuffer(name='buf2', layout=FixedLayout('cuda', torch.float32, size=[128, 64, 27, 27], stride=[46656, 729, 27, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  maximum(load(buf1, 112 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 111 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 110 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 57 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 56 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 55 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 2 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 1 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), load(buf1, 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0))))))))),
  ranges=[128, 64, 27, 27],
  origins={max_pool2d_with_indices}
)), InputBuffer(name='primals_3', layout=FixedLayout('cuda', torch.float32, size=[192, 64, 5, 5], stride=[1600, 25, 5, 1]))], constant_args=(None, (1, 1), (2, 2), (1, 1), False, (0, 0), 1), kwargs={}, output_view=None), ComputedBuffer(name='buf4', layout=FixedLayout('cuda', torch.float32, size=[128, 192, 27, 27], stride=[139968, 729, 27, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  relu(load(buf3, i3 + 27 * i2 + 729 * i1 + 139968 * i0) + load(primals_4, i1)),
  ranges=[128, 192, 27, 27],
  origins={relu_1}
)), ComputedBuffer(name='buf5', layout=FixedLayout('cuda', torch.float32, size=[128, 192, 13, 13], stride=[32448, 169, 13, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  maximum(load(buf4, 56 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 55 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 54 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 29 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 28 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 27 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 2 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 1 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), load(buf4, 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0))))))))),
  ranges=[128, 192, 13, 13],
  origins={max_pool2d_with_indices_1}
)), Convolution(name='buf6', layout=FixedLayout('cuda', torch.float32, size=[128, 384, 13, 13], stride=[64896, 169, 13, 1]), inputs=[ComputedBuffer(name='buf5', layout=FixedLayout('cuda', torch.float32, size=[128, 192, 13, 13], stride=[32448, 169, 13, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  maximum(load(buf4, 56 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 55 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 54 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 29 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 28 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 27 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 2 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 1 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), load(buf4, 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0))))))))),
  ranges=[128, 192, 13, 13],
  origins={max_pool2d_with_indices_1}
)), InputBuffer(name='primals_5', layout=FixedLayout('cuda', torch.float32, size=[384, 192, 3, 3], stride=[1728, 9, 3, 1]))], constant_args=(None, (1, 1), (1, 1), (1, 1), False, (0, 0), 1), kwargs={}, output_view=None), ComputedBuffer(name='buf7', layout=FixedLayout('cuda', torch.float32, size=[128, 384, 13, 13], stride=[64896, 169, 13, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  relu(load(buf6, i3 + 13 * i2 + 169 * i1 + 64896 * i0) + load(primals_6, i1)),
  ranges=[128, 384, 13, 13],
  origins={relu_2}
)), Convolution(name='buf8', layout=FixedLayout('cuda', torch.float32, size=[128, 256, 13, 13], stride=[43264, 169, 13, 1]), inputs=[ComputedBuffer(name='buf7', layout=FixedLayout('cuda', torch.float32, size=[128, 384, 13, 13], stride=[64896, 169, 13, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  relu(load(buf6, i3 + 13 * i2 + 169 * i1 + 64896 * i0) + load(primals_6, i1)),
  ranges=[128, 384, 13, 13],
  origins={relu_2}
)), InputBuffer(name='primals_7', layout=FixedLayout('cuda', torch.float32, size=[256, 384, 3, 3], stride=[3456, 9, 3, 1]))], constant_args=(None, (1, 1), (1, 1), (1, 1), False, (0, 0), 1), kwargs={}, output_view=None), ComputedBuffer(name='buf9', layout=FixedLayout('cuda', torch.float32, size=[128, 256, 13, 13], stride=[43264, 169, 13, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  relu(load(buf8, i3 + 13 * i2 + 169 * i1 + 43264 * i0) + load(primals_8, i1)),
  ranges=[128, 256, 13, 13],
  origins={relu_3}
)), Convolution(name='buf10', layout=FixedLayout('cuda', torch.float32, size=[128, 256, 13, 13], stride=[43264, 169, 13, 1]), inputs=[ComputedBuffer(name='buf9', layout=FixedLayout('cuda', torch.float32, size=[128, 256, 13, 13], stride=[43264, 169, 13, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  relu(load(buf8, i3 + 13 * i2 + 169 * i1 + 43264 * i0) + load(primals_8, i1)),
  ranges=[128, 256, 13, 13],
  origins={relu_3}
)), InputBuffer(name='primals_9', layout=FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1]))], constant_args=(None, (1, 1), (1, 1), (1, 1), False, (0, 0), 1), kwargs={}, output_view=None), ComputedBuffer(name='buf11', layout=FixedLayout('cuda', torch.float32, size=[128, 256, 13, 13], stride=[43264, 169, 13, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  relu(load(buf10, i3 + 13 * i2 + 169 * i1 + 43264 * i0) + load(primals_10, i1)),
  ranges=[128, 256, 13, 13],
  origins={relu_4}
)), ComputedBuffer(name='buf12', layout=FixedLayout('cuda', torch.float32, size=[128, 256, 6, 6], stride=[9216, 36, 6, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  maximum(load(buf11, 28 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 27 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 26 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 15 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 14 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 13 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 2 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 1 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), load(buf11, 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0))))))))),
  ranges=[128, 256, 6, 6],
  origins={max_pool2d_with_indices_2}
)), ComputedBuffer(name='buf13', layout=FixedLayout('cuda', torch.float32, size=[128, 9216], stride=[9216, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  to_dtype(rand(bitwise_xor(load(seed_cuda_0, 0), constant(65535, torch.int32)), index_expr(i1 + 9216 * i0, torch.int32), torch.float32) > constant(0.5, torch.float32), torch.float32) * load(buf12, 6 * ModularIndexing(i1, 6, 6) + 36 * ModularIndexing(i1, 36, 256) + 9216 * i0 + ModularIndexing(i1, 1, 6)) * constant(2.0, torch.float32),
  ranges=[128, 9216],
  origins={mul_1}
)), MatrixMultiplyAdd(name='buf14', layout=FixedLayout('cuda', torch.float32, size=[128, 4096], stride=[4096, 1]), inputs=[InputBuffer(name='primals_12', layout=FixedLayout('cuda', torch.float32, size=[4096], stride=[1])), ComputedBuffer(name='buf13', layout=FixedLayout('cuda', torch.float32, size=[128, 9216], stride=[9216, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  to_dtype(rand(bitwise_xor(load(seed_cuda_0, 0), constant(65535, torch.int32)), index_expr(i1 + 9216 * i0, torch.int32), torch.float32) > constant(0.5, torch.float32), torch.float32) * load(buf12, 6 * ModularIndexing(i1, 6, 6) + 36 * ModularIndexing(i1, 36, 256) + 9216 * i0 + ModularIndexing(i1, 1, 6)) * constant(2.0, torch.float32),
  ranges=[128, 9216],
  origins={mul_1}
)), ReinterpretView(
  StorageBox(
    InputBuffer(name='primals_11', layout=FixedLayout('cuda', torch.float32, size=[4096, 9216], stride=[9216, 1]))
  ),
  FixedLayout('cuda', torch.float32, size=[9216, 4096], stride=[1, 9216]),
  origins={permute}
)], constant_args=(), kwargs={'beta': 1, 'alpha': 1}, output_view=None), ComputedBuffer(name='buf15', layout=FixedLayout('cuda', torch.float32, size=[128, 4096], stride=[4096, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  to_dtype(rand(bitwise_xor(load(seed_cuda_0, 0), constant(65535, torch.int32)), index_expr(1179648 + i1 + 4096 * i0, torch.int32), torch.float32) > constant(0.5, torch.float32), torch.float32) * relu(load(buf14, i1 + 4096 * i0)) * constant(2.0, torch.float32),
  ranges=[128, 4096],
  origins={mul_3}
)), MatrixMultiplyAdd(name='buf16', layout=FixedLayout('cuda', torch.float32, size=[128, 4096], stride=[4096, 1]), inputs=[InputBuffer(name='primals_14', layout=FixedLayout('cuda', torch.float32, size=[4096], stride=[1])), ComputedBuffer(name='buf15', layout=FixedLayout('cuda', torch.float32, size=[128, 4096], stride=[4096, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  to_dtype(rand(bitwise_xor(load(seed_cuda_0, 0), constant(65535, torch.int32)), index_expr(1179648 + i1 + 4096 * i0, torch.int32), torch.float32) > constant(0.5, torch.float32), torch.float32) * relu(load(buf14, i1 + 4096 * i0)) * constant(2.0, torch.float32),
  ranges=[128, 4096],
  origins={mul_3}
)), ReinterpretView(
  StorageBox(
    InputBuffer(name='primals_13', layout=FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1]))
  ),
  FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[1, 4096]),
  origins={permute_1}
)], constant_args=(), kwargs={'beta': 1, 'alpha': 1}, output_view=None), ComputedBuffer(name='buf17', layout=FixedLayout('cuda', torch.float32, size=[128, 4096], stride=[4096, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  relu(load(buf16, i1 + 4096 * i0)),
  ranges=[128, 4096],
  origins={relu_6}
)), MatrixMultiplyAdd(name='buf18', layout=FixedLayout('cuda', torch.float32, size=[128, 1000], stride=[1000, 1]), inputs=[InputBuffer(name='primals_16', layout=FixedLayout('cuda', torch.float32, size=[1000], stride=[1])), ComputedBuffer(name='buf17', layout=FixedLayout('cuda', torch.float32, size=[128, 4096], stride=[4096, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  relu(load(buf16, i1 + 4096 * i0)),
  ranges=[128, 4096],
  origins={relu_6}
)), ReinterpretView(
  StorageBox(
    InputBuffer(name='primals_15', layout=FixedLayout('cuda', torch.float32, size=[1000, 4096], stride=[4096, 1]))
  ),
  FixedLayout('cuda', torch.float32, size=[4096, 1000], stride=[1, 4096]),
  origins={permute_2}
)], constant_args=(), kwargs={'beta': 1, 'alpha': 1}, output_view=None), ComputedBuffer(name='buf19', layout=FixedLayout('cuda', torch.int64, size=[128, 64, 27, 27], stride=[46656, 729, 27, 1]), data=Pointwise(
  'cuda',
  torch.int64,
  where(load(buf1, 112 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0) > maximum(load(buf1, 111 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 110 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 57 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 56 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 55 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 2 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 1 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), load(buf1, 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0)))))))), index_expr(112 + 2 * i3 + 110 * i2, torch.int64), where(load(buf1, 111 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0) > maximum(load(buf1, 110 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 57 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 56 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 55 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 2 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 1 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), load(buf1, 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0))))))), index_expr(111 + 2 * i3 + 110 * i2, torch.int64), where(load(buf1, 110 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0) > maximum(load(buf1, 57 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 56 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 55 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 2 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 1 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), load(buf1, 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0)))))), index_expr(110 + 2 * i3 + 110 * i2, torch.int64), where(load(buf1, 57 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0) > maximum(load(buf1, 56 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 55 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 2 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 1 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), load(buf1, 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0))))), index_expr(57 + 2 * i3 + 110 * i2, torch.int64), where(load(buf1, 56 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0) > maximum(load(buf1, 55 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 2 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 1 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), load(buf1, 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0)))), index_expr(56 + 2 * i3 + 110 * i2, torch.int64), where(load(buf1, 55 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0) > maximum(load(buf1, 2 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 1 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), load(buf1, 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0))), index_expr(55 + 2 * i3 + 110 * i2, torch.int64), where(load(buf1, 2 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0) > maximum(load(buf1, 1 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), load(buf1, 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0)), index_expr(2 + 2 * i3 + 110 * i2, torch.int64), where(load(buf1, 1 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0) > load(buf1, 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), index_expr(1 + 2 * i3 + 110 * i2, torch.int64), index_expr(2 * i3 + 110 * i2, torch.int64))))))))),
  ranges=[128, 64, 27, 27],
  origins={max_pool2d_with_indices}
)), ComputedBuffer(name='buf20', layout=FixedLayout('cuda', torch.int64, size=[128, 192, 13, 13], stride=[32448, 169, 13, 1]), data=Pointwise(
  'cuda',
  torch.int64,
  where(load(buf4, 56 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0) > maximum(load(buf4, 55 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 54 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 29 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 28 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 27 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 2 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 1 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), load(buf4, 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0)))))))), index_expr(56 + 2 * i3 + 54 * i2, torch.int64), where(load(buf4, 55 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0) > maximum(load(buf4, 54 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 29 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 28 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 27 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 2 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 1 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), load(buf4, 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0))))))), index_expr(55 + 2 * i3 + 54 * i2, torch.int64), where(load(buf4, 54 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0) > maximum(load(buf4, 29 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 28 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 27 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 2 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 1 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), load(buf4, 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0)))))), index_expr(54 + 2 * i3 + 54 * i2, torch.int64), where(load(buf4, 29 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0) > maximum(load(buf4, 28 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 27 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 2 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 1 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), load(buf4, 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0))))), index_expr(29 + 2 * i3 + 54 * i2, torch.int64), where(load(buf4, 28 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0) > maximum(load(buf4, 27 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 2 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 1 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), load(buf4, 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0)))), index_expr(28 + 2 * i3 + 54 * i2, torch.int64), where(load(buf4, 27 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0) > maximum(load(buf4, 2 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 1 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), load(buf4, 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0))), index_expr(27 + 2 * i3 + 54 * i2, torch.int64), where(load(buf4, 2 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0) > maximum(load(buf4, 1 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), load(buf4, 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0)), index_expr(2 + 2 * i3 + 54 * i2, torch.int64), where(load(buf4, 1 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0) > load(buf4, 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), index_expr(1 + 2 * i3 + 54 * i2, torch.int64), index_expr(2 * i3 + 54 * i2, torch.int64))))))))),
  ranges=[128, 192, 13, 13],
  origins={max_pool2d_with_indices_1}
)), ComputedBuffer(name='buf21', layout=FixedLayout('cuda', torch.int64, size=[128, 256, 6, 6], stride=[9216, 36, 6, 1]), data=Pointwise(
  'cuda',
  torch.int64,
  where(load(buf11, 28 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0) > maximum(load(buf11, 27 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 26 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 15 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 14 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 13 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 2 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 1 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), load(buf11, 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0)))))))), index_expr(28 + 2 * i3 + 26 * i2, torch.int64), where(load(buf11, 27 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0) > maximum(load(buf11, 26 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 15 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 14 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 13 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 2 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 1 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), load(buf11, 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0))))))), index_expr(27 + 2 * i3 + 26 * i2, torch.int64), where(load(buf11, 26 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0) > maximum(load(buf11, 15 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 14 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 13 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 2 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 1 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), load(buf11, 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0)))))), index_expr(26 + 2 * i3 + 26 * i2, torch.int64), where(load(buf11, 15 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0) > maximum(load(buf11, 14 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 13 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 2 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 1 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), load(buf11, 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0))))), index_expr(15 + 2 * i3 + 26 * i2, torch.int64), where(load(buf11, 14 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0) > maximum(load(buf11, 13 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 2 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 1 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), load(buf11, 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0)))), index_expr(14 + 2 * i3 + 26 * i2, torch.int64), where(load(buf11, 13 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0) > maximum(load(buf11, 2 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 1 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), load(buf11, 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0))), index_expr(13 + 2 * i3 + 26 * i2, torch.int64), where(load(buf11, 2 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0) > maximum(load(buf11, 1 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), load(buf11, 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0)), index_expr(2 + 2 * i3 + 26 * i2, torch.int64), where(load(buf11, 1 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0) > load(buf11, 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), index_expr(1 + 2 * i3 + 26 * i2, torch.int64), index_expr(2 * i3 + 26 * i2, torch.int64))))))))),
  ranges=[128, 256, 6, 6],
  origins={max_pool2d_with_indices_2}
)), ComputedBuffer(name='buf22', layout=FixedLayout('cuda', torch.bool, size=[128, 9216], stride=[9216, 1]), data=Pointwise(
  'cuda',
  torch.bool,
  rand(bitwise_xor(load(seed_cuda_0, 0), constant(65535, torch.int32)), index_expr(i1 + 9216 * i0, torch.int32), torch.float32) > constant(0.5, torch.float32),
  ranges=[128, 9216],
  origins={gt}
)), ComputedBuffer(name='buf23', layout=FixedLayout('cuda', torch.bool, size=[128, 4096], stride=[4096, 1]), data=Pointwise(
  'cuda',
  torch.bool,
  rand(bitwise_xor(load(seed_cuda_0, 0), constant(65535, torch.int32)), index_expr(1179648 + i1 + 4096 * i0, torch.int32), torch.float32) > constant(0.5, torch.float32),
  ranges=[128, 4096],
  origins={gt_1}
))]
==========IR outputs============
[StorageBox(
  MatrixMultiplyAdd(
    name=buf18,
    layout=FixedLayout('cuda', torch.float32, size=[128, 1000], stride=[1000, 1]),
    inputs=[InputBuffer(name='primals_16', layout=FixedLayout('cuda', torch.float32, size=[1000], stride=[1])), ComputedBuffer(name='buf17', layout=FixedLayout('cuda', torch.float32, size=[128, 4096], stride=[4096, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      relu(load(buf16, i1 + 4096 * i0)),
      ranges=[128, 4096],
      origins={relu_6}
    )), ReinterpretView(
      StorageBox(
        InputBuffer(name='primals_15', layout=FixedLayout('cuda', torch.float32, size=[1000, 4096], stride=[4096, 1]))
      ),
      FixedLayout('cuda', torch.float32, size=[4096, 1000], stride=[1, 4096]),
      origins={permute_2}
    )],
    constant_args=(),
    kwargs={'beta': 1, 'alpha': 1},
    output_view=None,
    origins={addmm_2}
  )
), StorageBox(
  InputBuffer(name='primals_1', layout=FixedLayout('cuda', torch.float32, size=[64, 3, 11, 11], stride=[363, 121, 11, 1]))
), StorageBox(
  InputBuffer(name='primals_3', layout=FixedLayout('cuda', torch.float32, size=[192, 64, 5, 5], stride=[1600, 25, 5, 1]))
), StorageBox(
  InputBuffer(name='primals_5', layout=FixedLayout('cuda', torch.float32, size=[384, 192, 3, 3], stride=[1728, 9, 3, 1]))
), StorageBox(
  InputBuffer(name='primals_7', layout=FixedLayout('cuda', torch.float32, size=[256, 384, 3, 3], stride=[3456, 9, 3, 1]))
), StorageBox(
  InputBuffer(name='primals_9', layout=FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1]))
), StorageBox(
  InputBuffer(name='primals_17', layout=FixedLayout('cuda', torch.float32, size=[128, 3, 224, 224], stride=[150528, 50176, 224, 1]))
), StorageBox(
  ComputedBuffer(name='buf1', layout=FixedLayout('cuda', torch.float32, size=[128, 64, 55, 55], stride=[193600, 3025, 55, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    relu(load(buf0, i3 + 55 * i2 + 3025 * i1 + 193600 * i0) + load(primals_2, i1)),
    ranges=[128, 64, 55, 55],
    origins={relu}
  ))
), StorageBox(
  ComputedBuffer(name='buf2', layout=FixedLayout('cuda', torch.float32, size=[128, 64, 27, 27], stride=[46656, 729, 27, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    maximum(load(buf1, 112 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 111 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 110 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 57 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 56 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 55 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 2 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 1 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), load(buf1, 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0))))))))),
    ranges=[128, 64, 27, 27],
    origins={max_pool2d_with_indices}
  ))
), StorageBox(
  ComputedBuffer(name='buf19', layout=FixedLayout('cuda', torch.int64, size=[128, 64, 27, 27], stride=[46656, 729, 27, 1]), data=Pointwise(
    'cuda',
    torch.int64,
    where(load(buf1, 112 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0) > maximum(load(buf1, 111 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 110 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 57 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 56 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 55 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 2 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 1 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), load(buf1, 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0)))))))), index_expr(112 + 2 * i3 + 110 * i2, torch.int64), where(load(buf1, 111 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0) > maximum(load(buf1, 110 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 57 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 56 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 55 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 2 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 1 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), load(buf1, 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0))))))), index_expr(111 + 2 * i3 + 110 * i2, torch.int64), where(load(buf1, 110 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0) > maximum(load(buf1, 57 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 56 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 55 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 2 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 1 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), load(buf1, 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0)))))), index_expr(110 + 2 * i3 + 110 * i2, torch.int64), where(load(buf1, 57 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0) > maximum(load(buf1, 56 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 55 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 2 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 1 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), load(buf1, 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0))))), index_expr(57 + 2 * i3 + 110 * i2, torch.int64), where(load(buf1, 56 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0) > maximum(load(buf1, 55 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 2 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 1 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), load(buf1, 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0)))), index_expr(56 + 2 * i3 + 110 * i2, torch.int64), where(load(buf1, 55 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0) > maximum(load(buf1, 2 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), maximum(load(buf1, 1 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), load(buf1, 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0))), index_expr(55 + 2 * i3 + 110 * i2, torch.int64), where(load(buf1, 2 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0) > maximum(load(buf1, 1 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), load(buf1, 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0)), index_expr(2 + 2 * i3 + 110 * i2, torch.int64), where(load(buf1, 1 + 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0) > load(buf1, 2 * i3 + 110 * i2 + 3025 * i1 + 193600 * i0), index_expr(1 + 2 * i3 + 110 * i2, torch.int64), index_expr(2 * i3 + 110 * i2, torch.int64))))))))),
    ranges=[128, 64, 27, 27],
    origins={max_pool2d_with_indices}
  ))
), StorageBox(
  ComputedBuffer(name='buf4', layout=FixedLayout('cuda', torch.float32, size=[128, 192, 27, 27], stride=[139968, 729, 27, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    relu(load(buf3, i3 + 27 * i2 + 729 * i1 + 139968 * i0) + load(primals_4, i1)),
    ranges=[128, 192, 27, 27],
    origins={relu_1}
  ))
), StorageBox(
  ComputedBuffer(name='buf5', layout=FixedLayout('cuda', torch.float32, size=[128, 192, 13, 13], stride=[32448, 169, 13, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    maximum(load(buf4, 56 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 55 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 54 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 29 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 28 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 27 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 2 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 1 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), load(buf4, 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0))))))))),
    ranges=[128, 192, 13, 13],
    origins={max_pool2d_with_indices_1}
  ))
), StorageBox(
  ComputedBuffer(name='buf20', layout=FixedLayout('cuda', torch.int64, size=[128, 192, 13, 13], stride=[32448, 169, 13, 1]), data=Pointwise(
    'cuda',
    torch.int64,
    where(load(buf4, 56 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0) > maximum(load(buf4, 55 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 54 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 29 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 28 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 27 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 2 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 1 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), load(buf4, 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0)))))))), index_expr(56 + 2 * i3 + 54 * i2, torch.int64), where(load(buf4, 55 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0) > maximum(load(buf4, 54 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 29 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 28 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 27 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 2 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 1 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), load(buf4, 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0))))))), index_expr(55 + 2 * i3 + 54 * i2, torch.int64), where(load(buf4, 54 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0) > maximum(load(buf4, 29 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 28 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 27 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 2 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 1 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), load(buf4, 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0)))))), index_expr(54 + 2 * i3 + 54 * i2, torch.int64), where(load(buf4, 29 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0) > maximum(load(buf4, 28 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 27 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 2 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 1 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), load(buf4, 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0))))), index_expr(29 + 2 * i3 + 54 * i2, torch.int64), where(load(buf4, 28 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0) > maximum(load(buf4, 27 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 2 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 1 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), load(buf4, 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0)))), index_expr(28 + 2 * i3 + 54 * i2, torch.int64), where(load(buf4, 27 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0) > maximum(load(buf4, 2 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), maximum(load(buf4, 1 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), load(buf4, 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0))), index_expr(27 + 2 * i3 + 54 * i2, torch.int64), where(load(buf4, 2 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0) > maximum(load(buf4, 1 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), load(buf4, 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0)), index_expr(2 + 2 * i3 + 54 * i2, torch.int64), where(load(buf4, 1 + 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0) > load(buf4, 2 * i3 + 54 * i2 + 729 * i1 + 139968 * i0), index_expr(1 + 2 * i3 + 54 * i2, torch.int64), index_expr(2 * i3 + 54 * i2, torch.int64))))))))),
    ranges=[128, 192, 13, 13],
    origins={max_pool2d_with_indices_1}
  ))
), StorageBox(
  ComputedBuffer(name='buf7', layout=FixedLayout('cuda', torch.float32, size=[128, 384, 13, 13], stride=[64896, 169, 13, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    relu(load(buf6, i3 + 13 * i2 + 169 * i1 + 64896 * i0) + load(primals_6, i1)),
    ranges=[128, 384, 13, 13],
    origins={relu_2}
  ))
), StorageBox(
  ComputedBuffer(name='buf9', layout=FixedLayout('cuda', torch.float32, size=[128, 256, 13, 13], stride=[43264, 169, 13, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    relu(load(buf8, i3 + 13 * i2 + 169 * i1 + 43264 * i0) + load(primals_8, i1)),
    ranges=[128, 256, 13, 13],
    origins={relu_3}
  ))
), StorageBox(
  ComputedBuffer(name='buf11', layout=FixedLayout('cuda', torch.float32, size=[128, 256, 13, 13], stride=[43264, 169, 13, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    relu(load(buf10, i3 + 13 * i2 + 169 * i1 + 43264 * i0) + load(primals_10, i1)),
    ranges=[128, 256, 13, 13],
    origins={relu_4}
  ))
), StorageBox(
  ComputedBuffer(name='buf12', layout=FixedLayout('cuda', torch.float32, size=[128, 256, 6, 6], stride=[9216, 36, 6, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    maximum(load(buf11, 28 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 27 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 26 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 15 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 14 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 13 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 2 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 1 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), load(buf11, 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0))))))))),
    ranges=[128, 256, 6, 6],
    origins={max_pool2d_with_indices_2}
  ))
), StorageBox(
  ComputedBuffer(name='buf21', layout=FixedLayout('cuda', torch.int64, size=[128, 256, 6, 6], stride=[9216, 36, 6, 1]), data=Pointwise(
    'cuda',
    torch.int64,
    where(load(buf11, 28 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0) > maximum(load(buf11, 27 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 26 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 15 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 14 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 13 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 2 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 1 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), load(buf11, 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0)))))))), index_expr(28 + 2 * i3 + 26 * i2, torch.int64), where(load(buf11, 27 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0) > maximum(load(buf11, 26 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 15 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 14 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 13 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 2 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 1 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), load(buf11, 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0))))))), index_expr(27 + 2 * i3 + 26 * i2, torch.int64), where(load(buf11, 26 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0) > maximum(load(buf11, 15 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 14 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 13 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 2 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 1 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), load(buf11, 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0)))))), index_expr(26 + 2 * i3 + 26 * i2, torch.int64), where(load(buf11, 15 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0) > maximum(load(buf11, 14 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 13 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 2 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 1 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), load(buf11, 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0))))), index_expr(15 + 2 * i3 + 26 * i2, torch.int64), where(load(buf11, 14 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0) > maximum(load(buf11, 13 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 2 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 1 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), load(buf11, 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0)))), index_expr(14 + 2 * i3 + 26 * i2, torch.int64), where(load(buf11, 13 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0) > maximum(load(buf11, 2 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), maximum(load(buf11, 1 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), load(buf11, 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0))), index_expr(13 + 2 * i3 + 26 * i2, torch.int64), where(load(buf11, 2 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0) > maximum(load(buf11, 1 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), load(buf11, 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0)), index_expr(2 + 2 * i3 + 26 * i2, torch.int64), where(load(buf11, 1 + 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0) > load(buf11, 2 * i3 + 26 * i2 + 169 * i1 + 43264 * i0), index_expr(1 + 2 * i3 + 26 * i2, torch.int64), index_expr(2 * i3 + 26 * i2, torch.int64))))))))),
    ranges=[128, 256, 6, 6],
    origins={max_pool2d_with_indices_2}
  ))
), StorageBox(
  ComputedBuffer(name='buf22', layout=FixedLayout('cuda', torch.bool, size=[128, 9216], stride=[9216, 1]), data=Pointwise(
    'cuda',
    torch.bool,
    rand(bitwise_xor(load(seed_cuda_0, 0), constant(65535, torch.int32)), index_expr(i1 + 9216 * i0, torch.int32), torch.float32) > constant(0.5, torch.float32),
    ranges=[128, 9216],
    origins={gt}
  ))
), StorageBox(
  ComputedBuffer(name='buf13', layout=FixedLayout('cuda', torch.float32, size=[128, 9216], stride=[9216, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    to_dtype(rand(bitwise_xor(load(seed_cuda_0, 0), constant(65535, torch.int32)), index_expr(i1 + 9216 * i0, torch.int32), torch.float32) > constant(0.5, torch.float32), torch.float32) * load(buf12, 6 * ModularIndexing(i1, 6, 6) + 36 * ModularIndexing(i1, 36, 256) + 9216 * i0 + ModularIndexing(i1, 1, 6)) * constant(2.0, torch.float32),
    ranges=[128, 9216],
    origins={mul_1}
  ))
), StorageBox(
  MatrixMultiplyAdd(
    name=buf14,
    layout=FixedLayout('cuda', torch.float32, size=[128, 4096], stride=[4096, 1]),
    inputs=[InputBuffer(name='primals_12', layout=FixedLayout('cuda', torch.float32, size=[4096], stride=[1])), ComputedBuffer(name='buf13', layout=FixedLayout('cuda', torch.float32, size=[128, 9216], stride=[9216, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      to_dtype(rand(bitwise_xor(load(seed_cuda_0, 0), constant(65535, torch.int32)), index_expr(i1 + 9216 * i0, torch.int32), torch.float32) > constant(0.5, torch.float32), torch.float32) * load(buf12, 6 * ModularIndexing(i1, 6, 6) + 36 * ModularIndexing(i1, 36, 256) + 9216 * i0 + ModularIndexing(i1, 1, 6)) * constant(2.0, torch.float32),
      ranges=[128, 9216],
      origins={mul_1}
    )), ReinterpretView(
      StorageBox(
        InputBuffer(name='primals_11', layout=FixedLayout('cuda', torch.float32, size=[4096, 9216], stride=[9216, 1]))
      ),
      FixedLayout('cuda', torch.float32, size=[9216, 4096], stride=[1, 9216]),
      origins={permute}
    )],
    constant_args=(),
    kwargs={'beta': 1, 'alpha': 1},
    output_view=None,
    origins={addmm}
  )
), StorageBox(
  ComputedBuffer(name='buf23', layout=FixedLayout('cuda', torch.bool, size=[128, 4096], stride=[4096, 1]), data=Pointwise(
    'cuda',
    torch.bool,
    rand(bitwise_xor(load(seed_cuda_0, 0), constant(65535, torch.int32)), index_expr(1179648 + i1 + 4096 * i0, torch.int32), torch.float32) > constant(0.5, torch.float32),
    ranges=[128, 4096],
    origins={gt_1}
  ))
), StorageBox(
  ComputedBuffer(name='buf17', layout=FixedLayout('cuda', torch.float32, size=[128, 4096], stride=[4096, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    relu(load(buf16, i1 + 4096 * i0)),
    ranges=[128, 4096],
    origins={relu_6}
  ))
), ReinterpretView(
  StorageBox(
    InputBuffer(name='primals_15', layout=FixedLayout('cuda', torch.float32, size=[1000, 4096], stride=[4096, 1]))
  ),
  FixedLayout('cuda', torch.float32, size=[1000, 4096], stride=[4096, 1]),
  origins={permute_3}
), ReinterpretView(
  StorageBox(
    InputBuffer(name='primals_13', layout=FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1]))
  ),
  FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1]),
  origins={permute_7}
), ReinterpretView(
  StorageBox(
    InputBuffer(name='primals_11', layout=FixedLayout('cuda', torch.float32, size=[4096, 9216], stride=[9216, 1]))
  ),
  FixedLayout('cuda', torch.float32, size=[4096, 9216], stride=[9216, 1]),
  origins={permute_11}
)]

from ctypes import c_void_p, c_long
import torch
import random
from torch import empty_strided, as_strided, device
from torchinductor.codecache import AsyncCompile

aten = torch.ops.aten
async_compile = AsyncCompile()

import triton
import triton.language as tl
from torchinductor.triton_ops.autotune import grid
from torch._C import _cuda_getCurrentRawStream as get_cuda_stream
seed_cuda_0 = None  # 12bf87036c8e625335a9db42dcf50de0c1ec952294785adced537424d5733e17


kernel0 = async_compile.triton('''
import triton
import triton.language as tl
from torchinductor.ir import ReductionHint
from torchinductor.triton_ops.autotune import pointwise
from torchinductor.utils import instance_descriptor

@pointwise(size_hints=[33554432], filename=__file__, meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': 0, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=())], 'constants': {}})
@triton.jit
def kernel(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 24780800
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.reshape(tl.arange(0, XBLOCK), [XBLOCK])
    xmask = xindex < xnumel
    x3 = xindex
    x1 = (xindex // 3025) % 64
    tmp0 = tl.load(in_ptr0 + (x3), xmask)
    tmp1 = tl.load(in_ptr1 + (x1), xmask)
    tmp2 = tmp0 + tmp1
    tmp3 = tl.maximum(0, tmp2)
    tl.store(out_ptr0 + (x3 + tl.zeros([XBLOCK], tl.int32)), tmp3, xmask)
''')


kernel1 = async_compile.triton('''
import triton
import triton.language as tl
from torchinductor.ir import ReductionHint
from torchinductor.triton_ops.autotune import pointwise
from torchinductor.utils import instance_descriptor

@pointwise(size_hints=[8388608], filename=__file__, meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': 0, 'configs': [instance_descriptor(divisible_by_16=(0, 1), equal_to_1=())], 'constants': {}})
@triton.jit
def kernel(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 5971968
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.reshape(tl.arange(0, XBLOCK), [XBLOCK])
    xmask = xindex < xnumel
    x0 = xindex % 27
    x1 = (xindex // 27) % 27
    x2 = (xindex // 729)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + ((2*x0) + (110*x1) + (3025*x2)), xmask)
    tmp2 = tl.load(in_ptr0 + (1 + (2*x0) + (110*x1) + (3025*x2)), xmask)
    tmp7 = tl.load(in_ptr0 + (2 + (2*x0) + (110*x1) + (3025*x2)), xmask)
    tmp12 = tl.load(in_ptr0 + (55 + (2*x0) + (110*x1) + (3025*x2)), xmask)
    tmp17 = tl.load(in_ptr0 + (56 + (2*x0) + (110*x1) + (3025*x2)), xmask)
    tmp22 = tl.load(in_ptr0 + (57 + (2*x0) + (110*x1) + (3025*x2)), xmask)
    tmp27 = tl.load(in_ptr0 + (110 + (2*x0) + (110*x1) + (3025*x2)), xmask)
    tmp32 = tl.load(in_ptr0 + (111 + (2*x0) + (110*x1) + (3025*x2)), xmask)
    tmp37 = tl.load(in_ptr0 + (112 + (2*x0) + (110*x1) + (3025*x2)), xmask)
    tmp1 = (2*x0) + (110*x1)
    tmp3 = 1 + (2*x0) + (110*x1)
    tmp4 = tmp2 > tmp0
    tmp5 = tl.where(tmp4, tmp3, tmp1)
    tmp6 = tl.maximum(tmp2, tmp0)
    tmp8 = 2 + (2*x0) + (110*x1)
    tmp9 = tmp7 > tmp6
    tmp10 = tl.where(tmp9, tmp8, tmp5)
    tmp11 = tl.maximum(tmp7, tmp6)
    tmp13 = 55 + (2*x0) + (110*x1)
    tmp14 = tmp12 > tmp11
    tmp15 = tl.where(tmp14, tmp13, tmp10)
    tmp16 = tl.maximum(tmp12, tmp11)
    tmp18 = 56 + (2*x0) + (110*x1)
    tmp19 = tmp17 > tmp16
    tmp20 = tl.where(tmp19, tmp18, tmp15)
    tmp21 = tl.maximum(tmp17, tmp16)
    tmp23 = 57 + (2*x0) + (110*x1)
    tmp24 = tmp22 > tmp21
    tmp25 = tl.where(tmp24, tmp23, tmp20)
    tmp26 = tl.maximum(tmp22, tmp21)
    tmp28 = 110 + (2*x0) + (110*x1)
    tmp29 = tmp27 > tmp26
    tmp30 = tl.where(tmp29, tmp28, tmp25)
    tmp31 = tl.maximum(tmp27, tmp26)
    tmp33 = 111 + (2*x0) + (110*x1)
    tmp34 = tmp32 > tmp31
    tmp35 = tl.where(tmp34, tmp33, tmp30)
    tmp36 = tl.maximum(tmp32, tmp31)
    tmp38 = 112 + (2*x0) + (110*x1)
    tmp39 = tmp37 > tmp36
    tmp40 = tl.where(tmp39, tmp38, tmp35)
    tmp41 = tl.maximum(tmp37, tmp36)
    tl.store(out_ptr0 + (x3 + tl.zeros([XBLOCK], tl.int32)), tmp41, xmask)
''')


kernel2 = async_compile.triton('''
import triton
import triton.language as tl
from torchinductor.ir import ReductionHint
from torchinductor.triton_ops.autotune import pointwise
from torchinductor.utils import instance_descriptor

@pointwise(size_hints=[33554432], filename=__file__, meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': 0, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=())], 'constants': {}})
@triton.jit
def kernel(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 17915904
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.reshape(tl.arange(0, XBLOCK), [XBLOCK])
    xmask = xindex < xnumel
    x3 = xindex
    x1 = (xindex // 729) % 192
    tmp0 = tl.load(in_ptr0 + (x3), xmask)
    tmp1 = tl.load(in_ptr1 + (x1), xmask)
    tmp2 = tmp0 + tmp1
    tmp3 = tl.maximum(0, tmp2)
    tl.store(out_ptr0 + (x3 + tl.zeros([XBLOCK], tl.int32)), tmp3, xmask)
''')


kernel3 = async_compile.triton('''
import triton
import triton.language as tl
from torchinductor.ir import ReductionHint
from torchinductor.triton_ops.autotune import pointwise
from torchinductor.utils import instance_descriptor

@pointwise(size_hints=[4194304], filename=__file__, meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': 0, 'configs': [instance_descriptor(divisible_by_16=(0, 1), equal_to_1=())], 'constants': {}})
@triton.jit
def kernel(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 4153344
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.reshape(tl.arange(0, XBLOCK), [XBLOCK])
    xmask = xindex < xnumel
    x0 = xindex % 13
    x1 = (xindex // 13) % 13
    x2 = (xindex // 169)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + ((2*x0) + (54*x1) + (729*x2)), xmask)
    tmp2 = tl.load(in_ptr0 + (1 + (2*x0) + (54*x1) + (729*x2)), xmask)
    tmp7 = tl.load(in_ptr0 + (2 + (2*x0) + (54*x1) + (729*x2)), xmask)
    tmp12 = tl.load(in_ptr0 + (27 + (2*x0) + (54*x1) + (729*x2)), xmask)
    tmp17 = tl.load(in_ptr0 + (28 + (2*x0) + (54*x1) + (729*x2)), xmask)
    tmp22 = tl.load(in_ptr0 + (29 + (2*x0) + (54*x1) + (729*x2)), xmask)
    tmp27 = tl.load(in_ptr0 + (54 + (2*x0) + (54*x1) + (729*x2)), xmask)
    tmp32 = tl.load(in_ptr0 + (55 + (2*x0) + (54*x1) + (729*x2)), xmask)
    tmp37 = tl.load(in_ptr0 + (56 + (2*x0) + (54*x1) + (729*x2)), xmask)
    tmp1 = (2*x0) + (54*x1)
    tmp3 = 1 + (2*x0) + (54*x1)
    tmp4 = tmp2 > tmp0
    tmp5 = tl.where(tmp4, tmp3, tmp1)
    tmp6 = tl.maximum(tmp2, tmp0)
    tmp8 = 2 + (2*x0) + (54*x1)
    tmp9 = tmp7 > tmp6
    tmp10 = tl.where(tmp9, tmp8, tmp5)
    tmp11 = tl.maximum(tmp7, tmp6)
    tmp13 = 27 + (2*x0) + (54*x1)
    tmp14 = tmp12 > tmp11
    tmp15 = tl.where(tmp14, tmp13, tmp10)
    tmp16 = tl.maximum(tmp12, tmp11)
    tmp18 = 28 + (2*x0) + (54*x1)
    tmp19 = tmp17 > tmp16
    tmp20 = tl.where(tmp19, tmp18, tmp15)
    tmp21 = tl.maximum(tmp17, tmp16)
    tmp23 = 29 + (2*x0) + (54*x1)
    tmp24 = tmp22 > tmp21
    tmp25 = tl.where(tmp24, tmp23, tmp20)
    tmp26 = tl.maximum(tmp22, tmp21)
    tmp28 = 54 + (2*x0) + (54*x1)
    tmp29 = tmp27 > tmp26
    tmp30 = tl.where(tmp29, tmp28, tmp25)
    tmp31 = tl.maximum(tmp27, tmp26)
    tmp33 = 55 + (2*x0) + (54*x1)
    tmp34 = tmp32 > tmp31
    tmp35 = tl.where(tmp34, tmp33, tmp30)
    tmp36 = tl.maximum(tmp32, tmp31)
    tmp38 = 56 + (2*x0) + (54*x1)
    tmp39 = tmp37 > tmp36
    tmp40 = tl.where(tmp39, tmp38, tmp35)
    tmp41 = tl.maximum(tmp37, tmp36)
    tl.store(out_ptr0 + (x3 + tl.zeros([XBLOCK], tl.int32)), tmp41, xmask)
''')


kernel4 = async_compile.triton('''
import triton
import triton.language as tl
from torchinductor.ir import ReductionHint
from torchinductor.triton_ops.autotune import pointwise
from torchinductor.utils import instance_descriptor

@pointwise(size_hints=[8388608], filename=__file__, meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': 0, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=())], 'constants': {}})
@triton.jit
def kernel(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 8306688
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.reshape(tl.arange(0, XBLOCK), [XBLOCK])
    xmask = xindex < xnumel
    x3 = xindex
    x1 = (xindex // 169) % 384
    tmp0 = tl.load(in_ptr0 + (x3), xmask)
    tmp1 = tl.load(in_ptr1 + (x1), xmask)
    tmp2 = tmp0 + tmp1
    tmp3 = tl.maximum(0, tmp2)
    tl.store(out_ptr0 + (x3 + tl.zeros([XBLOCK], tl.int32)), tmp3, xmask)
''')


kernel5 = async_compile.triton('''
import triton
import triton.language as tl
from torchinductor.ir import ReductionHint
from torchinductor.triton_ops.autotune import pointwise
from torchinductor.utils import instance_descriptor

@pointwise(size_hints=[8388608], filename=__file__, meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': 0, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=())], 'constants': {}})
@triton.jit
def kernel(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 5537792
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.reshape(tl.arange(0, XBLOCK), [XBLOCK])
    xmask = xindex < xnumel
    x3 = xindex
    x1 = (xindex // 169) % 256
    tmp0 = tl.load(in_ptr0 + (x3), xmask)
    tmp1 = tl.load(in_ptr1 + (x1), xmask)
    tmp2 = tmp0 + tmp1
    tmp3 = tl.maximum(0, tmp2)
    tl.store(out_ptr0 + (x3 + tl.zeros([XBLOCK], tl.int32)), tmp3, xmask)
''')


kernel6 = async_compile.triton('''
import triton
import triton.language as tl
from torchinductor.ir import ReductionHint
from torchinductor.triton_ops.autotune import pointwise
from torchinductor.utils import instance_descriptor

@pointwise(size_hints=[2097152], filename=__file__, meta={'signature': {0: '*fp32', 1: '*i64', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': 0, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())], 'constants': {}})
@triton.jit
def kernel(in_ptr0, seed1, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
    xnumel = 1179648
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.reshape(tl.arange(0, XBLOCK), [XBLOCK])
    xmask = xindex < xnumel
    x0 = xindex % 6
    x1 = (xindex // 6) % 6
    x2 = (xindex // 36)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + ((2*x0) + (26*x1) + (169*x2)), xmask)
    tmp2 = tl.load(in_ptr0 + (1 + (2*x0) + (26*x1) + (169*x2)), xmask)
    tmp7 = tl.load(in_ptr0 + (2 + (2*x0) + (26*x1) + (169*x2)), xmask)
    tmp12 = tl.load(in_ptr0 + (13 + (2*x0) + (26*x1) + (169*x2)), xmask)
    tmp17 = tl.load(in_ptr0 + (14 + (2*x0) + (26*x1) + (169*x2)), xmask)
    tmp22 = tl.load(in_ptr0 + (15 + (2*x0) + (26*x1) + (169*x2)), xmask)
    tmp27 = tl.load(in_ptr0 + (26 + (2*x0) + (26*x1) + (169*x2)), xmask)
    tmp32 = tl.load(in_ptr0 + (27 + (2*x0) + (26*x1) + (169*x2)), xmask)
    tmp37 = tl.load(in_ptr0 + (28 + (2*x0) + (26*x1) + (169*x2)), xmask)
    tmp42 = tl.load(seed1 + (0 + tl.zeros([XBLOCK], tl.int32)), None)
    tmp1 = (2*x0) + (26*x1)
    tmp3 = 1 + (2*x0) + (26*x1)
    tmp4 = tmp2 > tmp0
    tmp5 = tl.where(tmp4, tmp3, tmp1)
    tmp6 = tl.maximum(tmp2, tmp0)
    tmp8 = 2 + (2*x0) + (26*x1)
    tmp9 = tmp7 > tmp6
    tmp10 = tl.where(tmp9, tmp8, tmp5)
    tmp11 = tl.maximum(tmp7, tmp6)
    tmp13 = 13 + (2*x0) + (26*x1)
    tmp14 = tmp12 > tmp11
    tmp15 = tl.where(tmp14, tmp13, tmp10)
    tmp16 = tl.maximum(tmp12, tmp11)
    tmp18 = 14 + (2*x0) + (26*x1)
    tmp19 = tmp17 > tmp16
    tmp20 = tl.where(tmp19, tmp18, tmp15)
    tmp21 = tl.maximum(tmp17, tmp16)
    tmp23 = 15 + (2*x0) + (26*x1)
    tmp24 = tmp22 > tmp21
    tmp25 = tl.where(tmp24, tmp23, tmp20)
    tmp26 = tl.maximum(tmp22, tmp21)
    tmp28 = 26 + (2*x0) + (26*x1)
    tmp29 = tmp27 > tmp26
    tmp30 = tl.where(tmp29, tmp28, tmp25)
    tmp31 = tl.maximum(tmp27, tmp26)
    tmp33 = 27 + (2*x0) + (26*x1)
    tmp34 = tmp32 > tmp31
    tmp35 = tl.where(tmp34, tmp33, tmp30)
    tmp36 = tl.maximum(tmp32, tmp31)
    tmp38 = 28 + (2*x0) + (26*x1)
    tmp39 = tmp37 > tmp36
    tmp40 = tl.where(tmp39, tmp38, tmp35)
    tmp41 = tl.maximum(tmp37, tmp36)
    tmp43 = 65535
    tmp44 = tmp42 ^ tmp43
    tmp45 = x3
    tmp46 = tl.rand(tmp44, tmp45)
    tmp47 = 0.5
    tmp48 = tmp46 > tmp47
    tmp49 = tmp48.to(tl.float32)
    tmp50 = tmp49 * tmp41
    tmp51 = 2.0
    tmp52 = tmp50 * tmp51
    tl.store(out_ptr0 + (x3 + tl.zeros([XBLOCK], tl.int32)), tmp41, xmask)
    tl.store(out_ptr1 + (x3 + tl.zeros([XBLOCK], tl.int32)), tmp52, xmask)
''')


kernel7 = async_compile.triton('''
import triton
import triton.language as tl
from torchinductor.ir import ReductionHint
from torchinductor.triton_ops.autotune import pointwise
from torchinductor.utils import instance_descriptor

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': 0, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=())], 'constants': {}})
@triton.jit
def kernel(seed0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 524288
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.reshape(tl.arange(0, XBLOCK), [XBLOCK])
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(seed0 + (0 + tl.zeros([XBLOCK], tl.int32)), None)
    tmp8 = tl.load(in_ptr1 + (x0), xmask)
    tmp1 = 65535
    tmp2 = tmp0 ^ tmp1
    tmp3 = 1179648 + x0
    tmp4 = tl.rand(tmp2, tmp3)
    tmp5 = 0.5
    tmp6 = tmp4 > tmp5
    tmp7 = tmp6.to(tl.float32)
    tmp9 = tl.maximum(0, tmp8)
    tmp10 = tmp7 * tmp9
    tmp11 = 2.0
    tmp12 = tmp10 * tmp11
    tl.store(out_ptr0 + (x0 + tl.zeros([XBLOCK], tl.int32)), tmp12, xmask)
''')


kernel8 = async_compile.triton('''
import triton
import triton.language as tl
from torchinductor.ir import ReductionHint
from torchinductor.triton_ops.autotune import pointwise
from torchinductor.utils import instance_descriptor

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': 0, 'configs': [instance_descriptor(divisible_by_16=(0, 1), equal_to_1=())], 'constants': {}})
@triton.jit
def kernel(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 524288
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.reshape(tl.arange(0, XBLOCK), [XBLOCK])
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0), xmask)
    tmp1 = tl.maximum(0, tmp0)
    tl.store(out_ptr0 + (x0 + tl.zeros([XBLOCK], tl.int32)), tmp1, xmask)
''')


kernel9 = async_compile.triton('''
import triton
import triton.language as tl
from torchinductor.ir import ReductionHint
from torchinductor.triton_ops.autotune import pointwise
from torchinductor.utils import instance_descriptor

@pointwise(size_hints=[8388608], filename=__file__, meta={'signature': {0: '*fp32', 1: '*i64', 2: 'i32'}, 'device': 0, 'configs': [instance_descriptor(divisible_by_16=(0, 1), equal_to_1=())], 'constants': {}})
@triton.jit
def kernel(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 5971968
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.reshape(tl.arange(0, XBLOCK), [XBLOCK])
    xmask = xindex < xnumel
    x0 = xindex % 27
    x1 = (xindex // 27) % 27
    x2 = (xindex // 729)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + ((2*x0) + (110*x1) + (3025*x2)), xmask)
    tmp2 = tl.load(in_ptr0 + (1 + (2*x0) + (110*x1) + (3025*x2)), xmask)
    tmp7 = tl.load(in_ptr0 + (2 + (2*x0) + (110*x1) + (3025*x2)), xmask)
    tmp12 = tl.load(in_ptr0 + (55 + (2*x0) + (110*x1) + (3025*x2)), xmask)
    tmp17 = tl.load(in_ptr0 + (56 + (2*x0) + (110*x1) + (3025*x2)), xmask)
    tmp22 = tl.load(in_ptr0 + (57 + (2*x0) + (110*x1) + (3025*x2)), xmask)
    tmp27 = tl.load(in_ptr0 + (110 + (2*x0) + (110*x1) + (3025*x2)), xmask)
    tmp32 = tl.load(in_ptr0 + (111 + (2*x0) + (110*x1) + (3025*x2)), xmask)
    tmp37 = tl.load(in_ptr0 + (112 + (2*x0) + (110*x1) + (3025*x2)), xmask)
    tmp1 = (2*x0) + (110*x1)
    tmp3 = 1 + (2*x0) + (110*x1)
    tmp4 = tmp2 > tmp0
    tmp5 = tl.where(tmp4, tmp3, tmp1)
    tmp6 = tl.maximum(tmp2, tmp0)
    tmp8 = 2 + (2*x0) + (110*x1)
    tmp9 = tmp7 > tmp6
    tmp10 = tl.where(tmp9, tmp8, tmp5)
    tmp11 = tl.maximum(tmp7, tmp6)
    tmp13 = 55 + (2*x0) + (110*x1)
    tmp14 = tmp12 > tmp11
    tmp15 = tl.where(tmp14, tmp13, tmp10)
    tmp16 = tl.maximum(tmp12, tmp11)
    tmp18 = 56 + (2*x0) + (110*x1)
    tmp19 = tmp17 > tmp16
    tmp20 = tl.where(tmp19, tmp18, tmp15)
    tmp21 = tl.maximum(tmp17, tmp16)
    tmp23 = 57 + (2*x0) + (110*x1)
    tmp24 = tmp22 > tmp21
    tmp25 = tl.where(tmp24, tmp23, tmp20)
    tmp26 = tl.maximum(tmp22, tmp21)
    tmp28 = 110 + (2*x0) + (110*x1)
    tmp29 = tmp27 > tmp26
    tmp30 = tl.where(tmp29, tmp28, tmp25)
    tmp31 = tl.maximum(tmp27, tmp26)
    tmp33 = 111 + (2*x0) + (110*x1)
    tmp34 = tmp32 > tmp31
    tmp35 = tl.where(tmp34, tmp33, tmp30)
    tmp36 = tl.maximum(tmp32, tmp31)
    tmp38 = 112 + (2*x0) + (110*x1)
    tmp39 = tmp37 > tmp36
    tmp40 = tl.where(tmp39, tmp38, tmp35)
    tmp41 = tl.maximum(tmp37, tmp36)
    tl.store(out_ptr0 + (x3 + tl.zeros([XBLOCK], tl.int32)), tmp40, xmask)
''')


kernel10 = async_compile.triton('''
import triton
import triton.language as tl
from torchinductor.ir import ReductionHint
from torchinductor.triton_ops.autotune import pointwise
from torchinductor.utils import instance_descriptor

@pointwise(size_hints=[4194304], filename=__file__, meta={'signature': {0: '*fp32', 1: '*i64', 2: 'i32'}, 'device': 0, 'configs': [instance_descriptor(divisible_by_16=(0, 1), equal_to_1=())], 'constants': {}})
@triton.jit
def kernel(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 4153344
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.reshape(tl.arange(0, XBLOCK), [XBLOCK])
    xmask = xindex < xnumel
    x0 = xindex % 13
    x1 = (xindex // 13) % 13
    x2 = (xindex // 169)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + ((2*x0) + (54*x1) + (729*x2)), xmask)
    tmp2 = tl.load(in_ptr0 + (1 + (2*x0) + (54*x1) + (729*x2)), xmask)
    tmp7 = tl.load(in_ptr0 + (2 + (2*x0) + (54*x1) + (729*x2)), xmask)
    tmp12 = tl.load(in_ptr0 + (27 + (2*x0) + (54*x1) + (729*x2)), xmask)
    tmp17 = tl.load(in_ptr0 + (28 + (2*x0) + (54*x1) + (729*x2)), xmask)
    tmp22 = tl.load(in_ptr0 + (29 + (2*x0) + (54*x1) + (729*x2)), xmask)
    tmp27 = tl.load(in_ptr0 + (54 + (2*x0) + (54*x1) + (729*x2)), xmask)
    tmp32 = tl.load(in_ptr0 + (55 + (2*x0) + (54*x1) + (729*x2)), xmask)
    tmp37 = tl.load(in_ptr0 + (56 + (2*x0) + (54*x1) + (729*x2)), xmask)
    tmp1 = (2*x0) + (54*x1)
    tmp3 = 1 + (2*x0) + (54*x1)
    tmp4 = tmp2 > tmp0
    tmp5 = tl.where(tmp4, tmp3, tmp1)
    tmp6 = tl.maximum(tmp2, tmp0)
    tmp8 = 2 + (2*x0) + (54*x1)
    tmp9 = tmp7 > tmp6
    tmp10 = tl.where(tmp9, tmp8, tmp5)
    tmp11 = tl.maximum(tmp7, tmp6)
    tmp13 = 27 + (2*x0) + (54*x1)
    tmp14 = tmp12 > tmp11
    tmp15 = tl.where(tmp14, tmp13, tmp10)
    tmp16 = tl.maximum(tmp12, tmp11)
    tmp18 = 28 + (2*x0) + (54*x1)
    tmp19 = tmp17 > tmp16
    tmp20 = tl.where(tmp19, tmp18, tmp15)
    tmp21 = tl.maximum(tmp17, tmp16)
    tmp23 = 29 + (2*x0) + (54*x1)
    tmp24 = tmp22 > tmp21
    tmp25 = tl.where(tmp24, tmp23, tmp20)
    tmp26 = tl.maximum(tmp22, tmp21)
    tmp28 = 54 + (2*x0) + (54*x1)
    tmp29 = tmp27 > tmp26
    tmp30 = tl.where(tmp29, tmp28, tmp25)
    tmp31 = tl.maximum(tmp27, tmp26)
    tmp33 = 55 + (2*x0) + (54*x1)
    tmp34 = tmp32 > tmp31
    tmp35 = tl.where(tmp34, tmp33, tmp30)
    tmp36 = tl.maximum(tmp32, tmp31)
    tmp38 = 56 + (2*x0) + (54*x1)
    tmp39 = tmp37 > tmp36
    tmp40 = tl.where(tmp39, tmp38, tmp35)
    tmp41 = tl.maximum(tmp37, tmp36)
    tl.store(out_ptr0 + (x3 + tl.zeros([XBLOCK], tl.int32)), tmp40, xmask)
''')


kernel11 = async_compile.triton('''
import triton
import triton.language as tl
from torchinductor.ir import ReductionHint
from torchinductor.triton_ops.autotune import pointwise
from torchinductor.utils import instance_descriptor

@pointwise(size_hints=[2097152], filename=__file__, meta={'signature': {0: '*fp32', 1: '*i64', 2: 'i32'}, 'device': 0, 'configs': [instance_descriptor(divisible_by_16=(0, 1), equal_to_1=())], 'constants': {}})
@triton.jit
def kernel(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 1179648
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.reshape(tl.arange(0, XBLOCK), [XBLOCK])
    xmask = xindex < xnumel
    x0 = xindex % 6
    x1 = (xindex // 6) % 6
    x2 = (xindex // 36)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + ((2*x0) + (26*x1) + (169*x2)), xmask)
    tmp2 = tl.load(in_ptr0 + (1 + (2*x0) + (26*x1) + (169*x2)), xmask)
    tmp7 = tl.load(in_ptr0 + (2 + (2*x0) + (26*x1) + (169*x2)), xmask)
    tmp12 = tl.load(in_ptr0 + (13 + (2*x0) + (26*x1) + (169*x2)), xmask)
    tmp17 = tl.load(in_ptr0 + (14 + (2*x0) + (26*x1) + (169*x2)), xmask)
    tmp22 = tl.load(in_ptr0 + (15 + (2*x0) + (26*x1) + (169*x2)), xmask)
    tmp27 = tl.load(in_ptr0 + (26 + (2*x0) + (26*x1) + (169*x2)), xmask)
    tmp32 = tl.load(in_ptr0 + (27 + (2*x0) + (26*x1) + (169*x2)), xmask)
    tmp37 = tl.load(in_ptr0 + (28 + (2*x0) + (26*x1) + (169*x2)), xmask)
    tmp1 = (2*x0) + (26*x1)
    tmp3 = 1 + (2*x0) + (26*x1)
    tmp4 = tmp2 > tmp0
    tmp5 = tl.where(tmp4, tmp3, tmp1)
    tmp6 = tl.maximum(tmp2, tmp0)
    tmp8 = 2 + (2*x0) + (26*x1)
    tmp9 = tmp7 > tmp6
    tmp10 = tl.where(tmp9, tmp8, tmp5)
    tmp11 = tl.maximum(tmp7, tmp6)
    tmp13 = 13 + (2*x0) + (26*x1)
    tmp14 = tmp12 > tmp11
    tmp15 = tl.where(tmp14, tmp13, tmp10)
    tmp16 = tl.maximum(tmp12, tmp11)
    tmp18 = 14 + (2*x0) + (26*x1)
    tmp19 = tmp17 > tmp16
    tmp20 = tl.where(tmp19, tmp18, tmp15)
    tmp21 = tl.maximum(tmp17, tmp16)
    tmp23 = 15 + (2*x0) + (26*x1)
    tmp24 = tmp22 > tmp21
    tmp25 = tl.where(tmp24, tmp23, tmp20)
    tmp26 = tl.maximum(tmp22, tmp21)
    tmp28 = 26 + (2*x0) + (26*x1)
    tmp29 = tmp27 > tmp26
    tmp30 = tl.where(tmp29, tmp28, tmp25)
    tmp31 = tl.maximum(tmp27, tmp26)
    tmp33 = 27 + (2*x0) + (26*x1)
    tmp34 = tmp32 > tmp31
    tmp35 = tl.where(tmp34, tmp33, tmp30)
    tmp36 = tl.maximum(tmp32, tmp31)
    tmp38 = 28 + (2*x0) + (26*x1)
    tmp39 = tmp37 > tmp36
    tmp40 = tl.where(tmp39, tmp38, tmp35)
    tmp41 = tl.maximum(tmp37, tmp36)
    tl.store(out_ptr0 + (x3 + tl.zeros([XBLOCK], tl.int32)), tmp40, xmask)
''')


kernel12 = async_compile.triton('''
import triton
import triton.language as tl
from torchinductor.ir import ReductionHint
from torchinductor.triton_ops.autotune import pointwise
from torchinductor.utils import instance_descriptor

@pointwise(size_hints=[2097152], filename=__file__, meta={'signature': {0: '*i64', 1: '*i1', 2: 'i32'}, 'device': 0, 'configs': [instance_descriptor(divisible_by_16=(0, 1), equal_to_1=())], 'constants': {}})
@triton.jit
def kernel(seed0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 1179648
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.reshape(tl.arange(0, XBLOCK), [XBLOCK])
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(seed0 + (0 + tl.zeros([XBLOCK], tl.int32)), None)
    tmp1 = 65535
    tmp2 = tmp0 ^ tmp1
    tmp3 = x0
    tmp4 = tl.rand(tmp2, tmp3)
    tmp5 = 0.5
    tmp6 = tmp4 > tmp5
    tl.store(out_ptr0 + (x0 + tl.zeros([XBLOCK], tl.int32)), tmp6, xmask)
''')


kernel13 = async_compile.triton('''
import triton
import triton.language as tl
from torchinductor.ir import ReductionHint
from torchinductor.triton_ops.autotune import pointwise
from torchinductor.utils import instance_descriptor

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*i64', 1: '*i1', 2: 'i32'}, 'device': 0, 'configs': [instance_descriptor(divisible_by_16=(0, 1), equal_to_1=())], 'constants': {}})
@triton.jit
def kernel(seed0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 524288
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.reshape(tl.arange(0, XBLOCK), [XBLOCK])
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(seed0 + (0 + tl.zeros([XBLOCK], tl.int32)), None)
    tmp1 = 65535
    tmp2 = tmp0 ^ tmp1
    tmp3 = 1179648 + x0
    tmp4 = tl.rand(tmp2, tmp3)
    tmp5 = 0.5
    tmp6 = tmp4 > tmp5
    tl.store(out_ptr0 + (x0 + tl.zeros([XBLOCK], tl.int32)), tmp6, xmask)
''')


async_compile.wait(globals())
del async_compile

def call(primals_1, primals_2, primals_3, primals_4, primals_5, primals_6, primals_7, primals_8, primals_9, primals_10, primals_11, primals_12, primals_13, primals_14, primals_15, primals_16, primals_17):
    torch.randint(2**31, size=(), dtype=torch.int64, out=seed_cuda_0)
    buf0 = aten.convolution(primals_17, primals_1, None, (4, 4), (2, 2), (1, 1), False, (0, 0), 1)
    assert buf0.size() == (128, 64, 55, 55)
    assert buf0.stride() == (193600, 3025, 55, 1)
    buf1 = empty_strided((128, 64, 55, 55), (193600, 3025, 55, 1), device='cuda', dtype=torch.float32)
    stream0 = get_cuda_stream(0)
    kernel0.run(buf0, primals_2, buf1, 24780800, grid=grid(24780800), stream=stream0)
    del buf0
    buf2 = empty_strided((128, 64, 27, 27), (46656, 729, 27, 1), device='cuda', dtype=torch.float32)
    kernel1.run(buf1, buf2, 5971968, grid=grid(5971968), stream=stream0)
    buf3 = aten.convolution(buf2, primals_3, None, (1, 1), (2, 2), (1, 1), False, (0, 0), 1)
    assert buf3.size() == (128, 192, 27, 27)
    assert buf3.stride() == (139968, 729, 27, 1)
    buf4 = empty_strided((128, 192, 27, 27), (139968, 729, 27, 1), device='cuda', dtype=torch.float32)
    kernel2.run(buf3, primals_4, buf4, 17915904, grid=grid(17915904), stream=stream0)
    del buf3
    buf5 = empty_strided((128, 192, 13, 13), (32448, 169, 13, 1), device='cuda', dtype=torch.float32)
    kernel3.run(buf4, buf5, 4153344, grid=grid(4153344), stream=stream0)
    buf6 = aten.convolution(buf5, primals_5, None, (1, 1), (1, 1), (1, 1), False, (0, 0), 1)
    assert buf6.size() == (128, 384, 13, 13)
    assert buf6.stride() == (64896, 169, 13, 1)
    buf7 = empty_strided((128, 384, 13, 13), (64896, 169, 13, 1), device='cuda', dtype=torch.float32)
    kernel4.run(buf6, primals_6, buf7, 8306688, grid=grid(8306688), stream=stream0)
    del buf6
    buf8 = aten.convolution(buf7, primals_7, None, (1, 1), (1, 1), (1, 1), False, (0, 0), 1)
    assert buf8.size() == (128, 256, 13, 13)
    assert buf8.stride() == (43264, 169, 13, 1)
    buf9 = empty_strided((128, 256, 13, 13), (43264, 169, 13, 1), device='cuda', dtype=torch.float32)
    kernel5.run(buf8, primals_8, buf9, 5537792, grid=grid(5537792), stream=stream0)
    buf10 = aten.convolution(buf9, primals_9, None, (1, 1), (1, 1), (1, 1), False, (0, 0), 1)
    assert buf10.size() == (128, 256, 13, 13)
    assert buf10.stride() == (43264, 169, 13, 1)
    buf11 = buf8; del buf8  # reuse
    kernel5.run(buf10, primals_10, buf11, 5537792, grid=grid(5537792), stream=stream0)
    del buf10
    buf12 = empty_strided((128, 256, 6, 6), (9216, 36, 6, 1), device='cuda', dtype=torch.float32)
    buf13 = empty_strided((128, 9216), (9216, 1), device='cuda', dtype=torch.float32)
    kernel6.run(buf11, seed_cuda_0, buf12, buf13, 1179648, grid=grid(1179648), stream=stream0)
    buf14 = empty_strided((128, 4096), (4096, 1), device='cuda', dtype=torch.float32)
    aten.addmm.out(primals_12, buf13, as_strided(primals_11, (9216, 4096), (1, 9216)), beta=1, alpha=1, out=buf14)
    buf15 = empty_strided((128, 4096), (4096, 1), device='cuda', dtype=torch.float32)
    kernel7.run(seed_cuda_0, buf14, buf15, 524288, grid=grid(524288), stream=stream0)
    buf16 = empty_strided((128, 4096), (4096, 1), device='cuda', dtype=torch.float32)
    aten.addmm.out(primals_14, buf15, as_strided(primals_13, (4096, 4096), (1, 4096)), beta=1, alpha=1, out=buf16)
    buf17 = buf15; del buf15  # reuse
    kernel8.run(buf16, buf17, 524288, grid=grid(524288), stream=stream0)
    del buf16
    buf18 = empty_strided((128, 1000), (1000, 1), device='cuda', dtype=torch.float32)
    aten.addmm.out(primals_16, buf17, as_strided(primals_15, (4096, 1000), (1, 4096)), beta=1, alpha=1, out=buf18)
    buf19 = empty_strided((128, 64, 27, 27), (46656, 729, 27, 1), device='cuda', dtype=torch.int64)
    kernel9.run(buf1, buf19, 5971968, grid=grid(5971968), stream=stream0)
    buf20 = empty_strided((128, 192, 13, 13), (32448, 169, 13, 1), device='cuda', dtype=torch.int64)
    kernel10.run(buf4, buf20, 4153344, grid=grid(4153344), stream=stream0)
    buf21 = empty_strided((128, 256, 6, 6), (9216, 36, 6, 1), device='cuda', dtype=torch.int64)
    kernel11.run(buf11, buf21, 1179648, grid=grid(1179648), stream=stream0)
    buf22 = empty_strided((128, 9216), (9216, 1), device='cuda', dtype=torch.bool)
    kernel12.run(seed_cuda_0, buf22, 1179648, grid=grid(1179648), stream=stream0)
    buf23 = empty_strided((128, 4096), (4096, 1), device='cuda', dtype=torch.bool)
    kernel13.run(seed_cuda_0, buf23, 524288, grid=grid(524288), stream=stream0)
    return (buf18, primals_1, primals_3, primals_5, primals_7, primals_9, primals_17, buf1, buf2, buf19, buf4, buf5, buf20, buf7, buf9, buf11, buf12, buf21, buf22, buf13, buf14, buf23, buf17, as_strided(primals_15, (1000, 4096), (4096, 1)), as_strided(primals_13, (4096, 4096), (4096, 1)), as_strided(primals_11, (4096, 9216), (9216, 1)), )


if __name__ == "__main__":
    from torchdynamo.testing import rand_strided
    from torchinductor.utils import print_performance
    seed_cuda_0 = rand_strided((), (), device='cuda', dtype=torch.int64)
    primals_1 = rand_strided((64, 3, 11, 11), (363, 121, 11, 1), device='cuda', dtype=torch.float32)
    primals_2 = rand_strided((64, ), (1, ), device='cuda', dtype=torch.float32)
    primals_3 = rand_strided((192, 64, 5, 5), (1600, 25, 5, 1), device='cuda', dtype=torch.float32)
    primals_4 = rand_strided((192, ), (1, ), device='cuda', dtype=torch.float32)
    primals_5 = rand_strided((384, 192, 3, 3), (1728, 9, 3, 1), device='cuda', dtype=torch.float32)
    primals_6 = rand_strided((384, ), (1, ), device='cuda', dtype=torch.float32)
    primals_7 = rand_strided((256, 384, 3, 3), (3456, 9, 3, 1), device='cuda', dtype=torch.float32)
    primals_8 = rand_strided((256, ), (1, ), device='cuda', dtype=torch.float32)
    primals_9 = rand_strided((256, 256, 3, 3), (2304, 9, 3, 1), device='cuda', dtype=torch.float32)
    primals_10 = rand_strided((256, ), (1, ), device='cuda', dtype=torch.float32)
    primals_11 = rand_strided((4096, 9216), (9216, 1), device='cuda', dtype=torch.float32)
    primals_12 = rand_strided((4096, ), (1, ), device='cuda', dtype=torch.float32)
    primals_13 = rand_strided((4096, 4096), (4096, 1), device='cuda', dtype=torch.float32)
    primals_14 = rand_strided((4096, ), (1, ), device='cuda', dtype=torch.float32)
    primals_15 = rand_strided((1000, 4096), (4096, 1), device='cuda', dtype=torch.float32)
    primals_16 = rand_strided((1000, ), (1, ), device='cuda', dtype=torch.float32)
    primals_17 = rand_strided((128, 3, 224, 224), (150528, 50176, 224, 1), device='cuda', dtype=torch.float32)
    print_performance(lambda: call(primals_1, primals_2, primals_3, primals_4, primals_5, primals_6, primals_7, primals_8, primals_9, primals_10, primals_11, primals_12, primals_13, primals_14, primals_15, primals_16, primals_17))

opcode         name                                target                                         args                                                                                                                                                                                        kwargs
-------------  ----------------------------------  ---------------------------------------------  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  -----------------------------------------------------------------------------------------
placeholder    primals_1                           primals_1                                      ()                                                                                                                                                                                          {}
placeholder    primals_3                           primals_3                                      ()                                                                                                                                                                                          {}
placeholder    primals_5                           primals_5                                      ()                                                                                                                                                                                          {}
placeholder    primals_7                           primals_7                                      ()                                                                                                                                                                                          {}
placeholder    primals_9                           primals_9                                      ()                                                                                                                                                                                          {}
placeholder    primals_17                          primals_17                                     ()                                                                                                                                                                                          {}
placeholder    relu                                relu                                           ()                                                                                                                                                                                          {}
placeholder    getitem                             getitem                                        ()                                                                                                                                                                                          {}
placeholder    getitem_1                           getitem_1                                      ()                                                                                                                                                                                          {}
placeholder    relu_1                              relu_1                                         ()                                                                                                                                                                                          {}
placeholder    getitem_2                           getitem_2                                      ()                                                                                                                                                                                          {}
placeholder    getitem_3                           getitem_3                                      ()                                                                                                                                                                                          {}
placeholder    relu_2                              relu_2                                         ()                                                                                                                                                                                          {}
placeholder    relu_3                              relu_3                                         ()                                                                                                                                                                                          {}
placeholder    relu_4                              relu_4                                         ()                                                                                                                                                                                          {}
placeholder    getitem_4                           getitem_4                                      ()                                                                                                                                                                                          {}
placeholder    getitem_5                           getitem_5                                      ()                                                                                                                                                                                          {}
placeholder    gt                                  gt                                             ()                                                                                                                                                                                          {}
placeholder    mul_1                               mul_1                                          ()                                                                                                                                                                                          {}
placeholder    addmm                               addmm                                          ()                                                                                                                                                                                          {}
placeholder    gt_1                                gt_1                                           ()                                                                                                                                                                                          {}
placeholder    relu_6                              relu_6                                         ()                                                                                                                                                                                          {}
placeholder    permute_3                           permute_3                                      ()                                                                                                                                                                                          {}
placeholder    permute_7                           permute_7                                      ()                                                                                                                                                                                          {}
placeholder    permute_11                          permute_11                                     ()                                                                                                                                                                                          {}
placeholder    tangents_1                          tangents_1                                     ()                                                                                                                                                                                          {}
call_function  relu_5                              aten.relu.default                              (addmm,)                                                                                                                                                                                    {}
call_function  mul_2                               aten.mul.Tensor                                (gt_1, relu_5)                                                                                                                                                                              {}
call_function  mul_3                               aten.mul.Tensor                                (mul_2, 2.0)                                                                                                                                                                                {}
call_function  mm                                  aten.mm.default                                (tangents_1, permute_3)                                                                                                                                                                     {}
call_function  permute_4                           aten.permute.default                           (tangents_1, [1, 0])                                                                                                                                                                        {}
call_function  mm_1                                aten.mm.default                                (permute_4, relu_6)                                                                                                                                                                         {}
call_function  permute_5                           aten.permute.default                           (mm_1, [1, 0])                                                                                                                                                                              {}
call_function  sum_1                               aten.sum.dim_IntList                           (tangents_1, [0], True)                                                                                                                                                                     {}
call_function  view_1                              aten.view.default                              (sum_1, [1000])                                                                                                                                                                             {}
call_function  permute_6                           aten.permute.default                           (permute_5, [1, 0])                                                                                                                                                                         {}
call_function  alias_25                            aten.alias.default                             (relu_6,)                                                                                                                                                                                   {}
call_function  alias_26                            aten.alias.default                             (alias_25,)                                                                                                                                                                                 {}
call_function  alias_27                            aten.alias.default                             (alias_26,)                                                                                                                                                                                 {}
call_function  alias_28                            aten.alias.default                             (alias_27,)                                                                                                                                                                                 {}
call_function  le                                  aten.le.Scalar                                 (alias_28, 0)                                                                                                                                                                               {}
call_function  scalar_tensor                       aten.scalar_tensor.default                     (0.0,)                                                                                                                                                                                      {'dtype': torch.float32, 'layout': torch.strided, 'device': device(type='cuda', index=0)}
call_function  where                               aten.where.self                                (le, scalar_tensor, mm)                                                                                                                                                                     {}
call_function  mm_2                                aten.mm.default                                (where, permute_7)                                                                                                                                                                          {}
call_function  permute_8                           aten.permute.default                           (where, [1, 0])                                                                                                                                                                             {}
call_function  mm_3                                aten.mm.default                                (permute_8, mul_3)                                                                                                                                                                          {}
call_function  permute_9                           aten.permute.default                           (mm_3, [1, 0])                                                                                                                                                                              {}
call_function  sum_2                               aten.sum.dim_IntList                           (where, [0], True)                                                                                                                                                                          {}
call_function  view_2                              aten.view.default                              (sum_2, [4096])                                                                                                                                                                             {}
call_function  permute_10                          aten.permute.default                           (permute_9, [1, 0])                                                                                                                                                                         {}
call_function  _to_copy                            aten._to_copy.default                          (gt_1,)                                                                                                                                                                                     {'dtype': torch.float32}
call_function  mul_4                               aten.mul.Tensor                                (_to_copy, 2.0)                                                                                                                                                                             {}
call_function  mul_5                               aten.mul.Tensor                                (mm_2, mul_4)                                                                                                                                                                               {}
call_function  alias_31                            aten.alias.default                             (relu_5,)                                                                                                                                                                                   {}
call_function  alias_32                            aten.alias.default                             (alias_31,)                                                                                                                                                                                 {}
call_function  alias_33                            aten.alias.default                             (alias_32,)                                                                                                                                                                                 {}
call_function  alias_34                            aten.alias.default                             (alias_33,)                                                                                                                                                                                 {}
call_function  le_1                                aten.le.Scalar                                 (alias_34, 0)                                                                                                                                                                               {}
call_function  where_1                             aten.where.self                                (le_1, scalar_tensor, mul_5)                                                                                                                                                                {}
call_function  mm_4                                aten.mm.default                                (where_1, permute_11)                                                                                                                                                                       {}
call_function  permute_12                          aten.permute.default                           (where_1, [1, 0])                                                                                                                                                                           {}
call_function  mm_5                                aten.mm.default                                (permute_12, mul_1)                                                                                                                                                                         {}
call_function  permute_13                          aten.permute.default                           (mm_5, [1, 0])                                                                                                                                                                              {}
call_function  sum_3                               aten.sum.dim_IntList                           (where_1, [0], True)                                                                                                                                                                        {}
call_function  view_3                              aten.view.default                              (sum_3, [4096])                                                                                                                                                                             {}
call_function  permute_14                          aten.permute.default                           (permute_13, [1, 0])                                                                                                                                                                        {}
call_function  _to_copy_1                          aten._to_copy.default                          (gt,)                                                                                                                                                                                       {'dtype': torch.float32}
call_function  mul_6                               aten.mul.Tensor                                (_to_copy_1, 2.0)                                                                                                                                                                           {}
call_function  mul_7                               aten.mul.Tensor                                (mm_4, mul_6)                                                                                                                                                                               {}
call_function  view_4                              aten.view.default                              (mul_7, [128, 256, 6, 6])                                                                                                                                                                   {}
call_function  _adaptive_avg_pool2d_backward       aten._adaptive_avg_pool2d_backward.default     (view_4, getitem_4)                                                                                                                                                                         {}
call_function  max_pool2d_with_indices_backward    aten.max_pool2d_with_indices_backward.default  (_adaptive_avg_pool2d_backward, relu_4, [3, 3], [2, 2], [0, 0], [1, 1], False, getitem_5)                                                                                                   {}
call_function  alias_37                            aten.alias.default                             (relu_4,)                                                                                                                                                                                   {}
call_function  alias_38                            aten.alias.default                             (alias_37,)                                                                                                                                                                                 {}
call_function  alias_39                            aten.alias.default                             (alias_38,)                                                                                                                                                                                 {}
call_function  alias_40                            aten.alias.default                             (alias_39,)                                                                                                                                                                                 {}
call_function  le_2                                aten.le.Scalar                                 (alias_40, 0)                                                                                                                                                                               {}
call_function  where_2                             aten.where.self                                (le_2, scalar_tensor, max_pool2d_with_indices_backward)                                                                                                                                     {}
call_function  convolution_backward                aten.convolution_backward.default              (where_2, relu_3, primals_9, [256], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, True])                                                                                           {}
call_function  getitem_6                           <built-in function getitem>                    (convolution_backward, 0)                                                                                                                                                                   {}
call_function  getitem_7                           <built-in function getitem>                    (convolution_backward, 1)                                                                                                                                                                   {}
call_function  getitem_8                           <built-in function getitem>                    (convolution_backward, 2)                                                                                                                                                                   {}
call_function  alias_43                            aten.alias.default                             (relu_3,)                                                                                                                                                                                   {}
call_function  alias_44                            aten.alias.default                             (alias_43,)                                                                                                                                                                                 {}
call_function  alias_45                            aten.alias.default                             (alias_44,)                                                                                                                                                                                 {}
call_function  alias_46                            aten.alias.default                             (alias_45,)                                                                                                                                                                                 {}
call_function  le_3                                aten.le.Scalar                                 (alias_46, 0)                                                                                                                                                                               {}
call_function  where_3                             aten.where.self                                (le_3, scalar_tensor, getitem_6)                                                                                                                                                            {}
call_function  convolution_backward_1              aten.convolution_backward.default              (where_3, relu_2, primals_7, [256], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, True])                                                                                           {}
call_function  getitem_9                           <built-in function getitem>                    (convolution_backward_1, 0)                                                                                                                                                                 {}
call_function  getitem_10                          <built-in function getitem>                    (convolution_backward_1, 1)                                                                                                                                                                 {}
call_function  getitem_11                          <built-in function getitem>                    (convolution_backward_1, 2)                                                                                                                                                                 {}
call_function  alias_49                            aten.alias.default                             (relu_2,)                                                                                                                                                                                   {}
call_function  alias_50                            aten.alias.default                             (alias_49,)                                                                                                                                                                                 {}
call_function  alias_51                            aten.alias.default                             (alias_50,)                                                                                                                                                                                 {}
call_function  alias_52                            aten.alias.default                             (alias_51,)                                                                                                                                                                                 {}
call_function  le_4                                aten.le.Scalar                                 (alias_52, 0)                                                                                                                                                                               {}
call_function  where_4                             aten.where.self                                (le_4, scalar_tensor, getitem_9)                                                                                                                                                            {}
call_function  convolution_backward_2              aten.convolution_backward.default              (where_4, getitem_2, primals_5, [384], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, True])                                                                                        {}
call_function  getitem_12                          <built-in function getitem>                    (convolution_backward_2, 0)                                                                                                                                                                 {}
call_function  getitem_13                          <built-in function getitem>                    (convolution_backward_2, 1)                                                                                                                                                                 {}
call_function  getitem_14                          <built-in function getitem>                    (convolution_backward_2, 2)                                                                                                                                                                 {}
call_function  max_pool2d_with_indices_backward_1  aten.max_pool2d_with_indices_backward.default  (getitem_12, relu_1, [3, 3], [2, 2], [0, 0], [1, 1], False, getitem_3)                                                                                                                      {}
call_function  alias_55                            aten.alias.default                             (relu_1,)                                                                                                                                                                                   {}
call_function  alias_56                            aten.alias.default                             (alias_55,)                                                                                                                                                                                 {}
call_function  alias_57                            aten.alias.default                             (alias_56,)                                                                                                                                                                                 {}
call_function  alias_58                            aten.alias.default                             (alias_57,)                                                                                                                                                                                 {}
call_function  le_5                                aten.le.Scalar                                 (alias_58, 0)                                                                                                                                                                               {}
call_function  where_5                             aten.where.self                                (le_5, scalar_tensor, max_pool2d_with_indices_backward_1)                                                                                                                                   {}
call_function  convolution_backward_3              aten.convolution_backward.default              (where_5, getitem, primals_3, [192], [1, 1], [2, 2], [1, 1], False, [0, 0], 1, [True, True, True])                                                                                          {}
call_function  getitem_15                          <built-in function getitem>                    (convolution_backward_3, 0)                                                                                                                                                                 {}
call_function  getitem_16                          <built-in function getitem>                    (convolution_backward_3, 1)                                                                                                                                                                 {}
call_function  getitem_17                          <built-in function getitem>                    (convolution_backward_3, 2)                                                                                                                                                                 {}
call_function  max_pool2d_with_indices_backward_2  aten.max_pool2d_with_indices_backward.default  (getitem_15, relu, [3, 3], [2, 2], [0, 0], [1, 1], False, getitem_1)                                                                                                                        {}
call_function  alias_61                            aten.alias.default                             (relu,)                                                                                                                                                                                     {}
call_function  alias_62                            aten.alias.default                             (alias_61,)                                                                                                                                                                                 {}
call_function  alias_63                            aten.alias.default                             (alias_62,)                                                                                                                                                                                 {}
call_function  alias_64                            aten.alias.default                             (alias_63,)                                                                                                                                                                                 {}
call_function  le_6                                aten.le.Scalar                                 (alias_64, 0)                                                                                                                                                                               {}
call_function  where_6                             aten.where.self                                (le_6, scalar_tensor, max_pool2d_with_indices_backward_2)                                                                                                                                   {}
call_function  convolution_backward_4              aten.convolution_backward.default              (where_6, primals_17, primals_1, [64], [4, 4], [2, 2], [1, 1], False, [0, 0], 1, [False, True, True])                                                                                       {}
call_function  getitem_19                          <built-in function getitem>                    (convolution_backward_4, 1)                                                                                                                                                                 {}
call_function  getitem_20                          <built-in function getitem>                    (convolution_backward_4, 2)                                                                                                                                                                 {}
output         output                              output                                         ([getitem_19, getitem_20, getitem_16, getitem_17, getitem_13, getitem_14, getitem_10, getitem_11, getitem_7, getitem_8, permute_14, view_3, permute_10, view_2, permute_6, view_1, None],)  {}
==========IR inputs===========
{'primals_1': TensorBox(StorageBox(
  InputBuffer(name='primals_1', layout=FixedLayout('cuda', torch.float32, size=[64, 3, 11, 11], stride=[363, 121, 11, 1]))
)), 'primals_3': TensorBox(StorageBox(
  InputBuffer(name='primals_3', layout=FixedLayout('cuda', torch.float32, size=[192, 64, 5, 5], stride=[1600, 25, 5, 1]))
)), 'primals_5': TensorBox(StorageBox(
  InputBuffer(name='primals_5', layout=FixedLayout('cuda', torch.float32, size=[384, 192, 3, 3], stride=[1728, 9, 3, 1]))
)), 'primals_7': TensorBox(StorageBox(
  InputBuffer(name='primals_7', layout=FixedLayout('cuda', torch.float32, size=[256, 384, 3, 3], stride=[3456, 9, 3, 1]))
)), 'primals_9': TensorBox(StorageBox(
  InputBuffer(name='primals_9', layout=FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1]))
)), 'primals_17': TensorBox(StorageBox(
  InputBuffer(name='primals_17', layout=FixedLayout('cuda', torch.float32, size=[128, 3, 224, 224], stride=[150528, 50176, 224, 1]))
)), 'relu': TensorBox(StorageBox(
  InputBuffer(name='relu', layout=FixedLayout('cuda', torch.float32, size=[128, 64, 55, 55], stride=[193600, 3025, 55, 1]))
)), 'getitem': TensorBox(StorageBox(
  InputBuffer(name='getitem', layout=FixedLayout('cuda', torch.float32, size=[128, 64, 27, 27], stride=[46656, 729, 27, 1]))
)), 'getitem_1': TensorBox(StorageBox(
  InputBuffer(name='getitem_1', layout=FixedLayout('cuda', torch.int64, size=[128, 64, 27, 27], stride=[46656, 729, 27, 1]))
)), 'relu_1': TensorBox(StorageBox(
  InputBuffer(name='relu_1', layout=FixedLayout('cuda', torch.float32, size=[128, 192, 27, 27], stride=[139968, 729, 27, 1]))
)), 'getitem_2': TensorBox(StorageBox(
  InputBuffer(name='getitem_2', layout=FixedLayout('cuda', torch.float32, size=[128, 192, 13, 13], stride=[32448, 169, 13, 1]))
)), 'getitem_3': TensorBox(StorageBox(
  InputBuffer(name='getitem_3', layout=FixedLayout('cuda', torch.int64, size=[128, 192, 13, 13], stride=[32448, 169, 13, 1]))
)), 'relu_2': TensorBox(StorageBox(
  InputBuffer(name='relu_2', layout=FixedLayout('cuda', torch.float32, size=[128, 384, 13, 13], stride=[64896, 169, 13, 1]))
)), 'relu_3': TensorBox(StorageBox(
  InputBuffer(name='relu_3', layout=FixedLayout('cuda', torch.float32, size=[128, 256, 13, 13], stride=[43264, 169, 13, 1]))
)), 'relu_4': TensorBox(StorageBox(
  InputBuffer(name='relu_4', layout=FixedLayout('cuda', torch.float32, size=[128, 256, 13, 13], stride=[43264, 169, 13, 1]))
)), 'getitem_4': TensorBox(StorageBox(
  InputBuffer(name='getitem_4', layout=FixedLayout('cuda', torch.float32, size=[128, 256, 6, 6], stride=[9216, 36, 6, 1]))
)), 'getitem_5': TensorBox(StorageBox(
  InputBuffer(name='getitem_5', layout=FixedLayout('cuda', torch.int64, size=[128, 256, 6, 6], stride=[9216, 36, 6, 1]))
)), 'gt': TensorBox(StorageBox(
  InputBuffer(name='gt', layout=FixedLayout('cuda', torch.bool, size=[128, 9216], stride=[9216, 1]))
)), 'mul_1': TensorBox(StorageBox(
  InputBuffer(name='mul_1', layout=FixedLayout('cuda', torch.float32, size=[128, 9216], stride=[9216, 1]))
)), 'addmm': TensorBox(StorageBox(
  InputBuffer(name='addmm', layout=FixedLayout('cuda', torch.float32, size=[128, 4096], stride=[4096, 1]))
)), 'gt_1': TensorBox(StorageBox(
  InputBuffer(name='gt_1', layout=FixedLayout('cuda', torch.bool, size=[128, 4096], stride=[4096, 1]))
)), 'relu_6': TensorBox(StorageBox(
  InputBuffer(name='relu_6', layout=FixedLayout('cuda', torch.float32, size=[128, 4096], stride=[4096, 1]))
)), 'permute_3': TensorBox(StorageBox(
  InputBuffer(name='permute_3', layout=FixedLayout('cuda', torch.float32, size=[1000, 4096], stride=[4096, 1]))
)), 'permute_7': TensorBox(StorageBox(
  InputBuffer(name='permute_7', layout=FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1]))
)), 'permute_11': TensorBox(StorageBox(
  InputBuffer(name='permute_11', layout=FixedLayout('cuda', torch.float32, size=[4096, 9216], stride=[9216, 1]))
)), 'tangents_1': TensorBox(StorageBox(
  InputBuffer(name='tangents_1', layout=FixedLayout('cuda', torch.float32, size=[128, 1000], stride=[1000, 1]))
))}
==========IR buffers==========
[MatrixMultiply(name='buf0', layout=FixedLayout('cuda', torch.float32, size=[128, 4096], stride=[4096, 1]), inputs=[InputBuffer(name='tangents_1', layout=FixedLayout('cuda', torch.float32, size=[128, 1000], stride=[1000, 1])), InputBuffer(name='permute_3', layout=FixedLayout('cuda', torch.float32, size=[1000, 4096], stride=[4096, 1]))], constant_args=(), kwargs=None, output_view=None), MatrixMultiply(name='buf1', layout=FixedLayout('cuda', torch.float32, size=[1000, 4096], stride=[4096, 1]), inputs=[ReinterpretView(
  StorageBox(
    InputBuffer(name='tangents_1', layout=FixedLayout('cuda', torch.float32, size=[128, 1000], stride=[1000, 1]))
  ),
  FixedLayout('cuda', torch.float32, size=[1000, 128], stride=[1, 1000]),
  origins={permute_4}
), InputBuffer(name='relu_6', layout=FixedLayout('cuda', torch.float32, size=[128, 4096], stride=[4096, 1]))], constant_args=(), kwargs=None, output_view=None), ComputedBuffer(name='buf2', layout=FixedLayout('cuda', torch.float32, size=[1, 1000], stride=[1000, 1]), data=Reduction(
  'cuda',
  torch.float32,
  load(tangents_1, i1 + 1000 * r0),
  ranges=[1, 1000],
  reduction_ranges=[128],
  reduction_type=sum,
  origins={sum_1}
)), ComputedBuffer(name='buf3', layout=FixedLayout('cuda', torch.float32, size=[128, 4096], stride=[4096, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  where(load(relu_6, i1 + 4096 * i0) <= constant(0, torch.float32), constant(0.0, torch.float32), load(buf0, i1 + 4096 * i0)),
  ranges=[128, 4096],
  origins={where}
)), MatrixMultiply(name='buf4', layout=FixedLayout('cuda', torch.float32, size=[128, 4096], stride=[4096, 1]), inputs=[ComputedBuffer(name='buf3', layout=FixedLayout('cuda', torch.float32, size=[128, 4096], stride=[4096, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  where(load(relu_6, i1 + 4096 * i0) <= constant(0, torch.float32), constant(0.0, torch.float32), load(buf0, i1 + 4096 * i0)),
  ranges=[128, 4096],
  origins={where}
)), InputBuffer(name='permute_7', layout=FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1]))], constant_args=(), kwargs=None, output_view=None), ComputedBuffer(name='buf5', layout=FixedLayout('cuda', torch.float32, size=[128, 4096], stride=[4096, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  to_dtype(load(gt_1, i1 + 4096 * i0), torch.float32) * relu(load(addmm, i1 + 4096 * i0)) * constant(2.0, torch.float32),
  ranges=[128, 4096],
  origins={mul_3}
)), MatrixMultiply(name='buf6', layout=FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1]), inputs=[ReinterpretView(
  StorageBox(
    ComputedBuffer(name='buf3', layout=FixedLayout('cuda', torch.float32, size=[128, 4096], stride=[4096, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      where(load(relu_6, i1 + 4096 * i0) <= constant(0, torch.float32), constant(0.0, torch.float32), load(buf0, i1 + 4096 * i0)),
      ranges=[128, 4096],
      origins={where}
    ))
  ),
  FixedLayout('cuda', torch.float32, size=[4096, 128], stride=[1, 4096]),
  origins={permute_8}
), ComputedBuffer(name='buf5', layout=FixedLayout('cuda', torch.float32, size=[128, 4096], stride=[4096, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  to_dtype(load(gt_1, i1 + 4096 * i0), torch.float32) * relu(load(addmm, i1 + 4096 * i0)) * constant(2.0, torch.float32),
  ranges=[128, 4096],
  origins={mul_3}
))], constant_args=(), kwargs=None, output_view=None), ComputedBuffer(name='buf7', layout=FixedLayout('cuda', torch.float32, size=[1, 4096], stride=[4096, 1]), data=Reduction(
  'cuda',
  torch.float32,
  load(buf3, i1 + 4096 * r0),
  ranges=[1, 4096],
  reduction_ranges=[128],
  reduction_type=sum,
  origins={sum_2}
)), ComputedBuffer(name='buf8', layout=FixedLayout('cuda', torch.float32, size=[128, 4096], stride=[4096, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  where(relu(load(addmm, i1 + 4096 * i0)) <= constant(0, torch.float32), constant(0.0, torch.float32), load(buf4, i1 + 4096 * i0) * to_dtype(load(gt_1, i1 + 4096 * i0), torch.float32) * constant(2.0, torch.float32)),
  ranges=[128, 4096],
  origins={where_1}
)), MatrixMultiply(name='buf9', layout=FixedLayout('cuda', torch.float32, size=[128, 9216], stride=[9216, 1]), inputs=[ComputedBuffer(name='buf8', layout=FixedLayout('cuda', torch.float32, size=[128, 4096], stride=[4096, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  where(relu(load(addmm, i1 + 4096 * i0)) <= constant(0, torch.float32), constant(0.0, torch.float32), load(buf4, i1 + 4096 * i0) * to_dtype(load(gt_1, i1 + 4096 * i0), torch.float32) * constant(2.0, torch.float32)),
  ranges=[128, 4096],
  origins={where_1}
)), InputBuffer(name='permute_11', layout=FixedLayout('cuda', torch.float32, size=[4096, 9216], stride=[9216, 1]))], constant_args=(), kwargs=None, output_view=None), MatrixMultiply(name='buf10', layout=FixedLayout('cuda', torch.float32, size=[4096, 9216], stride=[9216, 1]), inputs=[ReinterpretView(
  StorageBox(
    ComputedBuffer(name='buf8', layout=FixedLayout('cuda', torch.float32, size=[128, 4096], stride=[4096, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      where(relu(load(addmm, i1 + 4096 * i0)) <= constant(0, torch.float32), constant(0.0, torch.float32), load(buf4, i1 + 4096 * i0) * to_dtype(load(gt_1, i1 + 4096 * i0), torch.float32) * constant(2.0, torch.float32)),
      ranges=[128, 4096],
      origins={where_1}
    ))
  ),
  FixedLayout('cuda', torch.float32, size=[4096, 128], stride=[1, 4096]),
  origins={permute_12}
), InputBuffer(name='mul_1', layout=FixedLayout('cuda', torch.float32, size=[128, 9216], stride=[9216, 1]))], constant_args=(), kwargs=None, output_view=None), ComputedBuffer(name='buf11', layout=FixedLayout('cuda', torch.float32, size=[1, 4096], stride=[4096, 1]), data=Reduction(
  'cuda',
  torch.float32,
  load(buf8, i1 + 4096 * r0),
  ranges=[1, 4096],
  reduction_ranges=[128],
  reduction_type=sum,
  origins={sum_3}
)), ComputedBuffer(name='buf12', layout=FixedLayout('cuda', torch.float32, size=[128, 9216], stride=[9216, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  load(buf9, i1 + 9216 * i0) * to_dtype(load(gt, i1 + 9216 * i0), torch.float32) * constant(2.0, torch.float32),
  ranges=[128, 9216],
  origins={mul_7}
)), FallbackKernel(name='buf13', layout=FixedLayout('cuda', torch.float32, size=[128, 256, 6, 6], stride=[9216, 36, 6, 1]), inputs=[ReinterpretView(
  StorageBox(
    ComputedBuffer(name='buf12', layout=FixedLayout('cuda', torch.float32, size=[128, 9216], stride=[9216, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      load(buf9, i1 + 9216 * i0) * to_dtype(load(gt, i1 + 9216 * i0), torch.float32) * constant(2.0, torch.float32),
      ranges=[128, 9216],
      origins={mul_7}
    ))
  ),
  FixedLayout('cuda', torch.float32, size=(128, 256, 6, 6), stride=[9216, 36, 6, 1]),
  origins={_adaptive_avg_pool2d_backward}
), InputBuffer(name='getitem_4', layout=FixedLayout('cuda', torch.float32, size=[128, 256, 6, 6], stride=[9216, 36, 6, 1]))], constant_args=(), kwargs={}, output_view=None), ComputedBuffer(name='buf14', layout=FixedLayout('cuda', torch.float32, size=[128, 256, 13, 13], stride=[43264, 169, 13, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  where(load(relu_4, i3 + 13 * i2 + 169 * i1 + 43264 * i0) <= constant(0, torch.float32), constant(0.0, torch.float32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) & load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) & load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) & load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32)) + load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32))) + load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) & load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32)) + load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32)))) + load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) & load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) & load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32)) + load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32))) + load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) & load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32)) + load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32)))))),
  ranges=[128, 256, 13, 13],
  origins={where_2}
)), FallbackKernel(name='buf15', layout=MultiOutputLayout(device=device(type='cuda', index=0)), inputs=[ComputedBuffer(name='buf14', layout=FixedLayout('cuda', torch.float32, size=[128, 256, 13, 13], stride=[43264, 169, 13, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  where(load(relu_4, i3 + 13 * i2 + 169 * i1 + 43264 * i0) <= constant(0, torch.float32), constant(0.0, torch.float32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) & load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) & load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) & load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32)) + load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32))) + load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) & load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32)) + load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32)))) + load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) & load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) & load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32)) + load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32))) + load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) & load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32)) + load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32)))))),
  ranges=[128, 256, 13, 13],
  origins={where_2}
)), InputBuffer(name='relu_3', layout=FixedLayout('cuda', torch.float32, size=[128, 256, 13, 13], stride=[43264, 169, 13, 1])), InputBuffer(name='primals_9', layout=FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1]))], constant_args=(256, 1, 1, 1, 1, 1, 1, False, 0, 0, 1, True, True, True), kwargs={}, output_view=None), MultiOutput(name='buf16', layout=FixedLayout('cuda', torch.float32, size=[128, 256, 13, 13], stride=[43264, 169, 13, 1]), inputs=[FallbackKernel(name='buf15', layout=MultiOutputLayout(device=device(type='cuda', index=0)), inputs=[ComputedBuffer(name='buf14', layout=FixedLayout('cuda', torch.float32, size=[128, 256, 13, 13], stride=[43264, 169, 13, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  where(load(relu_4, i3 + 13 * i2 + 169 * i1 + 43264 * i0) <= constant(0, torch.float32), constant(0.0, torch.float32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) & load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) & load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) & load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32)) + load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32))) + load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) & load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32)) + load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32)))) + load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) & load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) & load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32)) + load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32))) + load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) & load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32)) + load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32)))))),
  ranges=[128, 256, 13, 13],
  origins={where_2}
)), InputBuffer(name='relu_3', layout=FixedLayout('cuda', torch.float32, size=[128, 256, 13, 13], stride=[43264, 169, 13, 1])), InputBuffer(name='primals_9', layout=FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1]))], constant_args=(256, 1, 1, 1, 1, 1, 1, False, 0, 0, 1, True, True, True), kwargs={}, output_view=None)], constant_args=(), kwargs={}, output_view=None), MultiOutput(name='buf17', layout=FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1]), inputs=[FallbackKernel(name='buf15', layout=MultiOutputLayout(device=device(type='cuda', index=0)), inputs=[ComputedBuffer(name='buf14', layout=FixedLayout('cuda', torch.float32, size=[128, 256, 13, 13], stride=[43264, 169, 13, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  where(load(relu_4, i3 + 13 * i2 + 169 * i1 + 43264 * i0) <= constant(0, torch.float32), constant(0.0, torch.float32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) & load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) & load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) & load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32)) + load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32))) + load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) & load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32)) + load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32)))) + load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) & load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) & load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32)) + load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32))) + load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) & load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32)) + load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32)))))),
  ranges=[128, 256, 13, 13],
  origins={where_2}
)), InputBuffer(name='relu_3', layout=FixedLayout('cuda', torch.float32, size=[128, 256, 13, 13], stride=[43264, 169, 13, 1])), InputBuffer(name='primals_9', layout=FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1]))], constant_args=(256, 1, 1, 1, 1, 1, 1, False, 0, 0, 1, True, True, True), kwargs={}, output_view=None)], constant_args=(), kwargs={}, output_view=None), MultiOutput(name='buf18', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]), inputs=[FallbackKernel(name='buf15', layout=MultiOutputLayout(device=device(type='cuda', index=0)), inputs=[ComputedBuffer(name='buf14', layout=FixedLayout('cuda', torch.float32, size=[128, 256, 13, 13], stride=[43264, 169, 13, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  where(load(relu_4, i3 + 13 * i2 + 169 * i1 + 43264 * i0) <= constant(0, torch.float32), constant(0.0, torch.float32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) & load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) & load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) & load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32)) + load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32))) + load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) & load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32)) + load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32)))) + load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) & load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) & load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32)) + load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32))) + load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) & load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32)) + load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32)))))),
  ranges=[128, 256, 13, 13],
  origins={where_2}
)), InputBuffer(name='relu_3', layout=FixedLayout('cuda', torch.float32, size=[128, 256, 13, 13], stride=[43264, 169, 13, 1])), InputBuffer(name='primals_9', layout=FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1]))], constant_args=(256, 1, 1, 1, 1, 1, 1, False, 0, 0, 1, True, True, True), kwargs={}, output_view=None)], constant_args=(), kwargs={}, output_view=None), ComputedBuffer(name='buf19', layout=FixedLayout('cuda', torch.float32, size=[128, 256, 13, 13], stride=[43264, 169, 13, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  where(load(relu_3, i3 + 13 * i2 + 169 * i1 + 43264 * i0) <= constant(0, torch.float32), constant(0.0, torch.float32), load(buf16, i3 + 13 * i2 + 169 * i1 + 43264 * i0)),
  ranges=[128, 256, 13, 13],
  origins={where_3}
)), FallbackKernel(name='buf20', layout=MultiOutputLayout(device=device(type='cuda', index=0)), inputs=[ComputedBuffer(name='buf19', layout=FixedLayout('cuda', torch.float32, size=[128, 256, 13, 13], stride=[43264, 169, 13, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  where(load(relu_3, i3 + 13 * i2 + 169 * i1 + 43264 * i0) <= constant(0, torch.float32), constant(0.0, torch.float32), load(buf16, i3 + 13 * i2 + 169 * i1 + 43264 * i0)),
  ranges=[128, 256, 13, 13],
  origins={where_3}
)), InputBuffer(name='relu_2', layout=FixedLayout('cuda', torch.float32, size=[128, 384, 13, 13], stride=[64896, 169, 13, 1])), InputBuffer(name='primals_7', layout=FixedLayout('cuda', torch.float32, size=[256, 384, 3, 3], stride=[3456, 9, 3, 1]))], constant_args=(256, 1, 1, 1, 1, 1, 1, False, 0, 0, 1, True, True, True), kwargs={}, output_view=None), MultiOutput(name='buf21', layout=FixedLayout('cuda', torch.float32, size=[128, 384, 13, 13], stride=[64896, 169, 13, 1]), inputs=[FallbackKernel(name='buf20', layout=MultiOutputLayout(device=device(type='cuda', index=0)), inputs=[ComputedBuffer(name='buf19', layout=FixedLayout('cuda', torch.float32, size=[128, 256, 13, 13], stride=[43264, 169, 13, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  where(load(relu_3, i3 + 13 * i2 + 169 * i1 + 43264 * i0) <= constant(0, torch.float32), constant(0.0, torch.float32), load(buf16, i3 + 13 * i2 + 169 * i1 + 43264 * i0)),
  ranges=[128, 256, 13, 13],
  origins={where_3}
)), InputBuffer(name='relu_2', layout=FixedLayout('cuda', torch.float32, size=[128, 384, 13, 13], stride=[64896, 169, 13, 1])), InputBuffer(name='primals_7', layout=FixedLayout('cuda', torch.float32, size=[256, 384, 3, 3], stride=[3456, 9, 3, 1]))], constant_args=(256, 1, 1, 1, 1, 1, 1, False, 0, 0, 1, True, True, True), kwargs={}, output_view=None)], constant_args=(), kwargs={}, output_view=None), MultiOutput(name='buf22', layout=FixedLayout('cuda', torch.float32, size=[256, 384, 3, 3], stride=[3456, 9, 3, 1]), inputs=[FallbackKernel(name='buf20', layout=MultiOutputLayout(device=device(type='cuda', index=0)), inputs=[ComputedBuffer(name='buf19', layout=FixedLayout('cuda', torch.float32, size=[128, 256, 13, 13], stride=[43264, 169, 13, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  where(load(relu_3, i3 + 13 * i2 + 169 * i1 + 43264 * i0) <= constant(0, torch.float32), constant(0.0, torch.float32), load(buf16, i3 + 13 * i2 + 169 * i1 + 43264 * i0)),
  ranges=[128, 256, 13, 13],
  origins={where_3}
)), InputBuffer(name='relu_2', layout=FixedLayout('cuda', torch.float32, size=[128, 384, 13, 13], stride=[64896, 169, 13, 1])), InputBuffer(name='primals_7', layout=FixedLayout('cuda', torch.float32, size=[256, 384, 3, 3], stride=[3456, 9, 3, 1]))], constant_args=(256, 1, 1, 1, 1, 1, 1, False, 0, 0, 1, True, True, True), kwargs={}, output_view=None)], constant_args=(), kwargs={}, output_view=None), MultiOutput(name='buf23', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]), inputs=[FallbackKernel(name='buf20', layout=MultiOutputLayout(device=device(type='cuda', index=0)), inputs=[ComputedBuffer(name='buf19', layout=FixedLayout('cuda', torch.float32, size=[128, 256, 13, 13], stride=[43264, 169, 13, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  where(load(relu_3, i3 + 13 * i2 + 169 * i1 + 43264 * i0) <= constant(0, torch.float32), constant(0.0, torch.float32), load(buf16, i3 + 13 * i2 + 169 * i1 + 43264 * i0)),
  ranges=[128, 256, 13, 13],
  origins={where_3}
)), InputBuffer(name='relu_2', layout=FixedLayout('cuda', torch.float32, size=[128, 384, 13, 13], stride=[64896, 169, 13, 1])), InputBuffer(name='primals_7', layout=FixedLayout('cuda', torch.float32, size=[256, 384, 3, 3], stride=[3456, 9, 3, 1]))], constant_args=(256, 1, 1, 1, 1, 1, 1, False, 0, 0, 1, True, True, True), kwargs={}, output_view=None)], constant_args=(), kwargs={}, output_view=None), ComputedBuffer(name='buf24', layout=FixedLayout('cuda', torch.float32, size=[128, 384, 13, 13], stride=[64896, 169, 13, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  where(load(relu_2, i3 + 13 * i2 + 169 * i1 + 64896 * i0) <= constant(0, torch.float32), constant(0.0, torch.float32), load(buf21, i3 + 13 * i2 + 169 * i1 + 64896 * i0)),
  ranges=[128, 384, 13, 13],
  origins={where_4}
)), FallbackKernel(name='buf25', layout=MultiOutputLayout(device=device(type='cuda', index=0)), inputs=[ComputedBuffer(name='buf24', layout=FixedLayout('cuda', torch.float32, size=[128, 384, 13, 13], stride=[64896, 169, 13, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  where(load(relu_2, i3 + 13 * i2 + 169 * i1 + 64896 * i0) <= constant(0, torch.float32), constant(0.0, torch.float32), load(buf21, i3 + 13 * i2 + 169 * i1 + 64896 * i0)),
  ranges=[128, 384, 13, 13],
  origins={where_4}
)), InputBuffer(name='getitem_2', layout=FixedLayout('cuda', torch.float32, size=[128, 192, 13, 13], stride=[32448, 169, 13, 1])), InputBuffer(name='primals_5', layout=FixedLayout('cuda', torch.float32, size=[384, 192, 3, 3], stride=[1728, 9, 3, 1]))], constant_args=(384, 1, 1, 1, 1, 1, 1, False, 0, 0, 1, True, True, True), kwargs={}, output_view=None), MultiOutput(name='buf26', layout=FixedLayout('cuda', torch.float32, size=[128, 192, 13, 13], stride=[32448, 169, 13, 1]), inputs=[FallbackKernel(name='buf25', layout=MultiOutputLayout(device=device(type='cuda', index=0)), inputs=[ComputedBuffer(name='buf24', layout=FixedLayout('cuda', torch.float32, size=[128, 384, 13, 13], stride=[64896, 169, 13, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  where(load(relu_2, i3 + 13 * i2 + 169 * i1 + 64896 * i0) <= constant(0, torch.float32), constant(0.0, torch.float32), load(buf21, i3 + 13 * i2 + 169 * i1 + 64896 * i0)),
  ranges=[128, 384, 13, 13],
  origins={where_4}
)), InputBuffer(name='getitem_2', layout=FixedLayout('cuda', torch.float32, size=[128, 192, 13, 13], stride=[32448, 169, 13, 1])), InputBuffer(name='primals_5', layout=FixedLayout('cuda', torch.float32, size=[384, 192, 3, 3], stride=[1728, 9, 3, 1]))], constant_args=(384, 1, 1, 1, 1, 1, 1, False, 0, 0, 1, True, True, True), kwargs={}, output_view=None)], constant_args=(), kwargs={}, output_view=None), MultiOutput(name='buf27', layout=FixedLayout('cuda', torch.float32, size=[384, 192, 3, 3], stride=[1728, 9, 3, 1]), inputs=[FallbackKernel(name='buf25', layout=MultiOutputLayout(device=device(type='cuda', index=0)), inputs=[ComputedBuffer(name='buf24', layout=FixedLayout('cuda', torch.float32, size=[128, 384, 13, 13], stride=[64896, 169, 13, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  where(load(relu_2, i3 + 13 * i2 + 169 * i1 + 64896 * i0) <= constant(0, torch.float32), constant(0.0, torch.float32), load(buf21, i3 + 13 * i2 + 169 * i1 + 64896 * i0)),
  ranges=[128, 384, 13, 13],
  origins={where_4}
)), InputBuffer(name='getitem_2', layout=FixedLayout('cuda', torch.float32, size=[128, 192, 13, 13], stride=[32448, 169, 13, 1])), InputBuffer(name='primals_5', layout=FixedLayout('cuda', torch.float32, size=[384, 192, 3, 3], stride=[1728, 9, 3, 1]))], constant_args=(384, 1, 1, 1, 1, 1, 1, False, 0, 0, 1, True, True, True), kwargs={}, output_view=None)], constant_args=(), kwargs={}, output_view=None), MultiOutput(name='buf28', layout=FixedLayout('cuda', torch.float32, size=[384], stride=[1]), inputs=[FallbackKernel(name='buf25', layout=MultiOutputLayout(device=device(type='cuda', index=0)), inputs=[ComputedBuffer(name='buf24', layout=FixedLayout('cuda', torch.float32, size=[128, 384, 13, 13], stride=[64896, 169, 13, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  where(load(relu_2, i3 + 13 * i2 + 169 * i1 + 64896 * i0) <= constant(0, torch.float32), constant(0.0, torch.float32), load(buf21, i3 + 13 * i2 + 169 * i1 + 64896 * i0)),
  ranges=[128, 384, 13, 13],
  origins={where_4}
)), InputBuffer(name='getitem_2', layout=FixedLayout('cuda', torch.float32, size=[128, 192, 13, 13], stride=[32448, 169, 13, 1])), InputBuffer(name='primals_5', layout=FixedLayout('cuda', torch.float32, size=[384, 192, 3, 3], stride=[1728, 9, 3, 1]))], constant_args=(384, 1, 1, 1, 1, 1, 1, False, 0, 0, 1, True, True, True), kwargs={}, output_view=None)], constant_args=(), kwargs={}, output_view=None), ComputedBuffer(name='buf29', layout=FixedLayout('cuda', torch.float32, size=[128, 192, 27, 27], stride=[139968, 729, 27, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  where(load(relu_1, i3 + 27 * i2 + 729 * i1 + 139968 * i0) <= constant(0, torch.float32), constant(0.0, torch.float32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) & load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) & load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) & load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32)) + load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32))) + load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) & load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32)) + load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32)))) + load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) & load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) & load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32)) + load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32))) + load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) & load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32)) + load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32)))))),
  ranges=[128, 192, 27, 27],
  origins={where_5}
)), FallbackKernel(name='buf30', layout=MultiOutputLayout(device=device(type='cuda', index=0)), inputs=[ComputedBuffer(name='buf29', layout=FixedLayout('cuda', torch.float32, size=[128, 192, 27, 27], stride=[139968, 729, 27, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  where(load(relu_1, i3 + 27 * i2 + 729 * i1 + 139968 * i0) <= constant(0, torch.float32), constant(0.0, torch.float32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) & load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) & load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) & load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32)) + load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32))) + load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) & load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32)) + load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32)))) + load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) & load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) & load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32)) + load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32))) + load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) & load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32)) + load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32)))))),
  ranges=[128, 192, 27, 27],
  origins={where_5}
)), InputBuffer(name='getitem', layout=FixedLayout('cuda', torch.float32, size=[128, 64, 27, 27], stride=[46656, 729, 27, 1])), InputBuffer(name='primals_3', layout=FixedLayout('cuda', torch.float32, size=[192, 64, 5, 5], stride=[1600, 25, 5, 1]))], constant_args=(192, 1, 1, 2, 2, 1, 1, False, 0, 0, 1, True, True, True), kwargs={}, output_view=None), MultiOutput(name='buf31', layout=FixedLayout('cuda', torch.float32, size=[128, 64, 27, 27], stride=[46656, 729, 27, 1]), inputs=[FallbackKernel(name='buf30', layout=MultiOutputLayout(device=device(type='cuda', index=0)), inputs=[ComputedBuffer(name='buf29', layout=FixedLayout('cuda', torch.float32, size=[128, 192, 27, 27], stride=[139968, 729, 27, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  where(load(relu_1, i3 + 27 * i2 + 729 * i1 + 139968 * i0) <= constant(0, torch.float32), constant(0.0, torch.float32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) & load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) & load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) & load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32)) + load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32))) + load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) & load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32)) + load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32)))) + load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) & load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) & load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32)) + load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32))) + load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) & load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32)) + load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32)))))),
  ranges=[128, 192, 27, 27],
  origins={where_5}
)), InputBuffer(name='getitem', layout=FixedLayout('cuda', torch.float32, size=[128, 64, 27, 27], stride=[46656, 729, 27, 1])), InputBuffer(name='primals_3', layout=FixedLayout('cuda', torch.float32, size=[192, 64, 5, 5], stride=[1600, 25, 5, 1]))], constant_args=(192, 1, 1, 2, 2, 1, 1, False, 0, 0, 1, True, True, True), kwargs={}, output_view=None)], constant_args=(), kwargs={}, output_view=None), MultiOutput(name='buf32', layout=FixedLayout('cuda', torch.float32, size=[192, 64, 5, 5], stride=[1600, 25, 5, 1]), inputs=[FallbackKernel(name='buf30', layout=MultiOutputLayout(device=device(type='cuda', index=0)), inputs=[ComputedBuffer(name='buf29', layout=FixedLayout('cuda', torch.float32, size=[128, 192, 27, 27], stride=[139968, 729, 27, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  where(load(relu_1, i3 + 27 * i2 + 729 * i1 + 139968 * i0) <= constant(0, torch.float32), constant(0.0, torch.float32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) & load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) & load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) & load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32)) + load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32))) + load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) & load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32)) + load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32)))) + load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) & load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) & load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32)) + load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32))) + load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) & load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32)) + load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32)))))),
  ranges=[128, 192, 27, 27],
  origins={where_5}
)), InputBuffer(name='getitem', layout=FixedLayout('cuda', torch.float32, size=[128, 64, 27, 27], stride=[46656, 729, 27, 1])), InputBuffer(name='primals_3', layout=FixedLayout('cuda', torch.float32, size=[192, 64, 5, 5], stride=[1600, 25, 5, 1]))], constant_args=(192, 1, 1, 2, 2, 1, 1, False, 0, 0, 1, True, True, True), kwargs={}, output_view=None)], constant_args=(), kwargs={}, output_view=None), MultiOutput(name='buf33', layout=FixedLayout('cuda', torch.float32, size=[192], stride=[1]), inputs=[FallbackKernel(name='buf30', layout=MultiOutputLayout(device=device(type='cuda', index=0)), inputs=[ComputedBuffer(name='buf29', layout=FixedLayout('cuda', torch.float32, size=[128, 192, 27, 27], stride=[139968, 729, 27, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  where(load(relu_1, i3 + 27 * i2 + 729 * i1 + 139968 * i0) <= constant(0, torch.float32), constant(0.0, torch.float32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) & load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) & load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) & load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32)) + load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32))) + load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) & load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32)) + load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32)))) + load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) & load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) & load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32)) + load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32))) + load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) & load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32)) + load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32)))))),
  ranges=[128, 192, 27, 27],
  origins={where_5}
)), InputBuffer(name='getitem', layout=FixedLayout('cuda', torch.float32, size=[128, 64, 27, 27], stride=[46656, 729, 27, 1])), InputBuffer(name='primals_3', layout=FixedLayout('cuda', torch.float32, size=[192, 64, 5, 5], stride=[1600, 25, 5, 1]))], constant_args=(192, 1, 1, 2, 2, 1, 1, False, 0, 0, 1, True, True, True), kwargs={}, output_view=None)], constant_args=(), kwargs={}, output_view=None), ComputedBuffer(name='buf34', layout=FixedLayout('cuda', torch.float32, size=[128, 64, 55, 55], stride=[193600, 3025, 55, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  where(load(relu, i3 + 55 * i2 + 3025 * i1 + 193600 * i0) <= constant(0, torch.float32), constant(0.0, torch.float32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) & load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) & load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) & load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), where(load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), constant(0.0, torch.float32)) + load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), where(load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), constant(0.0, torch.float32))) + load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) & load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), where(load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), constant(0.0, torch.float32)) + load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), where(load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), constant(0.0, torch.float32)))) + load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) & load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) & load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), where(load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), constant(0.0, torch.float32)) + load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), where(load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), constant(0.0, torch.float32))) + load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) & load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), where(load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), constant(0.0, torch.float32)) + load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), where(load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), constant(0.0, torch.float32)))))),
  ranges=[128, 64, 55, 55],
  origins={where_6}
)), FallbackKernel(name='buf35', layout=MultiOutputLayout(device=device(type='cuda', index=0)), inputs=[ComputedBuffer(name='buf34', layout=FixedLayout('cuda', torch.float32, size=[128, 64, 55, 55], stride=[193600, 3025, 55, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  where(load(relu, i3 + 55 * i2 + 3025 * i1 + 193600 * i0) <= constant(0, torch.float32), constant(0.0, torch.float32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) & load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) & load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) & load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), where(load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), constant(0.0, torch.float32)) + load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), where(load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), constant(0.0, torch.float32))) + load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) & load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), where(load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), constant(0.0, torch.float32)) + load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), where(load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), constant(0.0, torch.float32)))) + load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) & load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) & load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), where(load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), constant(0.0, torch.float32)) + load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), where(load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), constant(0.0, torch.float32))) + load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) & load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), where(load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), constant(0.0, torch.float32)) + load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), where(load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), constant(0.0, torch.float32)))))),
  ranges=[128, 64, 55, 55],
  origins={where_6}
)), InputBuffer(name='primals_17', layout=FixedLayout('cuda', torch.float32, size=[128, 3, 224, 224], stride=[150528, 50176, 224, 1])), InputBuffer(name='primals_1', layout=FixedLayout('cuda', torch.float32, size=[64, 3, 11, 11], stride=[363, 121, 11, 1]))], constant_args=(64, 4, 4, 2, 2, 1, 1, False, 0, 0, 1, False, True, True), kwargs={}, output_view=None), MultiOutput(name='buf36', layout=FixedLayout('cuda', torch.float32, size=[64, 3, 11, 11], stride=[363, 121, 11, 1]), inputs=[FallbackKernel(name='buf35', layout=MultiOutputLayout(device=device(type='cuda', index=0)), inputs=[ComputedBuffer(name='buf34', layout=FixedLayout('cuda', torch.float32, size=[128, 64, 55, 55], stride=[193600, 3025, 55, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  where(load(relu, i3 + 55 * i2 + 3025 * i1 + 193600 * i0) <= constant(0, torch.float32), constant(0.0, torch.float32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) & load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) & load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) & load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), where(load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), constant(0.0, torch.float32)) + load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), where(load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), constant(0.0, torch.float32))) + load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) & load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), where(load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), constant(0.0, torch.float32)) + load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), where(load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), constant(0.0, torch.float32)))) + load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) & load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) & load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), where(load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), constant(0.0, torch.float32)) + load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), where(load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), constant(0.0, torch.float32))) + load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) & load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), where(load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), constant(0.0, torch.float32)) + load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), where(load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), constant(0.0, torch.float32)))))),
  ranges=[128, 64, 55, 55],
  origins={where_6}
)), InputBuffer(name='primals_17', layout=FixedLayout('cuda', torch.float32, size=[128, 3, 224, 224], stride=[150528, 50176, 224, 1])), InputBuffer(name='primals_1', layout=FixedLayout('cuda', torch.float32, size=[64, 3, 11, 11], stride=[363, 121, 11, 1]))], constant_args=(64, 4, 4, 2, 2, 1, 1, False, 0, 0, 1, False, True, True), kwargs={}, output_view=None)], constant_args=(), kwargs={}, output_view=None), MultiOutput(name='buf37', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]), inputs=[FallbackKernel(name='buf35', layout=MultiOutputLayout(device=device(type='cuda', index=0)), inputs=[ComputedBuffer(name='buf34', layout=FixedLayout('cuda', torch.float32, size=[128, 64, 55, 55], stride=[193600, 3025, 55, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  where(load(relu, i3 + 55 * i2 + 3025 * i1 + 193600 * i0) <= constant(0, torch.float32), constant(0.0, torch.float32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) & load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) & load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) & load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), where(load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), constant(0.0, torch.float32)) + load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), where(load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), constant(0.0, torch.float32))) + load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) & load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), where(load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), constant(0.0, torch.float32)) + load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), where(load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), constant(0.0, torch.float32)))) + load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) & load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) & load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), where(load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), constant(0.0, torch.float32)) + load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), where(load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), constant(0.0, torch.float32))) + load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) & load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), where(load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), constant(0.0, torch.float32)) + load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), where(load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), constant(0.0, torch.float32)))))),
  ranges=[128, 64, 55, 55],
  origins={where_6}
)), InputBuffer(name='primals_17', layout=FixedLayout('cuda', torch.float32, size=[128, 3, 224, 224], stride=[150528, 50176, 224, 1])), InputBuffer(name='primals_1', layout=FixedLayout('cuda', torch.float32, size=[64, 3, 11, 11], stride=[363, 121, 11, 1]))], constant_args=(64, 4, 4, 2, 2, 1, 1, False, 0, 0, 1, False, True, True), kwargs={}, output_view=None)], constant_args=(), kwargs={}, output_view=None)]
==========IR outputs============
[StorageBox(
  MultiOutput(
    name=buf36,
    layout=FixedLayout('cuda', torch.float32, size=[64, 3, 11, 11], stride=[363, 121, 11, 1]),
    inputs=[FallbackKernel(name='buf35', layout=MultiOutputLayout(device=device(type='cuda', index=0)), inputs=[ComputedBuffer(name='buf34', layout=FixedLayout('cuda', torch.float32, size=[128, 64, 55, 55], stride=[193600, 3025, 55, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      where(load(relu, i3 + 55 * i2 + 3025 * i1 + 193600 * i0) <= constant(0, torch.float32), constant(0.0, torch.float32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) & load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) & load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) & load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), where(load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), constant(0.0, torch.float32)) + load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), where(load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), constant(0.0, torch.float32))) + load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) & load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), where(load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), constant(0.0, torch.float32)) + load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), where(load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), constant(0.0, torch.float32)))) + load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) & load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) & load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), where(load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), constant(0.0, torch.float32)) + load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), where(load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), constant(0.0, torch.float32))) + load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) & load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), where(load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), constant(0.0, torch.float32)) + load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), where(load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), constant(0.0, torch.float32)))))),
      ranges=[128, 64, 55, 55],
      origins={where_6}
    )), InputBuffer(name='primals_17', layout=FixedLayout('cuda', torch.float32, size=[128, 3, 224, 224], stride=[150528, 50176, 224, 1])), InputBuffer(name='primals_1', layout=FixedLayout('cuda', torch.float32, size=[64, 3, 11, 11], stride=[363, 121, 11, 1]))], constant_args=(64, 4, 4, 2, 2, 1, 1, False, 0, 0, 1, False, True, True), kwargs={}, output_view=None)],
    constant_args=(),
    kwargs={},
    output_view=None,
    origins={convolution_backward_4}
  )
), StorageBox(
  MultiOutput(
    name=buf37,
    layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]),
    inputs=[FallbackKernel(name='buf35', layout=MultiOutputLayout(device=device(type='cuda', index=0)), inputs=[ComputedBuffer(name='buf34', layout=FixedLayout('cuda', torch.float32, size=[128, 64, 55, 55], stride=[193600, 3025, 55, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      where(load(relu, i3 + 55 * i2 + 3025 * i1 + 193600 * i0) <= constant(0, torch.float32), constant(0.0, torch.float32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) & load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) & load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) & load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), where(load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), constant(0.0, torch.float32)) + load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), where(load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), constant(0.0, torch.float32))) + load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) & load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), where(load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), constant(0.0, torch.float32)) + load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), where(load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), constant(0.0, torch.float32)))) + load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) & load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) & load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), where(load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), constant(0.0, torch.float32)) + load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), where(load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), constant(0.0, torch.float32))) + load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) & load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), where(load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), constant(0.0, torch.float32)) + load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), where(load(getitem_1, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0) == index_expr(i3 + 55 * i2, torch.int32), load(buf31, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 27 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(27, torch.int32)) - constant(1, torch.int32)) + 729 * i1 + 46656 * i0), constant(0.0, torch.float32)))))),
      ranges=[128, 64, 55, 55],
      origins={where_6}
    )), InputBuffer(name='primals_17', layout=FixedLayout('cuda', torch.float32, size=[128, 3, 224, 224], stride=[150528, 50176, 224, 1])), InputBuffer(name='primals_1', layout=FixedLayout('cuda', torch.float32, size=[64, 3, 11, 11], stride=[363, 121, 11, 1]))], constant_args=(64, 4, 4, 2, 2, 1, 1, False, 0, 0, 1, False, True, True), kwargs={}, output_view=None)],
    constant_args=(),
    kwargs={},
    output_view=None,
    origins={convolution_backward_4}
  )
), StorageBox(
  MultiOutput(
    name=buf32,
    layout=FixedLayout('cuda', torch.float32, size=[192, 64, 5, 5], stride=[1600, 25, 5, 1]),
    inputs=[FallbackKernel(name='buf30', layout=MultiOutputLayout(device=device(type='cuda', index=0)), inputs=[ComputedBuffer(name='buf29', layout=FixedLayout('cuda', torch.float32, size=[128, 192, 27, 27], stride=[139968, 729, 27, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      where(load(relu_1, i3 + 27 * i2 + 729 * i1 + 139968 * i0) <= constant(0, torch.float32), constant(0.0, torch.float32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) & load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) & load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) & load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32)) + load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32))) + load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) & load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32)) + load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32)))) + load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) & load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) & load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32)) + load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32))) + load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) & load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32)) + load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32)))))),
      ranges=[128, 192, 27, 27],
      origins={where_5}
    )), InputBuffer(name='getitem', layout=FixedLayout('cuda', torch.float32, size=[128, 64, 27, 27], stride=[46656, 729, 27, 1])), InputBuffer(name='primals_3', layout=FixedLayout('cuda', torch.float32, size=[192, 64, 5, 5], stride=[1600, 25, 5, 1]))], constant_args=(192, 1, 1, 2, 2, 1, 1, False, 0, 0, 1, True, True, True), kwargs={}, output_view=None)],
    constant_args=(),
    kwargs={},
    output_view=None,
    origins={convolution_backward_3}
  )
), StorageBox(
  MultiOutput(
    name=buf33,
    layout=FixedLayout('cuda', torch.float32, size=[192], stride=[1]),
    inputs=[FallbackKernel(name='buf30', layout=MultiOutputLayout(device=device(type='cuda', index=0)), inputs=[ComputedBuffer(name='buf29', layout=FixedLayout('cuda', torch.float32, size=[128, 192, 27, 27], stride=[139968, 729, 27, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      where(load(relu_1, i3 + 27 * i2 + 729 * i1 + 139968 * i0) <= constant(0, torch.float32), constant(0.0, torch.float32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) & load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) & load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) & load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32)) + load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32))) + load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) & load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32)) + load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32)))) + load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) & load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) & load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32)) + load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32))) + load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) & load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32)) + load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), where(load(getitem_3, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0) == index_expr(i3 + 27 * i2, torch.int32), load(buf26, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 13 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(13, torch.int32)) - constant(1, torch.int32)) + 169 * i1 + 32448 * i0), constant(0.0, torch.float32)))))),
      ranges=[128, 192, 27, 27],
      origins={where_5}
    )), InputBuffer(name='getitem', layout=FixedLayout('cuda', torch.float32, size=[128, 64, 27, 27], stride=[46656, 729, 27, 1])), InputBuffer(name='primals_3', layout=FixedLayout('cuda', torch.float32, size=[192, 64, 5, 5], stride=[1600, 25, 5, 1]))], constant_args=(192, 1, 1, 2, 2, 1, 1, False, 0, 0, 1, True, True, True), kwargs={}, output_view=None)],
    constant_args=(),
    kwargs={},
    output_view=None,
    origins={convolution_backward_3}
  )
), StorageBox(
  MultiOutput(
    name=buf27,
    layout=FixedLayout('cuda', torch.float32, size=[384, 192, 3, 3], stride=[1728, 9, 3, 1]),
    inputs=[FallbackKernel(name='buf25', layout=MultiOutputLayout(device=device(type='cuda', index=0)), inputs=[ComputedBuffer(name='buf24', layout=FixedLayout('cuda', torch.float32, size=[128, 384, 13, 13], stride=[64896, 169, 13, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      where(load(relu_2, i3 + 13 * i2 + 169 * i1 + 64896 * i0) <= constant(0, torch.float32), constant(0.0, torch.float32), load(buf21, i3 + 13 * i2 + 169 * i1 + 64896 * i0)),
      ranges=[128, 384, 13, 13],
      origins={where_4}
    )), InputBuffer(name='getitem_2', layout=FixedLayout('cuda', torch.float32, size=[128, 192, 13, 13], stride=[32448, 169, 13, 1])), InputBuffer(name='primals_5', layout=FixedLayout('cuda', torch.float32, size=[384, 192, 3, 3], stride=[1728, 9, 3, 1]))], constant_args=(384, 1, 1, 1, 1, 1, 1, False, 0, 0, 1, True, True, True), kwargs={}, output_view=None)],
    constant_args=(),
    kwargs={},
    output_view=None,
    origins={convolution_backward_2}
  )
), StorageBox(
  MultiOutput(
    name=buf28,
    layout=FixedLayout('cuda', torch.float32, size=[384], stride=[1]),
    inputs=[FallbackKernel(name='buf25', layout=MultiOutputLayout(device=device(type='cuda', index=0)), inputs=[ComputedBuffer(name='buf24', layout=FixedLayout('cuda', torch.float32, size=[128, 384, 13, 13], stride=[64896, 169, 13, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      where(load(relu_2, i3 + 13 * i2 + 169 * i1 + 64896 * i0) <= constant(0, torch.float32), constant(0.0, torch.float32), load(buf21, i3 + 13 * i2 + 169 * i1 + 64896 * i0)),
      ranges=[128, 384, 13, 13],
      origins={where_4}
    )), InputBuffer(name='getitem_2', layout=FixedLayout('cuda', torch.float32, size=[128, 192, 13, 13], stride=[32448, 169, 13, 1])), InputBuffer(name='primals_5', layout=FixedLayout('cuda', torch.float32, size=[384, 192, 3, 3], stride=[1728, 9, 3, 1]))], constant_args=(384, 1, 1, 1, 1, 1, 1, False, 0, 0, 1, True, True, True), kwargs={}, output_view=None)],
    constant_args=(),
    kwargs={},
    output_view=None,
    origins={convolution_backward_2}
  )
), StorageBox(
  MultiOutput(
    name=buf22,
    layout=FixedLayout('cuda', torch.float32, size=[256, 384, 3, 3], stride=[3456, 9, 3, 1]),
    inputs=[FallbackKernel(name='buf20', layout=MultiOutputLayout(device=device(type='cuda', index=0)), inputs=[ComputedBuffer(name='buf19', layout=FixedLayout('cuda', torch.float32, size=[128, 256, 13, 13], stride=[43264, 169, 13, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      where(load(relu_3, i3 + 13 * i2 + 169 * i1 + 43264 * i0) <= constant(0, torch.float32), constant(0.0, torch.float32), load(buf16, i3 + 13 * i2 + 169 * i1 + 43264 * i0)),
      ranges=[128, 256, 13, 13],
      origins={where_3}
    )), InputBuffer(name='relu_2', layout=FixedLayout('cuda', torch.float32, size=[128, 384, 13, 13], stride=[64896, 169, 13, 1])), InputBuffer(name='primals_7', layout=FixedLayout('cuda', torch.float32, size=[256, 384, 3, 3], stride=[3456, 9, 3, 1]))], constant_args=(256, 1, 1, 1, 1, 1, 1, False, 0, 0, 1, True, True, True), kwargs={}, output_view=None)],
    constant_args=(),
    kwargs={},
    output_view=None,
    origins={convolution_backward_1}
  )
), StorageBox(
  MultiOutput(
    name=buf23,
    layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]),
    inputs=[FallbackKernel(name='buf20', layout=MultiOutputLayout(device=device(type='cuda', index=0)), inputs=[ComputedBuffer(name='buf19', layout=FixedLayout('cuda', torch.float32, size=[128, 256, 13, 13], stride=[43264, 169, 13, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      where(load(relu_3, i3 + 13 * i2 + 169 * i1 + 43264 * i0) <= constant(0, torch.float32), constant(0.0, torch.float32), load(buf16, i3 + 13 * i2 + 169 * i1 + 43264 * i0)),
      ranges=[128, 256, 13, 13],
      origins={where_3}
    )), InputBuffer(name='relu_2', layout=FixedLayout('cuda', torch.float32, size=[128, 384, 13, 13], stride=[64896, 169, 13, 1])), InputBuffer(name='primals_7', layout=FixedLayout('cuda', torch.float32, size=[256, 384, 3, 3], stride=[3456, 9, 3, 1]))], constant_args=(256, 1, 1, 1, 1, 1, 1, False, 0, 0, 1, True, True, True), kwargs={}, output_view=None)],
    constant_args=(),
    kwargs={},
    output_view=None,
    origins={convolution_backward_1}
  )
), StorageBox(
  MultiOutput(
    name=buf17,
    layout=FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1]),
    inputs=[FallbackKernel(name='buf15', layout=MultiOutputLayout(device=device(type='cuda', index=0)), inputs=[ComputedBuffer(name='buf14', layout=FixedLayout('cuda', torch.float32, size=[128, 256, 13, 13], stride=[43264, 169, 13, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      where(load(relu_4, i3 + 13 * i2 + 169 * i1 + 43264 * i0) <= constant(0, torch.float32), constant(0.0, torch.float32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) & load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) & load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) & load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32)) + load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32))) + load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) & load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32)) + load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32)))) + load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) & load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) & load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32)) + load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32))) + load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) & load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32)) + load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32)))))),
      ranges=[128, 256, 13, 13],
      origins={where_2}
    )), InputBuffer(name='relu_3', layout=FixedLayout('cuda', torch.float32, size=[128, 256, 13, 13], stride=[43264, 169, 13, 1])), InputBuffer(name='primals_9', layout=FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1]))], constant_args=(256, 1, 1, 1, 1, 1, 1, False, 0, 0, 1, True, True, True), kwargs={}, output_view=None)],
    constant_args=(),
    kwargs={},
    output_view=None,
    origins={convolution_backward}
  )
), StorageBox(
  MultiOutput(
    name=buf18,
    layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]),
    inputs=[FallbackKernel(name='buf15', layout=MultiOutputLayout(device=device(type='cuda', index=0)), inputs=[ComputedBuffer(name='buf14', layout=FixedLayout('cuda', torch.float32, size=[128, 256, 13, 13], stride=[43264, 169, 13, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      where(load(relu_4, i3 + 13 * i2 + 169 * i1 + 43264 * i0) <= constant(0, torch.float32), constant(0.0, torch.float32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) & load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) & load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) & load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32)) + load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32))) + load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) & load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32)) + load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32)))) + load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) & load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) & load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32)) + load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32))) + load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), where(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32) < minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) & maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32) < minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) & load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32)) + load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(1, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), where(load(getitem_5, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0) == index_expr(i3 + 13 * i2, torch.int32), load(buf13, minimum(maximum(index_expr(IndexingDiv(-1 + i3, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i3, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 6 * minimum(maximum(index_expr(IndexingDiv(-1 + i2, 2), torch.int32), constant(0, torch.int32)) + constant(0, torch.int32), minimum(index_expr(1 + IndexingDiv(i2, 2), torch.int32), index_expr(6, torch.int32)) - constant(1, torch.int32)) + 36 * i1 + 9216 * i0), constant(0.0, torch.float32)))))),
      ranges=[128, 256, 13, 13],
      origins={where_2}
    )), InputBuffer(name='relu_3', layout=FixedLayout('cuda', torch.float32, size=[128, 256, 13, 13], stride=[43264, 169, 13, 1])), InputBuffer(name='primals_9', layout=FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1]))], constant_args=(256, 1, 1, 1, 1, 1, 1, False, 0, 0, 1, True, True, True), kwargs={}, output_view=None)],
    constant_args=(),
    kwargs={},
    output_view=None,
    origins={convolution_backward}
  )
), ReinterpretView(
  StorageBox(
    MatrixMultiply(
      name=buf10,
      layout=FixedLayout('cuda', torch.float32, size=[4096, 9216], stride=[9216, 1]),
      inputs=[ReinterpretView(
        StorageBox(
          ComputedBuffer(name='buf8', layout=FixedLayout('cuda', torch.float32, size=[128, 4096], stride=[4096, 1]), data=Pointwise(
            'cuda',
            torch.float32,
            where(relu(load(addmm, i1 + 4096 * i0)) <= constant(0, torch.float32), constant(0.0, torch.float32), load(buf4, i1 + 4096 * i0) * to_dtype(load(gt_1, i1 + 4096 * i0), torch.float32) * constant(2.0, torch.float32)),
            ranges=[128, 4096],
            origins={where_1}
          ))
        ),
        FixedLayout('cuda', torch.float32, size=[4096, 128], stride=[1, 4096]),
        origins={permute_12}
      ), InputBuffer(name='mul_1', layout=FixedLayout('cuda', torch.float32, size=[128, 9216], stride=[9216, 1]))],
      constant_args=(),
      kwargs=None,
      output_view=None,
      origins={mm_5}
    )
  ),
  FixedLayout('cuda', torch.float32, size=[4096, 9216], stride=[9216, 1]),
  origins={permute_14}
), ReinterpretView(
  StorageBox(
    ComputedBuffer(name='buf11', layout=FixedLayout('cuda', torch.float32, size=[1, 4096], stride=[4096, 1]), data=Reduction(
      'cuda',
      torch.float32,
      load(buf8, i1 + 4096 * r0),
      ranges=[1, 4096],
      reduction_ranges=[128],
      reduction_type=sum,
      origins={sum_3}
    ))
  ),
  FixedLayout('cuda', torch.float32, size=[4096], stride=[1]),
  origins={view_3}
), ReinterpretView(
  StorageBox(
    MatrixMultiply(
      name=buf6,
      layout=FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1]),
      inputs=[ReinterpretView(
        StorageBox(
          ComputedBuffer(name='buf3', layout=FixedLayout('cuda', torch.float32, size=[128, 4096], stride=[4096, 1]), data=Pointwise(
            'cuda',
            torch.float32,
            where(load(relu_6, i1 + 4096 * i0) <= constant(0, torch.float32), constant(0.0, torch.float32), load(buf0, i1 + 4096 * i0)),
            ranges=[128, 4096],
            origins={where}
          ))
        ),
        FixedLayout('cuda', torch.float32, size=[4096, 128], stride=[1, 4096]),
        origins={permute_8}
      ), ComputedBuffer(name='buf5', layout=FixedLayout('cuda', torch.float32, size=[128, 4096], stride=[4096, 1]), data=Pointwise(
        'cuda',
        torch.float32,
        to_dtype(load(gt_1, i1 + 4096 * i0), torch.float32) * relu(load(addmm, i1 + 4096 * i0)) * constant(2.0, torch.float32),
        ranges=[128, 4096],
        origins={mul_3}
      ))],
      constant_args=(),
      kwargs=None,
      output_view=None,
      origins={mm_3}
    )
  ),
  FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1]),
  origins={permute_10}
), ReinterpretView(
  StorageBox(
    ComputedBuffer(name='buf7', layout=FixedLayout('cuda', torch.float32, size=[1, 4096], stride=[4096, 1]), data=Reduction(
      'cuda',
      torch.float32,
      load(buf3, i1 + 4096 * r0),
      ranges=[1, 4096],
      reduction_ranges=[128],
      reduction_type=sum,
      origins={sum_2}
    ))
  ),
  FixedLayout('cuda', torch.float32, size=[4096], stride=[1]),
  origins={view_2}
), ReinterpretView(
  StorageBox(
    MatrixMultiply(
      name=buf1,
      layout=FixedLayout('cuda', torch.float32, size=[1000, 4096], stride=[4096, 1]),
      inputs=[ReinterpretView(
        StorageBox(
          InputBuffer(name='tangents_1', layout=FixedLayout('cuda', torch.float32, size=[128, 1000], stride=[1000, 1]))
        ),
        FixedLayout('cuda', torch.float32, size=[1000, 128], stride=[1, 1000]),
        origins={permute_4}
      ), InputBuffer(name='relu_6', layout=FixedLayout('cuda', torch.float32, size=[128, 4096], stride=[4096, 1]))],
      constant_args=(),
      kwargs=None,
      output_view=None,
      origins={mm_1}
    )
  ),
  FixedLayout('cuda', torch.float32, size=[1000, 4096], stride=[4096, 1]),
  origins={permute_6}
), ReinterpretView(
  StorageBox(
    ComputedBuffer(name='buf2', layout=FixedLayout('cuda', torch.float32, size=[1, 1000], stride=[1000, 1]), data=Reduction(
      'cuda',
      torch.float32,
      load(tangents_1, i1 + 1000 * r0),
      ranges=[1, 1000],
      reduction_ranges=[128],
      reduction_type=sum,
      origins={sum_1}
    ))
  ),
  FixedLayout('cuda', torch.float32, size=[1000], stride=[1]),
  origins={view_1}
), NoneAsConstantBuffer()]

from ctypes import c_void_p, c_long
import torch
import random
from torch import empty_strided, as_strided, device
from torchinductor.codecache import AsyncCompile

aten = torch.ops.aten
async_compile = AsyncCompile()

import triton
import triton.language as tl
from torchinductor.triton_ops.autotune import grid
from torch._C import _cuda_getCurrentRawStream as get_cuda_stream


kernel0 = async_compile.triton('''
import triton
import triton.language as tl
from torchinductor.ir import ReductionHint
from torchinductor.triton_ops.autotune import reduction
from torchinductor.utils import instance_descriptor

@reduction(size_hints=[1024, 128],
              reduction_hint=ReductionHint.OUTER,
              filename=__file__,
              meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': 0, 'configs': [instance_descriptor(divisible_by_16=(0, 1), equal_to_1=())], 'constants': {}})
@triton.jit
def kernel(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 1000
    rnumel = 128
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.reshape(tl.arange(0, XBLOCK), [XBLOCK, 1])
    xmask = xindex < xnumel
    rbase = tl.reshape(tl.arange(0, RBLOCK), [1, RBLOCK])
    x0 = xindex
    _tmp1 = tl.zeros([XBLOCK, RBLOCK], tl.float32) + 0
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1000*r1)), xmask & rmask, eviction_policy='evict_last')
        _tmp1 = tl.where(xmask & rmask, _tmp1 + tmp0, _tmp1)
    tmp1 = tl.reshape(tl.sum(_tmp1, 1), [XBLOCK, 1])
    tl.store(out_ptr0 + x0, tmp1, xmask)
''')


kernel1 = async_compile.triton('''
import triton
import triton.language as tl
from torchinductor.ir import ReductionHint
from torchinductor.triton_ops.autotune import pointwise
from torchinductor.utils import instance_descriptor

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': 0, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=())], 'constants': {}})
@triton.jit
def kernel(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 524288
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.reshape(tl.arange(0, XBLOCK), [XBLOCK])
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0), xmask)
    tmp4 = tl.load(in_ptr1 + (x0), xmask)
    tmp1 = 0
    tmp2 = tmp0 <= tmp1
    tmp3 = 0.0
    tmp5 = tl.where(tmp2, tmp3, tmp4)
    tl.store(out_ptr0 + (x0 + tl.zeros([XBLOCK], tl.int32)), tmp5, xmask)
''')


kernel2 = async_compile.triton('''
import triton
import triton.language as tl
from torchinductor.ir import ReductionHint
from torchinductor.triton_ops.autotune import pointwise
from torchinductor.utils import instance_descriptor

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*i1', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': 0, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=())], 'constants': {}})
@triton.jit
def kernel(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 524288
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.reshape(tl.arange(0, XBLOCK), [XBLOCK])
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0), xmask)
    tmp2 = tl.load(in_ptr1 + (x0), xmask)
    tmp1 = tmp0.to(tl.float32)
    tmp3 = tl.maximum(0, tmp2)
    tmp4 = tmp1 * tmp3
    tmp5 = 2.0
    tmp6 = tmp4 * tmp5
    tl.store(out_ptr0 + (x0 + tl.zeros([XBLOCK], tl.int32)), tmp6, xmask)
''')


kernel3 = async_compile.triton('''
import triton
import triton.language as tl
from torchinductor.ir import ReductionHint
from torchinductor.triton_ops.autotune import reduction
from torchinductor.utils import instance_descriptor

@reduction(size_hints=[4096, 128],
              reduction_hint=ReductionHint.OUTER,
              filename=__file__,
              meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': 0, 'configs': [instance_descriptor(divisible_by_16=(0, 1), equal_to_1=())], 'constants': {}})
@triton.jit
def kernel(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 4096
    rnumel = 128
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.reshape(tl.arange(0, XBLOCK), [XBLOCK, 1])
    xmask = xindex < xnumel
    rbase = tl.reshape(tl.arange(0, RBLOCK), [1, RBLOCK])
    x0 = xindex
    _tmp1 = tl.zeros([XBLOCK, RBLOCK], tl.float32) + 0
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (x0 + (4096*r1)), xmask & rmask, eviction_policy='evict_last')
        _tmp1 = tl.where(xmask & rmask, _tmp1 + tmp0, _tmp1)
    tmp1 = tl.reshape(tl.sum(_tmp1, 1), [XBLOCK, 1])
    tl.store(out_ptr0 + x0, tmp1, xmask)
''')


kernel4 = async_compile.triton('''
import triton
import triton.language as tl
from torchinductor.ir import ReductionHint
from torchinductor.triton_ops.autotune import pointwise
from torchinductor.utils import instance_descriptor

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*i1', 3: '*fp32', 4: 'i32'}, 'device': 0, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())], 'constants': {}})
@triton.jit
def kernel(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 524288
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.reshape(tl.arange(0, XBLOCK), [XBLOCK])
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0), xmask)
    tmp5 = tl.load(in_ptr1 + (x0), xmask)
    tmp6 = tl.load(in_ptr2 + (x0), xmask)
    tmp1 = tl.maximum(0, tmp0)
    tmp2 = 0
    tmp3 = tmp1 <= tmp2
    tmp4 = 0.0
    tmp7 = tmp6.to(tl.float32)
    tmp8 = 2.0
    tmp9 = tmp7 * tmp8
    tmp10 = tmp5 * tmp9
    tmp11 = tl.where(tmp3, tmp4, tmp10)
    tl.store(out_ptr0 + (x0 + tl.zeros([XBLOCK], tl.int32)), tmp11, xmask)
''')


kernel5 = async_compile.triton('''
import triton
import triton.language as tl
from torchinductor.ir import ReductionHint
from torchinductor.triton_ops.autotune import pointwise
from torchinductor.utils import instance_descriptor

@pointwise(size_hints=[2097152], filename=__file__, meta={'signature': {0: '*fp32', 1: '*i1', 2: '*fp32', 3: 'i32'}, 'device': 0, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=())], 'constants': {}})
@triton.jit
def kernel(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 1179648
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.reshape(tl.arange(0, XBLOCK), [XBLOCK])
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0), xmask)
    tmp1 = tl.load(in_ptr1 + (x0), xmask)
    tmp2 = tmp1.to(tl.float32)
    tmp3 = 2.0
    tmp4 = tmp2 * tmp3
    tmp5 = tmp0 * tmp4
    tl.store(out_ptr0 + (x0 + tl.zeros([XBLOCK], tl.int32)), tmp5, xmask)
''')


kernel6 = async_compile.triton('''
import triton
import triton.language as tl
from torchinductor.ir import ReductionHint
from torchinductor.triton_ops.autotune import pointwise
from torchinductor.utils import instance_descriptor

@pointwise(size_hints=[8388608], filename=__file__, meta={'signature': {0: '*fp32', 1: '*i64', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': 0, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())], 'constants': {}})
@triton.jit
def kernel(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 5537792
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.reshape(tl.arange(0, XBLOCK), [XBLOCK])
    xmask = xindex < xnumel
    x3 = xindex
    x4 = xindex % 169
    x1 = (xindex // 13) % 13
    x0 = xindex % 13
    x2 = (xindex // 169)
    tmp0 = tl.load(in_ptr0 + (x3), xmask)
    tmp1 = 0
    tmp2 = tmp0 <= tmp1
    tmp3 = 0.0
    tmp4 = x4
    tmp5 = (((-1) + x1) // 2)
    tmp6 = (((-1) + x0) // 2)
    tmp7 = 1 + (x1 // 2)
    tmp8 = 1 + (x0 // 2)
    tmp9 = tl.maximum(tmp5, tmp1)
    tmp10 = tl.maximum(tmp6, tmp1)
    tmp11 = 6
    tmp12 = tl.minimum(tmp7, tmp11)
    tmp13 = tl.minimum(tmp8, tmp11)
    tmp14 = tmp9 + tmp1
    tmp15 = tmp10 + tmp1
    tmp16 = 1
    tmp17 = tmp12 - tmp16
    tmp18 = tl.minimum(tmp14, tmp17)
    tmp19 = tmp13 - tmp16
    tmp20 = tl.minimum(tmp15, tmp19)
    tmp21 = tl.load(in_ptr1 + (tmp20 + (6*tmp18) + (36*x2) + tl.zeros([XBLOCK], tl.int32)), xmask)
    tmp22 = tl.load(in_ptr2 + (tmp20 + (6*tmp18) + (36*x2) + tl.zeros([XBLOCK], tl.int32)), xmask)
    tmp23 = tmp21 == tmp4
    tmp24 = tl.where(tmp23, tmp22, tmp3)
    tmp25 = tmp10 + tmp16
    tmp26 = tl.minimum(tmp25, tmp19)
    tmp27 = tl.load(in_ptr1 + (tmp26 + (6*tmp18) + (36*x2) + tl.zeros([XBLOCK], tl.int32)), xmask)
    tmp28 = tl.load(in_ptr2 + (tmp26 + (6*tmp18) + (36*x2) + tl.zeros([XBLOCK], tl.int32)), xmask)
    tmp29 = tmp27 == tmp4
    tmp30 = tmp14 < tmp12
    tmp31 = tmp25 < tmp13
    tmp32 = tmp30 & tmp31
    tmp33 = tmp32 & tmp29
    tmp34 = tmp24 + tmp28
    tmp35 = tl.where(tmp33, tmp34, tmp24)
    tmp36 = tmp9 + tmp16
    tmp37 = tl.minimum(tmp36, tmp17)
    tmp38 = tl.load(in_ptr1 + (tmp20 + (6*tmp37) + (36*x2) + tl.zeros([XBLOCK], tl.int32)), xmask)
    tmp39 = tl.load(in_ptr2 + (tmp20 + (6*tmp37) + (36*x2) + tl.zeros([XBLOCK], tl.int32)), xmask)
    tmp40 = tmp38 == tmp4
    tmp41 = tmp36 < tmp12
    tmp42 = tmp15 < tmp13
    tmp43 = tmp41 & tmp42
    tmp44 = tmp43 & tmp40
    tmp45 = tmp35 + tmp39
    tmp46 = tl.where(tmp44, tmp45, tmp35)
    tmp47 = tl.load(in_ptr1 + (tmp26 + (6*tmp37) + (36*x2) + tl.zeros([XBLOCK], tl.int32)), xmask)
    tmp48 = tl.load(in_ptr2 + (tmp26 + (6*tmp37) + (36*x2) + tl.zeros([XBLOCK], tl.int32)), xmask)
    tmp49 = tmp47 == tmp4
    tmp50 = tmp41 & tmp31
    tmp51 = tmp50 & tmp49
    tmp52 = tmp46 + tmp48
    tmp53 = tl.where(tmp51, tmp52, tmp46)
    tmp54 = tl.where(tmp2, tmp3, tmp53)
    tl.store(out_ptr0 + (x3 + tl.zeros([XBLOCK], tl.int32)), tmp54, xmask)
''')


kernel7 = async_compile.triton('''
import triton
import triton.language as tl
from torchinductor.ir import ReductionHint
from torchinductor.triton_ops.autotune import pointwise
from torchinductor.utils import instance_descriptor

@pointwise(size_hints=[8388608], filename=__file__, meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': 0, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=())], 'constants': {}})
@triton.jit
def kernel(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 5537792
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.reshape(tl.arange(0, XBLOCK), [XBLOCK])
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0), xmask)
    tmp4 = tl.load(in_ptr1 + (x0), xmask)
    tmp1 = 0
    tmp2 = tmp0 <= tmp1
    tmp3 = 0.0
    tmp5 = tl.where(tmp2, tmp3, tmp4)
    tl.store(out_ptr0 + (x0 + tl.zeros([XBLOCK], tl.int32)), tmp5, xmask)
''')


kernel8 = async_compile.triton('''
import triton
import triton.language as tl
from torchinductor.ir import ReductionHint
from torchinductor.triton_ops.autotune import pointwise
from torchinductor.utils import instance_descriptor

@pointwise(size_hints=[8388608], filename=__file__, meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': 0, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=())], 'constants': {}})
@triton.jit
def kernel(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 8306688
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.reshape(tl.arange(0, XBLOCK), [XBLOCK])
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0), xmask)
    tmp4 = tl.load(in_ptr1 + (x0), xmask)
    tmp1 = 0
    tmp2 = tmp0 <= tmp1
    tmp3 = 0.0
    tmp5 = tl.where(tmp2, tmp3, tmp4)
    tl.store(out_ptr0 + (x0 + tl.zeros([XBLOCK], tl.int32)), tmp5, xmask)
''')


kernel9 = async_compile.triton('''
import triton
import triton.language as tl
from torchinductor.ir import ReductionHint
from torchinductor.triton_ops.autotune import pointwise
from torchinductor.utils import instance_descriptor

@pointwise(size_hints=[33554432], filename=__file__, meta={'signature': {0: '*fp32', 1: '*i64', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': 0, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())], 'constants': {}})
@triton.jit
def kernel(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 17915904
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.reshape(tl.arange(0, XBLOCK), [XBLOCK])
    xmask = xindex < xnumel
    x3 = xindex
    x4 = xindex % 729
    x1 = (xindex // 27) % 27
    x0 = xindex % 27
    x2 = (xindex // 729)
    tmp0 = tl.load(in_ptr0 + (x3), xmask)
    tmp1 = 0
    tmp2 = tmp0 <= tmp1
    tmp3 = 0.0
    tmp4 = x4
    tmp5 = (((-1) + x1) // 2)
    tmp6 = (((-1) + x0) // 2)
    tmp7 = 1 + (x1 // 2)
    tmp8 = 1 + (x0 // 2)
    tmp9 = tl.maximum(tmp5, tmp1)
    tmp10 = tl.maximum(tmp6, tmp1)
    tmp11 = 13
    tmp12 = tl.minimum(tmp7, tmp11)
    tmp13 = tl.minimum(tmp8, tmp11)
    tmp14 = tmp9 + tmp1
    tmp15 = tmp10 + tmp1
    tmp16 = 1
    tmp17 = tmp12 - tmp16
    tmp18 = tl.minimum(tmp14, tmp17)
    tmp19 = tmp13 - tmp16
    tmp20 = tl.minimum(tmp15, tmp19)
    tmp21 = tl.load(in_ptr1 + (tmp20 + (13*tmp18) + (169*x2) + tl.zeros([XBLOCK], tl.int32)), xmask)
    tmp22 = tl.load(in_ptr2 + (tmp20 + (13*tmp18) + (169*x2) + tl.zeros([XBLOCK], tl.int32)), xmask)
    tmp23 = tmp21 == tmp4
    tmp24 = tl.where(tmp23, tmp22, tmp3)
    tmp25 = tmp10 + tmp16
    tmp26 = tl.minimum(tmp25, tmp19)
    tmp27 = tl.load(in_ptr1 + (tmp26 + (13*tmp18) + (169*x2) + tl.zeros([XBLOCK], tl.int32)), xmask)
    tmp28 = tl.load(in_ptr2 + (tmp26 + (13*tmp18) + (169*x2) + tl.zeros([XBLOCK], tl.int32)), xmask)
    tmp29 = tmp27 == tmp4
    tmp30 = tmp14 < tmp12
    tmp31 = tmp25 < tmp13
    tmp32 = tmp30 & tmp31
    tmp33 = tmp32 & tmp29
    tmp34 = tmp24 + tmp28
    tmp35 = tl.where(tmp33, tmp34, tmp24)
    tmp36 = tmp9 + tmp16
    tmp37 = tl.minimum(tmp36, tmp17)
    tmp38 = tl.load(in_ptr1 + (tmp20 + (13*tmp37) + (169*x2) + tl.zeros([XBLOCK], tl.int32)), xmask)
    tmp39 = tl.load(in_ptr2 + (tmp20 + (13*tmp37) + (169*x2) + tl.zeros([XBLOCK], tl.int32)), xmask)
    tmp40 = tmp38 == tmp4
    tmp41 = tmp36 < tmp12
    tmp42 = tmp15 < tmp13
    tmp43 = tmp41 & tmp42
    tmp44 = tmp43 & tmp40
    tmp45 = tmp35 + tmp39
    tmp46 = tl.where(tmp44, tmp45, tmp35)
    tmp47 = tl.load(in_ptr1 + (tmp26 + (13*tmp37) + (169*x2) + tl.zeros([XBLOCK], tl.int32)), xmask)
    tmp48 = tl.load(in_ptr2 + (tmp26 + (13*tmp37) + (169*x2) + tl.zeros([XBLOCK], tl.int32)), xmask)
    tmp49 = tmp47 == tmp4
    tmp50 = tmp41 & tmp31
    tmp51 = tmp50 & tmp49
    tmp52 = tmp46 + tmp48
    tmp53 = tl.where(tmp51, tmp52, tmp46)
    tmp54 = tl.where(tmp2, tmp3, tmp53)
    tl.store(out_ptr0 + (x3 + tl.zeros([XBLOCK], tl.int32)), tmp54, xmask)
''')


kernel10 = async_compile.triton('''
import triton
import triton.language as tl
from torchinductor.ir import ReductionHint
from torchinductor.triton_ops.autotune import pointwise
from torchinductor.utils import instance_descriptor

@pointwise(size_hints=[33554432], filename=__file__, meta={'signature': {0: '*fp32', 1: '*i64', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': 0, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())], 'constants': {}})
@triton.jit
def kernel(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 24780800
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.reshape(tl.arange(0, XBLOCK), [XBLOCK])
    xmask = xindex < xnumel
    x3 = xindex
    x4 = xindex % 3025
    x1 = (xindex // 55) % 55
    x0 = xindex % 55
    x2 = (xindex // 3025)
    tmp0 = tl.load(in_ptr0 + (x3), xmask)
    tmp1 = 0
    tmp2 = tmp0 <= tmp1
    tmp3 = 0.0
    tmp4 = x4
    tmp5 = (((-1) + x1) // 2)
    tmp6 = (((-1) + x0) // 2)
    tmp7 = 1 + (x1 // 2)
    tmp8 = 1 + (x0 // 2)
    tmp9 = tl.maximum(tmp5, tmp1)
    tmp10 = tl.maximum(tmp6, tmp1)
    tmp11 = 27
    tmp12 = tl.minimum(tmp7, tmp11)
    tmp13 = tl.minimum(tmp8, tmp11)
    tmp14 = tmp9 + tmp1
    tmp15 = tmp10 + tmp1
    tmp16 = 1
    tmp17 = tmp12 - tmp16
    tmp18 = tl.minimum(tmp14, tmp17)
    tmp19 = tmp13 - tmp16
    tmp20 = tl.minimum(tmp15, tmp19)
    tmp21 = tl.load(in_ptr1 + (tmp20 + (27*tmp18) + (729*x2) + tl.zeros([XBLOCK], tl.int32)), xmask)
    tmp22 = tl.load(in_ptr2 + (tmp20 + (27*tmp18) + (729*x2) + tl.zeros([XBLOCK], tl.int32)), xmask)
    tmp23 = tmp21 == tmp4
    tmp24 = tl.where(tmp23, tmp22, tmp3)
    tmp25 = tmp10 + tmp16
    tmp26 = tl.minimum(tmp25, tmp19)
    tmp27 = tl.load(in_ptr1 + (tmp26 + (27*tmp18) + (729*x2) + tl.zeros([XBLOCK], tl.int32)), xmask)
    tmp28 = tl.load(in_ptr2 + (tmp26 + (27*tmp18) + (729*x2) + tl.zeros([XBLOCK], tl.int32)), xmask)
    tmp29 = tmp27 == tmp4
    tmp30 = tmp14 < tmp12
    tmp31 = tmp25 < tmp13
    tmp32 = tmp30 & tmp31
    tmp33 = tmp32 & tmp29
    tmp34 = tmp24 + tmp28
    tmp35 = tl.where(tmp33, tmp34, tmp24)
    tmp36 = tmp9 + tmp16
    tmp37 = tl.minimum(tmp36, tmp17)
    tmp38 = tl.load(in_ptr1 + (tmp20 + (27*tmp37) + (729*x2) + tl.zeros([XBLOCK], tl.int32)), xmask)
    tmp39 = tl.load(in_ptr2 + (tmp20 + (27*tmp37) + (729*x2) + tl.zeros([XBLOCK], tl.int32)), xmask)
    tmp40 = tmp38 == tmp4
    tmp41 = tmp36 < tmp12
    tmp42 = tmp15 < tmp13
    tmp43 = tmp41 & tmp42
    tmp44 = tmp43 & tmp40
    tmp45 = tmp35 + tmp39
    tmp46 = tl.where(tmp44, tmp45, tmp35)
    tmp47 = tl.load(in_ptr1 + (tmp26 + (27*tmp37) + (729*x2) + tl.zeros([XBLOCK], tl.int32)), xmask)
    tmp48 = tl.load(in_ptr2 + (tmp26 + (27*tmp37) + (729*x2) + tl.zeros([XBLOCK], tl.int32)), xmask)
    tmp49 = tmp47 == tmp4
    tmp50 = tmp41 & tmp31
    tmp51 = tmp50 & tmp49
    tmp52 = tmp46 + tmp48
    tmp53 = tl.where(tmp51, tmp52, tmp46)
    tmp54 = tl.where(tmp2, tmp3, tmp53)
    tl.store(out_ptr0 + (x3 + tl.zeros([XBLOCK], tl.int32)), tmp54, xmask)
''')


async_compile.wait(globals())
del async_compile

def call(primals_1, primals_3, primals_5, primals_7, primals_9, primals_17, relu, getitem, getitem_1, relu_1, getitem_2, getitem_3, relu_2, relu_3, relu_4, getitem_4, getitem_5, gt, mul_1, addmm, gt_1, relu_6, permute_3, permute_7, permute_11, tangents_1):
    buf0 = empty_strided((128, 4096), (4096, 1), device='cuda', dtype=torch.float32)
    aten.mm.out(tangents_1, permute_3, out=buf0)
    buf1 = empty_strided((1000, 4096), (4096, 1), device='cuda', dtype=torch.float32)
    aten.mm.out(as_strided(tangents_1, (1000, 128), (1, 1000)), relu_6, out=buf1)
    buf2 = empty_strided((1, 1000), (1000, 1), device='cuda', dtype=torch.float32)
    stream0 = get_cuda_stream(0)
    kernel0.run(tangents_1, buf2, 1000, 128, grid=grid(1000), stream=stream0)
    buf3 = empty_strided((128, 4096), (4096, 1), device='cuda', dtype=torch.float32)
    kernel1.run(relu_6, buf0, buf3, 524288, grid=grid(524288), stream=stream0)
    buf4 = buf0; del buf0  # reuse
    aten.mm.out(buf3, permute_7, out=buf4)
    buf5 = empty_strided((128, 4096), (4096, 1), device='cuda', dtype=torch.float32)
    kernel2.run(gt_1, addmm, buf5, 524288, grid=grid(524288), stream=stream0)
    buf6 = empty_strided((4096, 4096), (4096, 1), device='cuda', dtype=torch.float32)
    aten.mm.out(as_strided(buf3, (4096, 128), (1, 4096)), buf5, out=buf6)
    del buf5
    buf7 = empty_strided((1, 4096), (4096, 1), device='cuda', dtype=torch.float32)
    kernel3.run(buf3, buf7, 4096, 128, grid=grid(4096), stream=stream0)
    buf8 = buf3; del buf3  # reuse
    kernel4.run(addmm, buf4, gt_1, buf8, 524288, grid=grid(524288), stream=stream0)
    del buf4
    buf9 = empty_strided((128, 9216), (9216, 1), device='cuda', dtype=torch.float32)
    aten.mm.out(buf8, permute_11, out=buf9)
    buf10 = empty_strided((4096, 9216), (9216, 1), device='cuda', dtype=torch.float32)
    aten.mm.out(as_strided(buf8, (4096, 128), (1, 4096)), mul_1, out=buf10)
    buf11 = empty_strided((1, 4096), (4096, 1), device='cuda', dtype=torch.float32)
    kernel3.run(buf8, buf11, 4096, 128, grid=grid(4096), stream=stream0)
    del buf8
    buf12 = empty_strided((128, 9216), (9216, 1), device='cuda', dtype=torch.float32)
    kernel5.run(buf9, gt, buf12, 1179648, grid=grid(1179648), stream=stream0)
    del buf9
    buf13 = aten._adaptive_avg_pool2d_backward(as_strided(buf12, (128, 256, 6, 6), (9216, 36, 6, 1)), getitem_4)
    assert buf13.size() == (128, 256, 6, 6)
    assert buf13.stride() == (9216, 36, 6, 1)
    del buf12
    buf14 = empty_strided((128, 256, 13, 13), (43264, 169, 13, 1), device='cuda', dtype=torch.float32)
    kernel6.run(relu_4, getitem_5, buf13, buf14, 5537792, grid=grid(5537792), stream=stream0)
    del buf13
    buf15 = aten.convolution_backward(buf14, relu_3, primals_9, [256], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, True])
    buf16 = buf15[0]
    assert buf16.size() == (128, 256, 13, 13)
    assert buf16.stride() == (43264, 169, 13, 1)
    buf17 = buf15[1]
    assert buf17.size() == (256, 256, 3, 3)
    assert buf17.stride() == (2304, 9, 3, 1)
    buf18 = buf15[2]
    assert buf18.size() == (256, )
    assert buf18.stride() == (1, )
    del buf15
    buf19 = buf14; del buf14  # reuse
    kernel7.run(relu_3, buf16, buf19, 5537792, grid=grid(5537792), stream=stream0)
    del buf16
    buf20 = aten.convolution_backward(buf19, relu_2, primals_7, [256], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, True])
    del buf19
    buf21 = buf20[0]
    assert buf21.size() == (128, 384, 13, 13)
    assert buf21.stride() == (64896, 169, 13, 1)
    buf22 = buf20[1]
    assert buf22.size() == (256, 384, 3, 3)
    assert buf22.stride() == (3456, 9, 3, 1)
    buf23 = buf20[2]
    assert buf23.size() == (256, )
    assert buf23.stride() == (1, )
    del buf20
    buf24 = empty_strided((128, 384, 13, 13), (64896, 169, 13, 1), device='cuda', dtype=torch.float32)
    kernel8.run(relu_2, buf21, buf24, 8306688, grid=grid(8306688), stream=stream0)
    del buf21
    buf25 = aten.convolution_backward(buf24, getitem_2, primals_5, [384], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, True])
    del buf24
    buf26 = buf25[0]
    assert buf26.size() == (128, 192, 13, 13)
    assert buf26.stride() == (32448, 169, 13, 1)
    buf27 = buf25[1]
    assert buf27.size() == (384, 192, 3, 3)
    assert buf27.stride() == (1728, 9, 3, 1)
    buf28 = buf25[2]
    assert buf28.size() == (384, )
    assert buf28.stride() == (1, )
    del buf25
    buf29 = empty_strided((128, 192, 27, 27), (139968, 729, 27, 1), device='cuda', dtype=torch.float32)
    kernel9.run(relu_1, getitem_3, buf26, buf29, 17915904, grid=grid(17915904), stream=stream0)
    del buf26
    buf30 = aten.convolution_backward(buf29, getitem, primals_3, [192], [1, 1], [2, 2], [1, 1], False, [0, 0], 1, [True, True, True])
    del buf29
    buf31 = buf30[0]
    assert buf31.size() == (128, 64, 27, 27)
    assert buf31.stride() == (46656, 729, 27, 1)
    buf32 = buf30[1]
    assert buf32.size() == (192, 64, 5, 5)
    assert buf32.stride() == (1600, 25, 5, 1)
    buf33 = buf30[2]
    assert buf33.size() == (192, )
    assert buf33.stride() == (1, )
    del buf30
    buf34 = empty_strided((128, 64, 55, 55), (193600, 3025, 55, 1), device='cuda', dtype=torch.float32)
    kernel10.run(relu, getitem_1, buf31, buf34, 24780800, grid=grid(24780800), stream=stream0)
    del buf31
    buf35 = aten.convolution_backward(buf34, primals_17, primals_1, [64], [4, 4], [2, 2], [1, 1], False, [0, 0], 1, [False, True, True])
    del buf34
    buf36 = buf35[1]
    assert buf36.size() == (64, 3, 11, 11)
    assert buf36.stride() == (363, 121, 11, 1)
    buf37 = buf35[2]
    assert buf37.size() == (64, )
    assert buf37.stride() == (1, )
    del buf35
    return (buf36, buf37, buf32, buf33, buf27, buf28, buf22, buf23, buf17, buf18, as_strided(buf10, (4096, 9216), (9216, 1)), as_strided(buf11, (4096, ), (1, )), as_strided(buf6, (4096, 4096), (4096, 1)), as_strided(buf7, (4096, ), (1, )), as_strided(buf1, (1000, 4096), (4096, 1)), as_strided(buf2, (1000, ), (1, )), None, )


if __name__ == "__main__":
    from torchdynamo.testing import rand_strided
    from torchinductor.utils import print_performance
    primals_1 = rand_strided((64, 3, 11, 11), (363, 121, 11, 1), device='cuda', dtype=torch.float32)
    primals_3 = rand_strided((192, 64, 5, 5), (1600, 25, 5, 1), device='cuda', dtype=torch.float32)
    primals_5 = rand_strided((384, 192, 3, 3), (1728, 9, 3, 1), device='cuda', dtype=torch.float32)
    primals_7 = rand_strided((256, 384, 3, 3), (3456, 9, 3, 1), device='cuda', dtype=torch.float32)
    primals_9 = rand_strided((256, 256, 3, 3), (2304, 9, 3, 1), device='cuda', dtype=torch.float32)
    primals_17 = rand_strided((128, 3, 224, 224), (150528, 50176, 224, 1), device='cuda', dtype=torch.float32)
    relu = rand_strided((128, 64, 55, 55), (193600, 3025, 55, 1), device='cuda', dtype=torch.float32)
    getitem = rand_strided((128, 64, 27, 27), (46656, 729, 27, 1), device='cuda', dtype=torch.float32)
    getitem_1 = rand_strided((128, 64, 27, 27), (46656, 729, 27, 1), device='cuda', dtype=torch.int64)
    relu_1 = rand_strided((128, 192, 27, 27), (139968, 729, 27, 1), device='cuda', dtype=torch.float32)
    getitem_2 = rand_strided((128, 192, 13, 13), (32448, 169, 13, 1), device='cuda', dtype=torch.float32)
    getitem_3 = rand_strided((128, 192, 13, 13), (32448, 169, 13, 1), device='cuda', dtype=torch.int64)
    relu_2 = rand_strided((128, 384, 13, 13), (64896, 169, 13, 1), device='cuda', dtype=torch.float32)
    relu_3 = rand_strided((128, 256, 13, 13), (43264, 169, 13, 1), device='cuda', dtype=torch.float32)
    relu_4 = rand_strided((128, 256, 13, 13), (43264, 169, 13, 1), device='cuda', dtype=torch.float32)
    getitem_4 = rand_strided((128, 256, 6, 6), (9216, 36, 6, 1), device='cuda', dtype=torch.float32)
    getitem_5 = rand_strided((128, 256, 6, 6), (9216, 36, 6, 1), device='cuda', dtype=torch.int64)
    gt = rand_strided((128, 9216), (9216, 1), device='cuda', dtype=torch.bool)
    mul_1 = rand_strided((128, 9216), (9216, 1), device='cuda', dtype=torch.float32)
    addmm = rand_strided((128, 4096), (4096, 1), device='cuda', dtype=torch.float32)
    gt_1 = rand_strided((128, 4096), (4096, 1), device='cuda', dtype=torch.bool)
    relu_6 = rand_strided((128, 4096), (4096, 1), device='cuda', dtype=torch.float32)
    permute_3 = rand_strided((1000, 4096), (4096, 1), device='cuda', dtype=torch.float32)
    permute_7 = rand_strided((4096, 4096), (4096, 1), device='cuda', dtype=torch.float32)
    permute_11 = rand_strided((4096, 9216), (9216, 1), device='cuda', dtype=torch.float32)
    tangents_1 = rand_strided((128, 1000), (1000, 1), device='cuda', dtype=torch.float32)
    print_performance(lambda: call(primals_1, primals_3, primals_5, primals_7, primals_9, primals_17, relu, getitem, getitem_1, relu_1, getitem_2, getitem_3, relu_2, relu_3, relu_4, getitem_4, getitem_5, gt, mul_1, addmm, gt_1, relu_6, permute_3, permute_7, permute_11, tangents_1))

1.100x p=0.00
